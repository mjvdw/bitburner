{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":3138,\"hp\":10,\"max_hp\":10,\"strength\":4,\"defense\":6,\"dexterity\":3,\"agility\":3,\"charisma\":2,\"intelligence\":0,\"hacking_chance_mult\":3.636249874859992,\"hacking_speed_mult\":3.112584722077572,\"hacking_money_mult\":17.516699862292942,\"hacking_grow_mult\":4.176739192881394,\"hacking_exp\":115280263.94068809,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":7.965155157549525,\"strength_mult\":4.709929784704081,\"defense_mult\":6.607553668976162,\"dexterity_mult\":3.0433392455010986,\"agility_mult\":3.4733763128001676,\"charisma_mult\":2.2912397858092213,\"hacking_exp_mult\":9.533632329859303,\"strength_exp_mult\":2.4153486075405532,\"defense_exp_mult\":2.4153486075405532,\"dexterity_exp_mult\":2.4153486075405532,\"agility_exp_mult\":2.4153486075405532,\"charisma_exp_mult\":2.4153486075405532,\"company_rep_mult\":1.9093664881743513,\"faction_rep_mult\":1.9093664881743513,\"money\":68097862038963.734,\"city\":\"Sector-12\",\"location\":\"Alpha Enterprises\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserv-001\",\"pserv-002\",\"pserv-003\",\"pserv-004\",\"pserv-005\",\"pserv-006\",\"pserv-007\",\"pserv-008\",\"pserv-009\",\"pserv-010\",\"pserv-011\",\"pserv-012\",\"pserv-013\",\"pserv-014\",\"pserv-015\",\"pserv-016\",\"pserv-017\",\"pserv-018\",\"pserv-019\",\"pserv-020\"],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Sector-12\",\"Daedalus\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"The Red Pill\"},{\"level\":66,\"name\":\"NeuroFlux Governor\"},{\"level\":67,\"name\":\"NeuroFlux Governor\"},{\"level\":68,\"name\":\"NeuroFlux Governor\"},{\"level\":69,\"name\":\"NeuroFlux Governor\"},{\"level\":70,\"name\":\"NeuroFlux Governor\"},{\"level\":71,\"name\":\"NeuroFlux Governor\"},{\"level\":72,\"name\":\"NeuroFlux Governor\"},{\"level\":73,\"name\":\"NeuroFlux Governor\"},{\"level\":74,\"name\":\"NeuroFlux Governor\"},{\"level\":75,\"name\":\"NeuroFlux Governor\"},{\"level\":76,\"name\":\"NeuroFlux Governor\"},{\"level\":77,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":65,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V3 Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Direct Memory Access Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Analyze Engine\"},{\"level\":1,\"name\":\"Synthetic Heart\"},{\"level\":1,\"name\":\"NEMEAN Subdermal Weave\"},{\"level\":1,\"name\":\"Synfibril Muscle\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":-120.8,\"crime_money_mult\":2.6253789212397334,\"crime_success_mult\":1.9093664881743513,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":5,\"workExpMult\":4,\"currentWorkFactionName\":\"Daedalus\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":1.4300448494788955,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":19.374872911887284,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":8324.577077787673,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":107877.98095751605,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":75,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":1455000,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.9093664881743513,\"hacknet_node_money_mult\":4.8156012862839805,\"hacknet_node_purchase_cost_mult\":0.3980604998274844,\"hacknet_node_ram_cost_mult\":0.5203405226503064,\"hacknet_node_core_cost_mult\":0.5203405226503064,\"hacknet_node_level_cost_mult\":0.4422894442527604,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1644708378535,\"totalPlaytime\":3171692800,\"playtimeSinceLastAug\":2779600,\"playtimeSinceLastBitnode\":3171692800,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":144388292163576.1,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":68097861038963.734,\"work\":0,\"servers\":-1153433600000,\"other\":-10005307200000,\"augmentations\":-65131690324612.38}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-46463248,\"codingcontract\":600000000,\"corporation\":0,\"crime\":69605245.87732019,\"gang\":0,\"hacking\":4157068650269420.5,\"hacknet\":101421859509.39528,\"hacknet_expenses\":-192421684133.62177,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-31182366663.673462,\"total\":810716589689630.8,\"work\":12247446.887963051,\"servers\":-2004266975645885.8,\"other\":-20561530800000,\"augmentations\":-1321402007332059.5}},\"scriptProdSinceLastAug\":144388259461727.3,\"exploits\":[],\"achievements\":[{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641791099089},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1641791099099},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1641791099100},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1643658359600},{\"ID\":\"WORKOUT\",\"unlockedOn\":1643658479579},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1643670439014},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1643670498793},{\"ID\":\"TRAVEL\",\"unlockedOn\":1643680956395},{\"ID\":\"4S\",\"unlockedOn\":1643681076402},{\"ID\":\"TOR\",\"unlockedOn\":1643682648187},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1643759114806},{\"ID\":\"NS2\",\"unlockedOn\":1643763778815},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1643948589846},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1643948589874},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1643948589875},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1644013439295},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1644189263898},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1644217890110},{\"ID\":\"NITESEC\",\"unlockedOn\":1644258328550},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1644286659283},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1644352610788},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1644446633514},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1644521879861},{\"ID\":\"FROZE\",\"unlockedOn\":1644563665327},{\"ID\":\"DONATION\",\"unlockedOn\":1644564226020},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1644638855226},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1644704290820},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1644704770815},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1644705550872}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":8,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"6.0.3.2\",\"isConnectedTo\":true,\"maxRam\":2097152,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"ServerProfiler.exe\",\"DeepscanV1.exe\",\"DeepscanV2.exe\",\"AutoLink.exe\",\"Formulas.exe\"],\"ramUsed\":43745.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/100-batch-controller.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2212.610000000184,\"pid\":2,\"ramUsage\":5.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/2c740217-1011-477b-984c-5d0cf9e0d7c2\",\"moduleSequenceNumber\":11806}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/scripts/000-master-controller.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1116.610000000117,\"pid\":2246,\"ramUsage\":12.35,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/000-master-controller.js\",\"url\":\"blob:https://danielyxie.github.io/c26c38f6-1205-4e2e-9053-7786e9028b11\",\"moduleSequenceNumber\":31}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":79.01000000000059,\"pid\":8320,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.61000000000058,\"pid\":8323,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.01000000000057,\"pid\":8330,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":175,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.61000000000057,\"pid\":8334,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.01000000000056,\"pid\":8340,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":76.61000000000055,\"pid\":8344,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":76.01000000000055,\"pid\":8350,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":75.61000000000054,\"pid\":8353,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":18,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":75.01000000000053,\"pid\":8359,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"pid\":8363,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":14,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.01000000000052,\"pid\":8371,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":73.61000000000051,\"pid\":8375,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":12,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":73.0100000000005,\"pid\":8381,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":72.6100000000005,\"pid\":8384,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":72.01000000000049,\"pid\":8392,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":71.61000000000048,\"pid\":8395,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":18,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":71.01000000000047,\"pid\":8401,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":70.61000000000047,\"pid\":8405,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":14,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":70.01000000000046,\"pid\":8412,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":69.61000000000045,\"pid\":8415,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":12,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":69.01000000000045,\"pid\":8421,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.61000000000044,\"pid\":8425,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":12,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.01000000000043,\"pid\":8432,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":67.61000000000043,\"pid\":8438,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":12,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":67.01000000000042,\"pid\":8447,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.61000000000041,\"pid\":8451,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.0100000000004,\"pid\":8457,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":176,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":65.6100000000004,\"pid\":8461,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":65.01000000000039,\"pid\":8467,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":64.61000000000038,\"pid\":8470,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":64.01000000000037,\"pid\":8477,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":63.61000000000037,\"pid\":8480,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":63.01000000000036,\"pid\":8487,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62.610000000000355,\"pid\":8490,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":12,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62.010000000000346,\"pid\":8496,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":174,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62.010000000000346,\"pid\":8497,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.61000000000034,\"pid\":8501,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.41000000000034,\"pid\":8504,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.01000000000033,\"pid\":8508,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.610000000000326,\"pid\":8511,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.41000000000032,\"pid\":8514,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.01000000000032,\"pid\":8518,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.61000000000031,\"pid\":8522,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.41000000000031,\"pid\":8525,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.0100000000003,\"pid\":8530,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.8100000000003,\"pid\":8532,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.6100000000003,\"pid\":8533,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.410000000000295,\"pid\":8536,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.01000000000029,\"pid\":8540,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.81000000000029,\"pid\":8542,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.610000000000284,\"pid\":8543,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.41000000000028,\"pid\":8546,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.010000000000275,\"pid\":8550,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.81000000000027,\"pid\":8552,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.61000000000027,\"pid\":8553,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.41000000000027,\"pid\":8556,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.01000000000026,\"pid\":8560,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":175,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.81000000000026,\"pid\":8562,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.610000000000255,\"pid\":8563,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.41000000000025,\"pid\":8566,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.01000000000025,\"pid\":8571,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":175,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.810000000000244,\"pid\":8573,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.61000000000024,\"pid\":8574,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.41000000000024,\"pid\":8577,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.01000000000023,\"pid\":8581,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":174,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":53.81000000000023,\"pid\":8583,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":53.61000000000023,\"pid\":8584,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":53.410000000000224,\"pid\":8586,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":53.01000000000022,\"pid\":8590,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.810000000000215,\"pid\":8592,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.61000000000021,\"pid\":8593,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":14,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.41000000000021,\"pid\":8596,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.010000000000204,\"pid\":8600,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.8100000000002,\"pid\":8602,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.6100000000002,\"pid\":8603,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":12,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.410000000000196,\"pid\":8606,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.01000000000019,\"pid\":8611,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.81000000000019,\"pid\":8613,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.610000000000184,\"pid\":8615,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.010000000000176,\"pid\":8621,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.010000000000176,\"pid\":8623,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":175,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.81000000000017,\"pid\":8624,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.61000000000017,\"pid\":8625,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":12,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.41000000000017,\"pid\":8628,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.01000000000016,\"pid\":8632,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.81000000000016,\"pid\":8634,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.610000000000156,\"pid\":8635,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.41000000000015,\"pid\":8638,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.01000000000015,\"pid\":8642,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":178,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.810000000000144,\"pid\":8644,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.61000000000014,\"pid\":8647,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.41000000000014,\"pid\":8648,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.01000000000013,\"pid\":8652,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.81000000000013,\"pid\":8654,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.61000000000013,\"pid\":8656,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":24,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.410000000000124,\"pid\":8657,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.01000000000012,\"pid\":8661,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.810000000000116,\"pid\":8663,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.61000000000011,\"pid\":8667,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.41000000000011,\"pid\":8668,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.010000000000105,\"pid\":8672,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":171,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.8100000000001,\"pid\":8674,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.6100000000001,\"pid\":8676,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.410000000000096,\"pid\":8678,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.01000000000009,\"pid\":8682,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000009,\"pid\":8684,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.610000000000085,\"pid\":8687,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.41000000000008,\"pid\":8688,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.010000000000076,\"pid\":8692,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.81000000000007,\"pid\":8694,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.61000000000007,\"pid\":8698,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000007,\"pid\":8699,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.01000000000006,\"pid\":8703,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.81000000000006,\"pid\":8705,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.610000000000056,\"pid\":8708,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.41000000000005,\"pid\":8709,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.01000000000005,\"pid\":8714,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.810000000000045,\"pid\":8716,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.61000000000004,\"pid\":8718,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.01000000000003,\"pid\":8722,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":174,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.01000000000003,\"pid\":8723,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.81000000000003,\"pid\":8725,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.61000000000003,\"pid\":8727,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.01000000000002,\"pid\":8730,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":174,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.01000000000002,\"pid\":8732,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.81000000000002,\"pid\":8734,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.610000000000014,\"pid\":8738,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.010000000000005,\"pid\":8741,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":173,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.010000000000005,\"pid\":8743,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.81,\"pid\":8745,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.61,\"pid\":8748,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.41,\"pid\":8749,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.00999999999999,\"pid\":8753,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.80999999999999,\"pid\":8755,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.609999999999985,\"pid\":8758,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.40999999999998,\"pid\":8759,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.00999999999998,\"pid\":8763,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.809999999999974,\"pid\":8765,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.60999999999997,\"pid\":8767,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.40999999999997,\"pid\":8769,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.00999999999996,\"pid\":8806,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.80999999999996,\"pid\":8808,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.60999999999996,\"pid\":8809,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.409999999999954,\"pid\":8811,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.00999999999995,\"pid\":8826,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.809999999999945,\"pid\":8828,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.60999999999994,\"pid\":8831,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.40999999999994,\"pid\":8832,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.009999999999934,\"pid\":8836,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.80999999999993,\"pid\":8839,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.60999999999993,\"pid\":8841,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.00999999999992,\"pid\":8845,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.80999999999992,\"pid\":8847,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.60999999999992,\"pid\":8848,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":177,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.60999999999992,\"pid\":8851,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.409999999999922,\"pid\":8852,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.009999999999923,\"pid\":8857,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.809999999999924,\"pid\":8860,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.609999999999925,\"pid\":8861,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999926,\"pid\":8863,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.009999999999927,\"pid\":8867,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.809999999999928,\"pid\":8869,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.60999999999993,\"pid\":8872,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.40999999999993,\"pid\":8873,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.00999999999993,\"pid\":8877,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.80999999999993,\"pid\":8880,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.609999999999932,\"pid\":8883,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.409999999999933,\"pid\":8884,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.009999999999934,\"pid\":8888,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":178,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.809999999999935,\"pid\":8890,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.609999999999935,\"pid\":8892,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.409999999999936,\"pid\":8894,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.80999999999994,\"pid\":8898,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":178,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.80999999999994,\"pid\":8900,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.60999999999994,\"pid\":8903,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.40999999999994,\"pid\":8905,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":8909,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":8911,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.609999999999943,\"pid\":8914,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.409999999999943,\"pid\":8915,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.809999999999945,\"pid\":8920,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.809999999999945,\"pid\":8922,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.409999999999947,\"pid\":8924,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.409999999999947,\"pid\":8925,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.80999999999995,\"pid\":8930,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.60999999999995,\"pid\":8932,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.40999999999995,\"pid\":8934,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.40999999999995,\"pid\":8935,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.809999999999953,\"pid\":8939,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.609999999999953,\"pid\":8942,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.409999999999954,\"pid\":8944,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.409999999999954,\"pid\":8945,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.809999999999956,\"pid\":8951,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.609999999999957,\"pid\":8953,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.409999999999958,\"pid\":8955,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.409999999999958,\"pid\":8956,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.80999999999996,\"pid\":8960,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.60999999999996,\"pid\":8962,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.40999999999996,\"pid\":8965,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.40999999999996,\"pid\":8966,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.809999999999963,\"pid\":8970,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.609999999999964,\"pid\":8972,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.409999999999965,\"pid\":8974,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.409999999999965,\"pid\":8975,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.809999999999967,\"pid\":8979,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.609999999999967,\"pid\":8981,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.609999999999967,\"pid\":8982,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ec465dd0-05b8-415f-9674-8be313b531ec\",\"moduleSequenceNumber\":156}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":8984,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":8985,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.80999999999997,\"pid\":8989,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.80999999999997,\"pid\":8991,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":12,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ec465dd0-05b8-415f-9674-8be313b531ec\",\"moduleSequenceNumber\":156}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.60999999999997,\"pid\":8992,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.60999999999997,\"pid\":8993,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ec465dd0-05b8-415f-9674-8be313b531ec\",\"moduleSequenceNumber\":156}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.40999999999997,\"pid\":8995,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.40999999999997,\"pid\":8996,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.809999999999974,\"pid\":9000,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.609999999999975,\"pid\":9002,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.609999999999975,\"pid\":9003,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":17,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ec465dd0-05b8-415f-9674-8be313b531ec\",\"moduleSequenceNumber\":156}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.409999999999975,\"pid\":9005,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.409999999999975,\"pid\":9006,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.809999999999977,\"pid\":9010,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999978,\"pid\":9012,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999978,\"pid\":9013,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ec465dd0-05b8-415f-9674-8be313b531ec\",\"moduleSequenceNumber\":156}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.409999999999979,\"pid\":9015,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.409999999999979,\"pid\":9016,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.809999999999981,\"pid\":9021,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.609999999999982,\"pid\":9023,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.609999999999982,\"pid\":9024,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":11,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ec465dd0-05b8-415f-9674-8be313b531ec\",\"moduleSequenceNumber\":156}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999982,\"pid\":9025,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999982,\"pid\":9026,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.809999999999985,\"pid\":9032,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.609999999999985,\"pid\":9034,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.609999999999985,\"pid\":9035,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ec465dd0-05b8-415f-9674-8be313b531ec\",\"moduleSequenceNumber\":156}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.409999999999986,\"pid\":9036,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.409999999999986,\"pid\":9037,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.809999999999988,\"pid\":9042,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.609999999999989,\"pid\":9044,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.609999999999989,\"pid\":9045,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":17,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ec465dd0-05b8-415f-9674-8be313b531ec\",\"moduleSequenceNumber\":156}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.40999999999999,\"pid\":9046,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":9051,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.609999999999992,\"pid\":9053,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":177,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.609999999999992,\"pid\":9054,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.609999999999992,\"pid\":9055,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ec465dd0-05b8-415f-9674-8be313b531ec\",\"moduleSequenceNumber\":156}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.409999999999993,\"pid\":9056,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.809999999999995,\"pid\":9061,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.609999999999996,\"pid\":9063,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":177,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.609999999999996,\"pid\":9064,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.609999999999996,\"pid\":9065,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":11,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ec465dd0-05b8-415f-9674-8be313b531ec\",\"moduleSequenceNumber\":156}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.409999999999997,\"pid\":9066,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.409999999999997,\"pid\":9068,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999999,\"pid\":9072,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.61,\"pid\":9074,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.61,\"pid\":9075,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":11,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ec465dd0-05b8-415f-9674-8be313b531ec\",\"moduleSequenceNumber\":156}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.41,\"pid\":9076,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.41,\"pid\":9078,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.810000000000002,\"pid\":9082,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000003,\"pid\":9084,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000003,\"pid\":9085,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":11,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ec465dd0-05b8-415f-9674-8be313b531ec\",\"moduleSequenceNumber\":156}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.410000000000004,\"pid\":9086,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.410000000000004,\"pid\":9088,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.810000000000005,\"pid\":9092,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.610000000000005,\"pid\":9094,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.410000000000005,\"pid\":9095,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.410000000000005,\"pid\":9097,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.810000000000004,\"pid\":9101,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.610000000000004,\"pid\":9103,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.610000000000004,\"pid\":9104,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ec465dd0-05b8-415f-9674-8be313b531ec\",\"moduleSequenceNumber\":156}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"pid\":9105,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"pid\":9107,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000003,\"pid\":9112,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.610000000000003,\"pid\":9113,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.610000000000003,\"pid\":9114,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":12,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ec465dd0-05b8-415f-9674-8be313b531ec\",\"moduleSequenceNumber\":156}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.610000000000003,\"pid\":9115,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ec465dd0-05b8-415f-9674-8be313b531ec\",\"moduleSequenceNumber\":156}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"pid\":9116,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"pid\":9118,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":9123,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":9125,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":9126,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ec465dd0-05b8-415f-9674-8be313b531ec\",\"moduleSequenceNumber\":156}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":9127,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":9129,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.8100000000000014,\"pid\":9133,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.610000000000001,\"pid\":9135,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.610000000000001,\"pid\":9136,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":11,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ec465dd0-05b8-415f-9674-8be313b531ec\",\"moduleSequenceNumber\":156}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.410000000000001,\"pid\":9137,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.410000000000001,\"pid\":9139,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"pid\":9143,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"pid\":9145,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"pid\":9146,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ec465dd0-05b8-415f-9674-8be313b531ec\",\"moduleSequenceNumber\":156}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"pid\":9147,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"pid\":9149,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"pid\":9153,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":9155,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":9156,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ec465dd0-05b8-415f-9674-8be313b531ec\",\"moduleSequenceNumber\":156}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":9158,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":9159,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":9163,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":170,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1048576,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":9165,\"ramUsage\":10.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":9166,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ec465dd0-05b8-415f-9674-8be313b531ec\",\"moduleSequenceNumber\":156}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":9168,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":9169,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":169,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n\\n    try {\\n        ns.brutessh(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.ftpcrack(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.relaysmtp(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.httpworm(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.sqlinject(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    ns.nuke(target);\\n}\",\"filename\":\"/utils/unlock-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/unlock-server.js\",\"url\":\"blob:https://danielyxie.github.io/ecc78205-57b5-461c-ad5b-4e88e0b5e3a8\",\"moduleSequenceNumber\":522}],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"home\",\"moduleSequenceNumber\":16,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"sleep\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\n\\tif (ns.hacknet.numNodes() == 0) {\\n\\t\\tns.hacknet.purchaseNode();\\n\\t}\\n\\n\\tlet cnt = ns.args[0];\\n\\n\\twhile (true) {\\n\\t\\tlet money = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\n\\t\\t// 1. Find node with minimum price action.\\n\\t\\t// Return both node and action (or purchase new node).\\n\\n\\t\\tlet upgrades = []\\n\\n\\t\\tfor (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\t\\t// Get the lowest cost action for each node.\\n\\t\\t\\tlet { cost, action } = getMinCostOfNextAction(ns, i);\\n\\t\\t\\t\\n\\t\\t\\tupgrades.push({\\n\\t\\t\\t\\tcost: cost,\\n\\t\\t\\t\\taction: action,\\n\\t\\t\\t\\tnode: i\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\tif (ns.hacknet.numNodes() < cnt) {\\n\\t\\t\\t// Once off push for the purchase new node option.\\n\\t\\t\\tupgrades.push({\\n\\t\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t\\t\\taction: ns.hacknet.purchaseNode,\\n\\t\\t\\t\\tnode: null\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\n\\t\\t// Sort options to get minimum cost option.\\n\\t\\tupgrades.sort((a,b) => {\\n\\t\\t\\treturn a.cost - b.cost\\n\\t\\t});\\n\\n\\t\\tlet upgrade = upgrades[0];\\n\\t\\t\\n\\t\\tif (money > upgrade.cost) {\\n\\t\\t\\tif (upgrade.action.name == \\\"purchaseNode\\\") {\\n\\t\\t\\t\\tupgrade.action();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tupgrade.action(upgrade.node);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nfunction getMinCostOfNextAction(ns, node) {\\n\\tlet levelCost = Number(ns.hacknet.getLevelUpgradeCost(node));\\n\\tlet ramCost = Number(ns.hacknet.getRamUpgradeCost(node));\\n\\tlet coreCost = Number(ns.hacknet.getCoreUpgradeCost(node));\\n\\n\\tlet costs = [levelCost, ramCost, coreCost];\\n\\tlet minCost = Math.min(...costs);\\n\\n\\tlet action = null;\\n\\tlet cost = Infinity;\\n\\t\\n\\tswitch (minCost) {\\n\\t\\tcase levelCost:\\n\\t\\t\\taction = ns.hacknet.upgradeLevel\\n\\t\\t\\tcost = levelCost\\n\\t\\t\\tbreak;\\n\\t\\tcase ramCost:\\n\\t\\t\\taction = ns.hacknet.upgradeRam\\n\\t\\t\\tcost = ramCost\\n\\t\\t\\tbreak;\\n\\t\\tcase coreCost:\\n\\t\\t\\taction = ns.hacknet.upgradeCore\\n\\t\\t\\tcost = coreCost\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn { cost, action };\\n}\",\"filename\":\"/utils/hacknet-nodes.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hacknet-nodes.js\",\"url\":\"blob:https://danielyxie.github.io/063262a5-00ef-4a25-99ed-7dc0636efc13\",\"moduleSequenceNumber\":28161}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":17,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst name = ns.args[0];\\n\\tconst ram = ns.args[1];\\n\\tns.purchaseServer(name, ram);\\n\\n\\tconst scripts = ns.ls(\\\"home\\\", \\\"scripts/\\\")\\n\\tawait ns.scp(scripts, name);\\n}\",\"filename\":\"/utils/buy-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/buy-server.js\",\"url\":\"blob:https://danielyxie.github.io/c9e9dd72-a9e5-4aba-ab87-a42eeee7418c\",\"moduleSequenceNumber\":14046}],\"dependents\":[],\"ramUsage\":4.65,\"server\":\"home\",\"moduleSequenceNumber\":18,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet debug = ns.args[0];\\n\\n\\tif (debug) {\\n\\t\\tawait earn(ns);\\n\\t} else {\\n\\t\\twhile (true) {\\n\\t\\t\\tawait earn(ns);\\n\\t\\t\\tawait ns.sleep(60000);\\n\\t\\t}\\n\\t}\\n}\\n\\nasync function earn(ns) {\\n\\tlet pservLimit = ns.getPurchasedServerLimit();\\n\\tlet maxServerRam = ns.getPurchasedServerMaxRam();\\n\\tlet maxServerCost = ns.getPurchasedServerCost(maxServerRam);\\n\\tlet money = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet pservs = ns.getPurchasedServers();\\n\\t\\n\\t// Identify targets, in order of best to hack.\\n\\tlet targets = getTargets(ns);\\n\\n\\t// Make sure that \\\"home\\\" is hacking the one at the target\\n\\t// top of the list.\\n\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", targets[0].hostname);\\n\\tif (!correctTarget) {\\n\\t\\t// Kill all scripts except this one.\\n\\t\\tlet currentScripts = ns.ps(\\\"home\\\");\\n\\t\\tlet batchScripts = currentScripts.filter( s => {\\n\\t\\t\\treturn s.filename != ns.getScriptName();\\n\\t\\t});\\n\\t\\tbatchScripts.forEach(s => {\\n\\t\\t\\tns.kill(s.pid);\\n\\t\\t});\\n\\n\\t\\t// Start with the correct one!\\n\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", 1, targets[0].hostname);\\n\\t}\\n\\n\\t// Buy a maxed out server to hack other targets.\\n\\tif (money >= maxServerCost && pservs.length < pservLimit) {\\n\\t\\tlet i = pservs.length + 1;\\n\\t\\tlet suffix = \\\"000\\\";\\n\\n\\t\\tif (i < 10) {\\n\\t\\t\\tsuffix = \\\"00\\\" + i.toString();\\n\\t\\t} else if (i < 100) {\\n\\t\\t\\tsuffix = \\\"0\\\" + i.toString();\\n\\t\\t} else {\\n\\t\\t\\tsuffix = i.toString();\\n\\t\\t}\\n\\n\\t\\tlet hostname = \\\"pserv-\\\" + suffix;\\n\\t\\tns.purchaseServer(hostname, ns.getPurchasedServerMaxRam());\\n\\t}\\n\\n\\t// Starting hacking using purchased servers.\\n\\t// Get pservs again.\\n\\tpservs = ns.getPurchasedServers();\\n\\n\\tfor (let n in pservs) {\\n\\t\\tlet p = pservs[n]\\n\\t\\t// Make sure pserv has the latest scripts.\\n\\t\\t// Get scripts on home and on server.\\n\\t\\tlet homeScripts = ns.ls(\\\"home\\\", \\\"/scripts/\\\");\\n\\t\\t\\n\\t\\t// Copy all scripts back to server.\\n\\t\\tawait ns.scp(homeScripts, p);\\n\\n\\t\\tlet i = parseInt(p.split(\\\"-\\\").pop());\\n\\t\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", p, targets[i].hostname);\\n\\t\\tif (!correctTarget) {\\n\\t\\t\\t// Kill all scripts on the server.\\n\\t\\t\\tns.killall(p);\\n\\n\\t\\t\\t// Start with the correct one!\\n\\t\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", p, 1, targets[i].hostname);\\n\\t\\t}\\n\\t}\\t\\n}\\n\\nfunction getTargets(ns) {\\n\\t// TODO: Having to cap infinite loop arbitrarily. Struggling\\n\\t// to get the scanQueue to remove a server once scanned.\\n\\n\\tlet targets = [];\\n\\tlet scanQueue = [];\\n\\tlet scanned = [];\\n\\n\\tlet levelOneTargets = ns.scan();\\n\\tlevelOneTargets.forEach( t => {\\n\\t\\tlet server = ns.getServer(t);\\n\\t\\tif (!server.purchasedByPlayer && t !== \\\"home\\\" && t !== \\\"darkweb\\\") {\\n\\t\\t\\ttargets.push(t);\\n\\t\\t\\tscanQueue.push(t);\\n\\t\\t}\\n\\t});\\n\\t\\n\\tlet i = 0\\n\\twhile (scanQueue.length > 0 && i < 30) {\\n\\t\\tlet results = [];\\n\\n\\t\\tscanQueue.forEach( t => {\\n\\t\\t\\tlet result = ns.scan(t);\\n\\t\\t\\tresult.forEach( server => {\\n\\t\\t\\t\\tresults.push(server)\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\t// Do something with results.\\n\\t\\tlet uniqueResults = [...new Set(results)];\\n\\t\\tuniqueResults.forEach( async r => {\\n\\t\\t\\tif (r in scanned === false) {\\n\\t\\t\\t\\ttargets.push(r);\\t\\n\\t\\t\\t\\tscanQueue.push(r);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\ti++;\\n\\t};\\n\\n\\tlet uniqueTargets = [...new Set(targets)];\\n\\n\\tlet targetServers = [];\\n\\tuniqueTargets.forEach( t => {\\n\\t\\ttargetServers.push(ns.getServer(t));\\n\\t});\\n\\n\\tlet hackableTargets = getHackableTargets(ns, targetServers);\\n\\tlet orderedTargets = getOrderedTargets(ns, hackableTargets);\\n\\n\\treturn orderedTargets;\\n}\\n\\nfunction getHackableTargets(ns, targets) {\\n\\t// Conditions\\n\\t//\\t- Player hacking skill must be greater than skill required.\\n\\t//\\t- Max possible money must be greater than zero.\\n\\n\\tlet hackingSkill = ns.getHackingLevel();\\n\\n\\tlet hackableTargets = targets.filter( t => {\\n\\t\\treturn hackingSkill >= t.requiredHackingSkill && ns.getServerMaxMoney(t.hostname) > 0;\\n\\t});\\n\\n\\treturn hackableTargets;\\n}\\n\\nfunction getOrderedTargets(ns, hackableTargets) {\\n\\t// Score is the maximum dollars per second.\\n\\t// This is not the same rate that will be effected in\\n\\t// practice, as this would drain the server of all money.\\n\\n\\tlet scoredTargets = [];\\n\\n\\thackableTargets.forEach( h => {\\n\\t\\tlet maxMoney = ns.getServerMaxMoney(h.hostname);\\n\\t\\tlet batchTime = ns.getWeakenTime(h.hostname) + 1000; // Weaken always takes longest.\\n\\t\\tlet score = maxMoney / batchTime;\\n\\t\\tscoredTargets.push({\\n\\t\\t\\thostname: h.hostname,\\n\\t\\t\\tscore: score\\n\\t\\t});\\n\\t});\\n\\n\\tlet orderedTargets = scoredTargets.sort( (a, b) => {\\n\\t\\treturn b.score - a.score;\\n\\t});\\n\\n\\tlet orderedTargetServers = [];\\n\\torderedTargets.forEach( o => {\\n\\t\\torderedTargetServers.push(ns.getServer(o.hostname));\\n\\t});\\n\\n\\treturn orderedTargets;\\n}\",\"filename\":\"/scripts/000-master-controller.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/000-master-controller.js\",\"url\":\"blob:https://danielyxie.github.io/352f9713-4e95-4804-b6a0-ac31d1886ffb\",\"moduleSequenceNumber\":319}],\"dependents\":[],\"ramUsage\":12.35,\"server\":\"home\",\"moduleSequenceNumber\":319,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tns.deleteServer(target);\\n}\",\"filename\":\"/utils/delete-pserv.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/delete-pserv.js\",\"url\":\"blob:https://danielyxie.github.io/442c540d-e0a2-4407-94cd-008027ce345b\",\"moduleSequenceNumber\":13680}],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"home\",\"moduleSequenceNumber\":20,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targets = getAllTargets(ns);\\n\\tlet server = ns.getServer();\\n\\n\\ttargets.forEach( target => {\\n\\t\\tns.tprint(\\\"Unlocking \\\" + target.hostname + \\\" with \\\" + server.hostname);\\n\\t\\tns.exec(\\\"scripts/unlock-server.js\\\", server.hostname, 1, target.hostname);\\n\\t});\\n}\\n\\nfunction getAllTargets(ns) {\\n\\t// TODO: Having to cap infinite loop arbitrarily. Struggling\\n\\t// to get the scanQueue to remove a server once scanned.\\n\\n\\tlet targets = [];\\n\\tlet scanQueue = [];\\n\\tlet scanned = [];\\n\\n\\tlet levelOneTargets = ns.scan();\\n\\tlevelOneTargets.forEach( t => {\\n\\t\\tlet server = ns.getServer(t);\\n\\t\\tif (!server.purchasedByPlayer && t !== \\\"home\\\" && t !== \\\"darkweb\\\") {\\n\\t\\t\\ttargets.push(t);\\n\\t\\t\\tscanQueue.push(t);\\n\\t\\t}\\n\\t});\\n\\t\\n\\tlet i = 0\\n\\twhile (scanQueue.length > 0 && i < 30) {\\n\\t\\tlet results = [];\\n\\n\\t\\tscanQueue.forEach( t => {\\n\\t\\t\\tlet result = ns.scan(t);\\n\\t\\t\\tresult.forEach( server => {\\n\\t\\t\\t\\tresults.push(server)\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\t// Do something with results.\\n\\t\\tlet uniqueResults = [...new Set(results)];\\n\\t\\tuniqueResults.forEach( async r => {\\n\\t\\t\\tif (r in scanned === false) {\\n\\t\\t\\t\\ttargets.push(r);\\t\\n\\t\\t\\t\\tscanQueue.push(r);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\ti++;\\n\\t};\\n\\n\\tlet uniqueTargets = [...new Set(targets)];\\n\\n\\tlet targetServers = [];\\n\\tuniqueTargets.forEach( t => {\\n\\t\\ttargetServers.push(ns.getServer(t));\\n\\t});\\n\\n\\treturn targetServers;\\n}\",\"filename\":\"/utils/unlock-all.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/unlock-all.js\",\"url\":\"blob:https://danielyxie.github.io/3435c46c-534b-4bf3-bae4-e301f776cd78\",\"moduleSequenceNumber\":22299}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"home\",\"moduleSequenceNumber\":21,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const findPath = (ns, target, serverName, serverList, ignore, isFound) => {\\n\\tignore.push(serverName);\\n\\tlet scanResults = ns.scan(serverName);\\n\\tfor (let server of scanResults) {\\n\\t\\tif (ignore.includes(server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (server === target) {\\n\\t\\t\\tserverList.push(server);\\n\\t\\t\\treturn [serverList, true];\\n\\t\\t}\\n\\t\\tserverList.push(server);\\n\\t\\t[serverList, isFound] = findPath(ns, target, server, serverList, ignore, isFound);\\n\\t\\tif (isFound) {\\n\\t\\t\\treturn [serverList, isFound];\\n\\t\\t}\\n\\t\\tserverList.pop();\\n\\t}\\n\\treturn [serverList, false];\\n}\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet startServer = ns.getHostname();\\n\\tlet target = ns.args[0];\\n\\tif (target === undefined) {\\n\\t\\tns.alert('Please provide target server');\\n\\t\\treturn;\\n\\t}\\n\\tlet [results, isFound] = findPath(ns, target, startServer, [], [], false);\\n\\tif (!isFound) {\\n\\t\\tns.alert('Server not found!');\\n\\t} else {\\n\\t\\tns.tprint(results.join(' --> '));\\n\\t}\\n}\",\"filename\":\"/utils/get-path.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/get-path.js\",\"url\":\"blob:https://danielyxie.github.io/54e3bfec-6819-42e4-afc2-919e4e5118d2\",\"moduleSequenceNumber\":7318}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"home\",\"moduleSequenceNumber\":22,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\t\\n}\",\"filename\":\"/utils/sync.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":1707,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet server = ns.getServer();\\n\\n\\tlet maxThreads = Math.trunc(ns.getServerMaxRam(server.hostname) / 2);\\n\\tlet offset = 200;\\n\\n\\t// Prepare server.\\n\\tunlockServer(ns, target);\\n\\n\\tlet serverReady = false\\n\\twhile (!serverReady) {\\n\\t\\tstartBatch(ns, target, maxThreads, true);\\n        serverReady = getServerStatus(ns, target);\\n\\t\\tif (!serverReady) {\\n            let waitTime = ns.getWeakenTime(target);\\n\\t\\t\\tawait ns.sleep(waitTime + (5 * offset));\\n\\t\\t}\\n\\t}\\n\\n\\t// Set up and run batches.\\n\\twhile (true) {\\n        let freeRam = ns.getServerMaxRam(server.hostname) - ns.getServerUsedRam(server.hostname);\\n        if (freeRam >= 20) {\\n            startBatch(ns, target, maxThreads, false);\\n            await ns.sleep(1000);\\n        } else {\\n            await ns.sleep(2000);\\n        }\\n\\t}\\n}\\n\\nfunction getServerStatus(ns, target) {\\n    let maxMoney = ns.getServerMaxMoney(target);\\n    let currentMoney = ns.getServerMoneyAvailable(target);\\n    let moneyReady = maxMoney == currentMoney;\\n\\n    let minSecurity = ns.getServerMinSecurityLevel(target);\\n    let currentSecurity = ns.getServerSecurityLevel(target);\\n    let securityReady = minSecurity == currentSecurity;\\n\\n    if (moneyReady && securityReady) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction unlockServer(ns, target) {\\n    try {\\n        ns.brutessh(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.ftpcrack(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.relaysmtp(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.httpworm(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.sqlinject(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    ns.nuke(target);\\n}\\n\\nfunction startBatch(ns, target, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\tns.exec(\\\"scripts/110-batch.js\\\", server.hostname, 1, target, threads, preparingServer);\\n}\",\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/3ff42718-143b-4a07-b7d7-4552e7a7464b\",\"moduleSequenceNumber\":32}],\"dependents\":[],\"ramUsage\":5.75,\"server\":\"home\",\"moduleSequenceNumber\":32,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet maxThreads = ns.args[1];\\n\\tlet preparingServer = ns.args[2] | false;\\n\\n\\tlet times = getTimes(ns, target);\\n\\tlet threads = getThreads(ns, target, maxThreads);\\n\\n\\tlet validThreads = Object.keys(threads).every( n => threads[n] >= 1);\\n\\t// ns.tprint(validThreads);\\n\\tif (validThreads) {\\n\\t\\tawait runBatch(ns, target, times, threads, preparingServer);\\n\\t}\\n}\\n\\nfunction getTimes(ns, target) {\\n\\t// Get run times for server.\\n\\tlet wTime = ns.getWeakenTime(target);\\n\\tlet gTime = ns.getGrowTime(target);\\n\\tlet hTime = ns.getHackTime(target);\\n\\tlet times = {\\n\\t\\tw: wTime,\\n\\t\\tg: gTime,\\n\\t\\th: hTime,\\n\\t\\toffset: 200\\n\\t}\\n\\n\\treturn times;\\n}\\n\\nfunction getThreads(ns, target, maxThreads) {\\n\\tlet multiplier = 2\\n\\n\\t// Get ideal number of threads for preferred hack amount.\\n\\tlet maxHackAmount = ns.getServerMaxMoney(target) / multiplier;\\n\\tlet hackThreads = ns.hackAnalyzeThreads(target, maxHackAmount);\\n\\tlet hackSecurityEffect = ns.hackAnalyzeSecurity(hackThreads);\\n\\n\\t// First weaken reduces security after hack. Calculate threads needed.\\n\\tlet firstWeakenEffect = 0;\\n\\tlet firstWeakenThreads = hackThreads\\n\\twhile (firstWeakenEffect < hackSecurityEffect) {\\n\\t\\tfirstWeakenEffect = ns.weakenAnalyze(firstWeakenThreads);\\n\\t\\tfirstWeakenThreads++;\\n\\t}\\n\\n\\t// Get grow threads needed to bring back up to full.\\n\\tlet growThreads = ns.growthAnalyze(target, multiplier);\\n\\tlet growSecurityEffect = ns.growthAnalyzeSecurity(growThreads);\\n\\n\\t// Second weaken reduces security after growth. Calculate threads needed.\\n\\tlet secondWeakenEffect = 0;\\n\\tlet secondWeakenThreads = growThreads\\n\\twhile (secondWeakenEffect < growSecurityEffect) {\\n\\t\\tsecondWeakenEffect = ns.weakenAnalyze(secondWeakenThreads);\\n\\t\\tsecondWeakenThreads++;\\n\\t}\\n\\n\\t// Scale down if this would use more threads than the maximum allowed.\\n\\tlet totalThreads = hackThreads + growThreads + firstWeakenThreads + secondWeakenThreads;\\n\\tif (totalThreads > maxThreads) {\\n\\t\\tlet ratio = (maxThreads / totalThreads) * 0.8;\\n\\t\\t\\n\\t\\thackThreads = hackThreads * ratio;\\n\\t\\tgrowThreads = growThreads * ratio;\\n\\t\\tfirstWeakenThreads = firstWeakenThreads * ratio;\\n\\t\\tsecondWeakenThreads = secondWeakenThreads * ratio;\\n\\t}\\n\\n\\tif (hackThreads < 1) {\\n\\t\\thackThreads = 1;\\n\\t}\\n\\tif (growThreads < 1) {\\n\\t\\tgrowThreads = 1;\\n\\t}\\n\\tif (firstWeakenThreads < 1) {\\n\\t\\tfirstWeakenThreads = 1;\\n\\t}\\n\\tif (secondWeakenThreads < 1) {\\n\\t\\tsecondWeakenThreads = 1;\\n\\t}\\n\\n\\tlet threads = {\\n\\t\\tw1: firstWeakenThreads,\\n\\t\\tw2: secondWeakenThreads,\\n\\t\\tg: growThreads,\\n\\t\\th: hackThreads\\n\\t}\\n\\n\\treturn threads;\\n}\\n\\nasync function runBatch(ns, target, times, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\t// Finish order:\\n\\t// 1. Hack\\n\\t// 2. Weaken\\n\\t// 3. Grow\\n\\t// 4. Weaken\\n\\n\\tlet w1Sleep = times.offset;\\n\\tlet w2Sleep = 3 * times.offset;\\n\\tlet gSleep = (times.w - times.g) + (times.offset * 2) - w2Sleep;\\n\\tlet hSleep = (times.w - times.h) - (w2Sleep + gSleep);\\n\\n\\tawait ns.sleep(w1Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w1, target);\\n\\t\\n\\tawait ns.sleep(w2Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w2, target);\\n\\t\\n\\tawait ns.sleep(gSleep);\\n\\tns.exec(\\\"scripts/112-grow.js\\\", server.hostname, threads.g, target);\\n\\t\\n\\tif (!preparingServer) {\\n\\t\\tawait ns.sleep(hSleep);\\n\\t\\tns.exec(\\\"scripts/111-hack.js\\\", server.hostname, threads.h, target);\\n\\t}\\n}\",\"filename\":\"/scripts/110-batch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a5a6c8a1-0554-4080-8e76-4f6197a2ef91\",\"moduleSequenceNumber\":33}],\"dependents\":[],\"ramUsage\":10.15,\"server\":\"home\",\"moduleSequenceNumber\":33,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.hack(target);\\t\\n}\",\"filename\":\"/scripts/111-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ec465dd0-05b8-415f-9674-8be313b531ec\",\"moduleSequenceNumber\":156}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":156,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"/scripts/112-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/f070d6e4-6725-443d-88e4-e05f1da11906\",\"moduleSequenceNumber\":50}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":50,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"/scripts/113-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cc35146c-a4af-4d8b-b037-ca892009120a\",\"moduleSequenceNumber\":34}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":34,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet targets = [];\\n\\tlet scanQueue = [];\\n\\tlet scanned = [];\\n\\n\\tlet levelOneTargets = ns.scan();\\n\\tlevelOneTargets.forEach( t => {\\n\\t\\tlet server = ns.getServer(t);\\n\\t\\tif (!server.purchasedByPlayer && t !== \\\"home\\\" && t !== \\\"darkweb\\\") {\\n\\t\\t\\ttargets.push(t);\\n\\t\\t\\tscanQueue.push(t);\\n\\t\\t}\\n\\t});\\n\\t\\n\\tlet i = 0\\n\\twhile (scanQueue.length > 0 && i < 30) {\\n\\t\\tlet results = [];\\n\\n\\t\\tscanQueue.forEach( t => {\\n\\t\\t\\tlet result = ns.scan(t);\\n\\t\\t\\tresult.forEach( server => {\\n\\t\\t\\t\\tresults.push(server)\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\t// Do something with results.\\n\\t\\tlet uniqueResults = [...new Set(results)];\\n\\t\\tuniqueResults.forEach( async r => {\\n\\t\\t\\tif (r in scanned === false) {\\n\\t\\t\\t\\ttargets.push(r);\\t\\n\\t\\t\\t\\tscanQueue.push(r);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\ti++;\\n\\t};\\n\\n\\tlet uniqueTargets = [...new Set(targets)];\\n\\n\\tlet targetServers = [];\\n\\tuniqueTargets.forEach( t => {\\n\\t\\ttargetServers.push(ns.getServer(t));\\n\\t});\\n\\n\\ttargetServers.forEach( s => {\\n\\t\\tns.tprint(s.hostname);\\n\\t});\\n}\",\"filename\":\"/utils/get-all-servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/get-all-servers.js\",\"url\":\"blob:https://danielyxie.github.io/7924855b-82b0-4c94-840c-7022d77c6996\",\"moduleSequenceNumber\":8145}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home\",\"moduleSequenceNumber\":29,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n}\",\"filename\":\"/utils/status.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":30,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv-001\",\"pserv-002\",\"pserv-003\",\"pserv-004\",\"pserv-005\",\"pserv-006\",\"pserv-007\",\"pserv-008\",\"pserv-009\",\"pserv-010\",\"pserv-011\",\"pserv-012\",\"pserv-013\",\"pserv-014\",\"pserv-015\",\"pserv-016\",\"pserv-017\",\"pserv-018\",\"pserv-019\",\"pserv-020\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"19.3.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":38420561855,\"moneyMax\":960514046375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1365,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"87.4.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":47655919661,\"moneyMax\":1191397991525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1236,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"93.0.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":38.95,\"minDifficulty\":28,\"moneyAvailable\":110124256274.01685,\"moneyMax\":689976702050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":905,\"serverGrowth\":80}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"23.9.1.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":31,\"minDifficulty\":31,\"moneyAvailable\":64451351819.62898,\"moneyMax\":403385496475,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":931,\"serverGrowth\":60}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"81.0.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":60.25,\"minDifficulty\":33,\"moneyAvailable\":74186975766.66684,\"moneyMax\":927996526975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1228,\"serverGrowth\":69}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"3.6.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":15.676,\"minDifficulty\":15,\"moneyAvailable\":2067231740.2321932,\"moneyMax\":480523680475,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1022,\"serverGrowth\":49}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"64.7.2.2\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":71.4,\"minDifficulty\":33,\"moneyAvailable\":30080716897.333942,\"moneyMax\":376345505675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":909,\"serverGrowth\":95}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"72.1.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"blade\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":18,\"minDifficulty\":18,\"moneyAvailable\":88.94759663901812,\"moneyMax\":465310765650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1006,\"serverGrowth\":80}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"21.1.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":28056951670,\"moneyMax\":701423791750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1110,\"serverGrowth\":93}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"32.8.2.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1440150589,\"moneyMax\":36003764725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1222,\"serverGrowth\":86}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"13.8.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1160,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"46.6.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1178493998,\"moneyMax\":29462349950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":985,\"serverGrowth\":71}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"98.1.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":948321926,\"moneyMax\":23708048150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1030,\"serverGrowth\":58}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"14.2.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":850622842,\"moneyMax\":21265571050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":905,\"serverGrowth\":45}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"60.9.9.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":737336352,\"moneyMax\":18433408800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":843,\"serverGrowth\":71}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"54.7.6.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":797692924,\"moneyMax\":19942323100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":856,\"serverGrowth\":66}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"99.2.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":990510393,\"moneyMax\":24762759825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":903,\"serverGrowth\":92}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"9.7.1.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1182015064,\"moneyMax\":29550376600,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":810,\"serverGrowth\":84}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"67.5.7.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\",\"helios\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":823893600,\"moneyMax\":20597340000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":816,\"serverGrowth\":77}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"49.2.1.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":510670066,\"moneyMax\":12766751650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":839,\"serverGrowth\":76}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"15.2.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\",\"titan-labs\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":812711752,\"moneyMax\":20317793800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":897,\"serverGrowth\":75}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"77.5.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":792933613,\"moneyMax\":19823340325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":873,\"serverGrowth\":71}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"3.9.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"omnia\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1004953787,\"moneyMax\":25123844675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":897,\"serverGrowth\":57}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"53.5.8.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":983694086,\"moneyMax\":24592352150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":934,\"serverGrowth\":63}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"90.9.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":41.946,\"minDifficulty\":22,\"moneyAvailable\":2163846451.3476925,\"moneyMax\":27067377700,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":818,\"serverGrowth\":72}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"95.2.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":788211500,\"moneyMax\":19705287500,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":789,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"17.1.8.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":874294456,\"moneyMax\":21857361400,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":787,\"serverGrowth\":75}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"28.3.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"icarus\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1632788216,\"moneyMax\":40819705400,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":851,\"serverGrowth\":51}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"4.3.3.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":42.802,\"minDifficulty\":28,\"moneyAvailable\":6897577866.156123,\"moneyMax\":43162687525,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":788,\"serverGrowth\":88}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"27.1.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":27.784000000000006,\"minDifficulty\":20,\"moneyAvailable\":4729392686.057192,\"moneyMax\":29626999075,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":845,\"serverGrowth\":80}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"11.8.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1380698433,\"moneyMax\":34517460825,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":819,\"serverGrowth\":76}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"42.4.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"defcomm\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":1048384793,\"moneyMax\":26209619825,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":800,\"serverGrowth\":79}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"53.5.5.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":725824553,\"moneyMax\":18145613825,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":698,\"serverGrowth\":65}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"17.2.7.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":24.366,\"minDifficulty\":19,\"moneyAvailable\":1013952328.8276186,\"moneyMax\":12671401475,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":491,\"serverGrowth\":44}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"55.4.3.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\",\"aerocorp\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":34.803999999999995,\"minDifficulty\":22,\"moneyAvailable\":1402750190.1883256,\"moneyMax\":17529881225,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":572,\"serverGrowth\":54}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"72.8.9.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":221482048,\"moneyMax\":5537051200,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":407,\"serverGrowth\":48}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"92.0.9.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":194847748,\"moneyMax\":4871193700,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":406,\"serverGrowth\":37}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"48.3.3.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":47.568,\"minDifficulty\":23,\"moneyAvailable\":2130924793.7037866,\"moneyMax\":26663340775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":736,\"serverGrowth\":85}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"84.1.4.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":248342295,\"moneyMax\":6208557375,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":433,\"serverGrowth\":57}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"39.1.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":560737671,\"moneyMax\":14018441775,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":559,\"serverGrowth\":62}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"65.4.4.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":455596431,\"moneyMax\":11389910775,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":441,\"serverGrowth\":50}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"2.5.7.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":43,\"minDifficulty\":14,\"moneyAvailable\":154376232,\"moneyMax\":3859405800,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":313,\"serverGrowth\":51}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"72.9.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":240471524,\"moneyMax\":6011788100,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":395,\"serverGrowth\":54}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"90.9.0.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":392,\"serverGrowth\":60}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"97.2.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\",\"summit-uni\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":70664983,\"moneyMax\":1766624575,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":278,\"serverGrowth\":62}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"8.5.5.7\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"71.2.2.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3.014,\"minDifficulty\":3,\"moneyAvailable\":25221169,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"65.9.5.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"19.0.6.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"91.7.7.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"31.0.6.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"foodnstuff\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"26.5.6.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"CSEC\",\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"74.3.4.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\",\"comptek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"44.3.2.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"19.1.5.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"max-hardware\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"51.7.2.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"CSEC\",\"netlink\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"80.8.6.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"54.1.1.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\",\"johnson-ortho\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":32,\"hackDifficulty\":32,\"minDifficulty\":11,\"moneyAvailable\":61185419,\"moneyMax\":1529635475,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":204,\"serverGrowth\":34}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"70.5.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":41,\"hackDifficulty\":41,\"minDifficulty\":14,\"moneyAvailable\":50099220,\"moneyMax\":1252480500,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":259,\"serverGrowth\":30}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"88.3.6.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"55.1.2.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":514,\"serverGrowth\":26}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"10.9.0.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":984,\"serverGrowth\":57}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"97.2.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":737,\"serverGrowth\":56}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"5.8.5.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":549,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"34.5.0.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\",\"rho-construction\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":359,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"27.9.7.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":214,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"86.3.8.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":534,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"0.8.9.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"harakiri-sushi\",\"neo-net\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":60,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"57.9.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"65.6.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"65.7.8.0\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-001\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-001\",\"httpPortOpen\":false,\"ip\":\"22.3.0.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":40599.650000000045,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/100-batch-controller.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":756.4100000000351,\"pid\":4070,\"ramUsage\":5.75,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/2b2d6a8f-b5ed-4752-9775-45f99a359f98\",\"moduleSequenceNumber\":229}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":93.41000000000079,\"pid\":8172,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{\"4sigma\":[0,0,0,22]},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3526.708535738927,\"onlineMoneyMade\":0,\"onlineRunningTime\":92.81000000000078,\"pid\":8177,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":22,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":92.41000000000078,\"pid\":8183,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":92.01000000000077,\"pid\":8189,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":21,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":91.41000000000076,\"pid\":8194,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":91.01000000000076,\"pid\":8198,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":24,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":90.41000000000075,\"pid\":8204,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":90.01000000000074,\"pid\":8208,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":24,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":89.41000000000074,\"pid\":8213,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":89.01000000000073,\"pid\":8217,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":24,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":88.41000000000072,\"pid\":8224,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":88.01000000000072,\"pid\":8228,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":24,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":87.41000000000071,\"pid\":8233,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":87.0100000000007,\"pid\":8238,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":23,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.4100000000007,\"pid\":8243,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.01000000000069,\"pid\":8248,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":23,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":85.41000000000068,\"pid\":8254,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":85.01000000000067,\"pid\":8258,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":22,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.41000000000066,\"pid\":8264,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000066,\"pid\":8268,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":24,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":83.41000000000065,\"pid\":8273,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":83.01000000000064,\"pid\":8278,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":24,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":82.41000000000064,\"pid\":8283,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":82.01000000000063,\"pid\":8288,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":24,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.41000000000062,\"pid\":8294,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.01000000000062,\"pid\":8298,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":24,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":80.41000000000061,\"pid\":8306,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":80.0100000000006,\"pid\":8310,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":24,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":79.4100000000006,\"pid\":8317,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":79.01000000000059,\"pid\":8321,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":23,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.41000000000058,\"pid\":8327,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.01000000000057,\"pid\":8331,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":23,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.41000000000057,\"pid\":8336,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.01000000000056,\"pid\":8342,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":22,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":76.41000000000055,\"pid\":8346,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":76.01000000000055,\"pid\":8351,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":22,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":75.41000000000054,\"pid\":8355,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":75.01000000000053,\"pid\":8361,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":24,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.41000000000052,\"pid\":8366,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.01000000000052,\"pid\":8370,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.01000000000052,\"pid\":8372,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":24,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":73.41000000000051,\"pid\":8376,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":73.0100000000005,\"pid\":8379,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":73.0100000000005,\"pid\":8382,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":24,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":72.4100000000005,\"pid\":8387,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":72.01000000000049,\"pid\":8391,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":72.01000000000049,\"pid\":8393,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":24,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":71.41000000000048,\"pid\":8397,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":71.01000000000047,\"pid\":8400,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":71.01000000000047,\"pid\":8402,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":23,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":70.41000000000047,\"pid\":8408,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":70.01000000000046,\"pid\":8411,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":70.01000000000046,\"pid\":8413,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":23,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":69.41000000000045,\"pid\":8417,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":69.21000000000045,\"pid\":8419,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":69.01000000000045,\"pid\":8420,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":69.01000000000045,\"pid\":8422,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":22,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.41000000000044,\"pid\":8428,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.21000000000043,\"pid\":8430,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.01000000000043,\"pid\":8431,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.01000000000043,\"pid\":8433,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":22,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":67.41000000000042,\"pid\":8441,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":67.21000000000042,\"pid\":8443,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":67.01000000000042,\"pid\":8445,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":67.01000000000042,\"pid\":8448,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":21,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.41000000000041,\"pid\":8454,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.2100000000004,\"pid\":8455,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.0100000000004,\"pid\":8456,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.0100000000004,\"pid\":8458,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":24,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":65.4100000000004,\"pid\":8464,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":65.21000000000039,\"pid\":8465,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":65.01000000000039,\"pid\":8466,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":65.01000000000039,\"pid\":8468,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":24,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":64.41000000000038,\"pid\":8474,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":64.21000000000038,\"pid\":8475,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":64.01000000000037,\"pid\":8476,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":64.01000000000037,\"pid\":8478,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":24,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":63.410000000000366,\"pid\":8484,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":63.21000000000036,\"pid\":8485,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":63.01000000000036,\"pid\":8486,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":63.01000000000036,\"pid\":8488,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":23,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62.41000000000035,\"pid\":8493,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62.21000000000035,\"pid\":8494,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62.010000000000346,\"pid\":8495,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62.010000000000346,\"pid\":8498,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":23,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.41000000000034,\"pid\":8505,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.210000000000335,\"pid\":8506,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.01000000000033,\"pid\":8507,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.01000000000033,\"pid\":8509,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":22,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.41000000000032,\"pid\":8515,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.21000000000032,\"pid\":8516,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.01000000000032,\"pid\":8517,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.01000000000032,\"pid\":8519,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":22,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.41000000000031,\"pid\":8526,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.210000000000306,\"pid\":8527,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.0100000000003,\"pid\":8528,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.0100000000003,\"pid\":8531,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":21,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.410000000000295,\"pid\":8537,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.21000000000029,\"pid\":8538,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.01000000000029,\"pid\":8539,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.01000000000029,\"pid\":8541,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":21,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.41000000000028,\"pid\":8547,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.21000000000028,\"pid\":8548,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.010000000000275,\"pid\":8549,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.010000000000275,\"pid\":8551,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":21,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.41000000000027,\"pid\":8557,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.210000000000264,\"pid\":8558,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.01000000000026,\"pid\":8559,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.01000000000026,\"pid\":8561,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":20,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.41000000000025,\"pid\":8567,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.21000000000025,\"pid\":8568,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.01000000000025,\"pid\":8569,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.01000000000025,\"pid\":8572,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":20,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.41000000000024,\"pid\":8578,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.210000000000235,\"pid\":8579,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.01000000000023,\"pid\":8580,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.01000000000023,\"pid\":8582,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":53.410000000000224,\"pid\":8587,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":53.21000000000022,\"pid\":8588,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":53.01000000000022,\"pid\":8589,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":53.01000000000022,\"pid\":8591,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.41000000000021,\"pid\":8597,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.21000000000021,\"pid\":8598,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.010000000000204,\"pid\":8599,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.010000000000204,\"pid\":8601,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.410000000000196,\"pid\":8608,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.21000000000019,\"pid\":8609,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.01000000000019,\"pid\":8610,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.01000000000019,\"pid\":8612,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.41000000000018,\"pid\":8618,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.21000000000018,\"pid\":8619,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.010000000000176,\"pid\":8620,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.010000000000176,\"pid\":8622,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.41000000000017,\"pid\":8629,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.210000000000164,\"pid\":8630,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.01000000000016,\"pid\":8631,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.01000000000016,\"pid\":8633,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.41000000000015,\"pid\":8639,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.21000000000015,\"pid\":8640,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.01000000000015,\"pid\":8641,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.01000000000015,\"pid\":8643,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.41000000000014,\"pid\":8649,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.210000000000136,\"pid\":8650,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.01000000000013,\"pid\":8651,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.01000000000013,\"pid\":8653,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.410000000000124,\"pid\":8658,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.21000000000012,\"pid\":8659,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.01000000000012,\"pid\":8660,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.01000000000012,\"pid\":8662,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.41000000000011,\"pid\":8669,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.21000000000011,\"pid\":8670,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.010000000000105,\"pid\":8671,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.010000000000105,\"pid\":8673,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.410000000000096,\"pid\":8679,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.21000000000009,\"pid\":8680,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.01000000000009,\"pid\":8681,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.01000000000009,\"pid\":8683,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.41000000000008,\"pid\":8689,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.21000000000008,\"pid\":8690,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.010000000000076,\"pid\":8691,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.010000000000076,\"pid\":8693,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":15,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000007,\"pid\":8700,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.210000000000065,\"pid\":8701,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.01000000000006,\"pid\":8702,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.01000000000006,\"pid\":8704,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.41000000000005,\"pid\":8711,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":126,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.21000000000005,\"pid\":8712,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.01000000000005,\"pid\":8713,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.01000000000005,\"pid\":8715,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.41000000000004,\"pid\":8719,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.210000000000036,\"pid\":8720,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.01000000000003,\"pid\":8721,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.01000000000003,\"pid\":8724,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.410000000000025,\"pid\":8728,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":128,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.21000000000002,\"pid\":8729,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.01000000000002,\"pid\":8731,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.01000000000002,\"pid\":8733,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":8739,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":128,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":8740,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.010000000000005,\"pid\":8742,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.81,\"pid\":8744,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.209999999999994,\"pid\":8750,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":128,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.00999999999999,\"pid\":8751,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.00999999999999,\"pid\":8752,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.80999999999999,\"pid\":8754,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.20999999999998,\"pid\":8760,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":128,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.00999999999998,\"pid\":8761,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.00999999999998,\"pid\":8762,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.809999999999974,\"pid\":8764,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.209999999999965,\"pid\":8770,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":128,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.00999999999996,\"pid\":8793,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.00999999999996,\"pid\":8803,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.80999999999996,\"pid\":8807,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.20999999999995,\"pid\":8823,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":128,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.00999999999995,\"pid\":8824,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.00999999999995,\"pid\":8825,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.809999999999945,\"pid\":8827,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.20999999999994,\"pid\":8833,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.009999999999934,\"pid\":8834,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.009999999999934,\"pid\":8835,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.80999999999993,\"pid\":8837,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.20999999999992,\"pid\":8842,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.00999999999992,\"pid\":8843,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.00999999999992,\"pid\":8844,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.80999999999992,\"pid\":8846,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.209999999999923,\"pid\":8853,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.009999999999923,\"pid\":8855,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.009999999999923,\"pid\":8856,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.809999999999924,\"pid\":8858,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.209999999999926,\"pid\":8864,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.009999999999927,\"pid\":8865,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.009999999999927,\"pid\":8866,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.809999999999928,\"pid\":8868,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.20999999999993,\"pid\":8874,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.00999999999993,\"pid\":8875,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.00999999999993,\"pid\":8876,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.80999999999993,\"pid\":8878,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.209999999999933,\"pid\":8885,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.009999999999934,\"pid\":8886,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.009999999999934,\"pid\":8887,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.809999999999935,\"pid\":8889,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.209999999999937,\"pid\":8895,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.009999999999938,\"pid\":8896,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.009999999999938,\"pid\":8897,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.80999999999994,\"pid\":8899,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.20999999999994,\"pid\":8906,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.00999999999994,\"pid\":8907,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.00999999999994,\"pid\":8908,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":8910,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.209999999999944,\"pid\":8917,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.009999999999945,\"pid\":8918,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.009999999999945,\"pid\":8919,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.809999999999945,\"pid\":8921,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.209999999999948,\"pid\":8927,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.00999999999995,\"pid\":8928,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.00999999999995,\"pid\":8929,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.80999999999995,\"pid\":8931,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.20999999999995,\"pid\":8937,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.009999999999952,\"pid\":8938,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.809999999999953,\"pid\":8940,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.809999999999953,\"pid\":8941,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.409999999999954,\"pid\":8946,\"ramUsage\":1.7,\"server\":\"pserv-001\",\"threads\":20,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/48616563-02a9-4ee2-9288-a1ab491bd30b\",\"moduleSequenceNumber\":1842}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.209999999999955,\"pid\":8948,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.009999999999955,\"pid\":8949,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.009999999999955,\"pid\":8950,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.809999999999956,\"pid\":8952,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.409999999999958,\"pid\":8957,\"ramUsage\":1.7,\"server\":\"pserv-001\",\"threads\":23,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/48616563-02a9-4ee2-9288-a1ab491bd30b\",\"moduleSequenceNumber\":1842}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.209999999999958,\"pid\":8958,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.00999999999996,\"pid\":8959,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.80999999999996,\"pid\":8961,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.60999999999996,\"pid\":8964,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":127,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.40999999999996,\"pid\":8967,\"ramUsage\":1.7,\"server\":\"pserv-001\",\"threads\":23,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/48616563-02a9-4ee2-9288-a1ab491bd30b\",\"moduleSequenceNumber\":1842}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.20999999999996,\"pid\":8968,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.009999999999962,\"pid\":8969,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.809999999999963,\"pid\":8971,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.609999999999964,\"pid\":8973,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":127,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.409999999999965,\"pid\":8976,\"ramUsage\":1.7,\"server\":\"pserv-001\",\"threads\":23,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/48616563-02a9-4ee2-9288-a1ab491bd30b\",\"moduleSequenceNumber\":1842}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.209999999999965,\"pid\":8977,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.009999999999966,\"pid\":8978,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.809999999999967,\"pid\":8980,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":24,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.609999999999967,\"pid\":8983,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":127,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":8986,\"ramUsage\":1.7,\"server\":\"pserv-001\",\"threads\":23,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/48616563-02a9-4ee2-9288-a1ab491bd30b\",\"moduleSequenceNumber\":1842}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.20999999999997,\"pid\":8987,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.00999999999997,\"pid\":8988,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.80999999999997,\"pid\":8990,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.60999999999997,\"pid\":8994,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":127,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.40999999999997,\"pid\":8997,\"ramUsage\":1.7,\"server\":\"pserv-001\",\"threads\":22,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/48616563-02a9-4ee2-9288-a1ab491bd30b\",\"moduleSequenceNumber\":1842}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999972,\"pid\":8998,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.009999999999973,\"pid\":8999,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.809999999999974,\"pid\":9001,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.609999999999975,\"pid\":9004,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":127,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.409999999999975,\"pid\":9007,\"ramUsage\":1.7,\"server\":\"pserv-001\",\"threads\":22,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/48616563-02a9-4ee2-9288-a1ab491bd30b\",\"moduleSequenceNumber\":1842}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":9008,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.009999999999977,\"pid\":9009,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.809999999999977,\"pid\":9011,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":21,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.409999999999979,\"pid\":9014,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":127,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.409999999999979,\"pid\":9017,\"ramUsage\":1.7,\"server\":\"pserv-001\",\"threads\":21,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/48616563-02a9-4ee2-9288-a1ab491bd30b\",\"moduleSequenceNumber\":1842}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.20999999999998,\"pid\":9018,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.00999999999998,\"pid\":9019,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.00999999999998,\"pid\":9020,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.809999999999981,\"pid\":9022,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":21,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999982,\"pid\":9027,\"ramUsage\":1.7,\"server\":\"pserv-001\",\"threads\":23,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/48616563-02a9-4ee2-9288-a1ab491bd30b\",\"moduleSequenceNumber\":1842}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.209999999999983,\"pid\":9029,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.009999999999984,\"pid\":9030,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.009999999999984,\"pid\":9031,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.809999999999985,\"pid\":9033,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":20,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.409999999999986,\"pid\":9038,\"ramUsage\":1.7,\"server\":\"pserv-001\",\"threads\":23,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/48616563-02a9-4ee2-9288-a1ab491bd30b\",\"moduleSequenceNumber\":1842}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.209999999999987,\"pid\":9039,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.009999999999987,\"pid\":9040,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.009999999999987,\"pid\":9041,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.809999999999988,\"pid\":9043,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":19,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.40999999999999,\"pid\":9047,\"ramUsage\":1.7,\"server\":\"pserv-001\",\"threads\":23,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/48616563-02a9-4ee2-9288-a1ab491bd30b\",\"moduleSequenceNumber\":1842}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.20999999999999,\"pid\":9048,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.009999999999991,\"pid\":9049,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.009999999999991,\"pid\":9050,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":9052,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.409999999999993,\"pid\":9057,\"ramUsage\":1.7,\"server\":\"pserv-001\",\"threads\":23,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/48616563-02a9-4ee2-9288-a1ab491bd30b\",\"moduleSequenceNumber\":1842}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.209999999999994,\"pid\":9058,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.009999999999994,\"pid\":9059,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.009999999999994,\"pid\":9060,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.809999999999995,\"pid\":9062,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.409999999999997,\"pid\":9067,\"ramUsage\":1.7,\"server\":\"pserv-001\",\"threads\":23,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/48616563-02a9-4ee2-9288-a1ab491bd30b\",\"moduleSequenceNumber\":1842}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.209999999999997,\"pid\":9069,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999998,\"pid\":9070,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999998,\"pid\":9071,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999999,\"pid\":9073,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.41,\"pid\":9077,\"ramUsage\":1.7,\"server\":\"pserv-001\",\"threads\":22,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/48616563-02a9-4ee2-9288-a1ab491bd30b\",\"moduleSequenceNumber\":1842}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.21,\"pid\":9079,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.010000000000002,\"pid\":9080,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.010000000000002,\"pid\":9081,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.810000000000002,\"pid\":9083,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.410000000000004,\"pid\":9087,\"ramUsage\":1.7,\"server\":\"pserv-001\",\"threads\":22,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/48616563-02a9-4ee2-9288-a1ab491bd30b\",\"moduleSequenceNumber\":1842}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.210000000000004,\"pid\":9089,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.010000000000005,\"pid\":9090,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.010000000000005,\"pid\":9091,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.810000000000005,\"pid\":9093,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.410000000000005,\"pid\":9096,\"ramUsage\":1.7,\"server\":\"pserv-001\",\"threads\":21,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/48616563-02a9-4ee2-9288-a1ab491bd30b\",\"moduleSequenceNumber\":1842}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.210000000000004,\"pid\":9098,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.010000000000004,\"pid\":9099,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.010000000000004,\"pid\":9100,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.810000000000004,\"pid\":9102,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"pid\":9106,\"ramUsage\":1.7,\"server\":\"pserv-001\",\"threads\":21,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/48616563-02a9-4ee2-9288-a1ab491bd30b\",\"moduleSequenceNumber\":1842}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.2100000000000035,\"pid\":9108,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":9109,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":9110,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000003,\"pid\":9111,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"pid\":9117,\"ramUsage\":1.7,\"server\":\"pserv-001\",\"threads\":23,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/48616563-02a9-4ee2-9288-a1ab491bd30b\",\"moduleSequenceNumber\":1842}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.210000000000003,\"pid\":9120,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.0100000000000025,\"pid\":9121,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.0100000000000025,\"pid\":9122,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":9124,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":9128,\"ramUsage\":1.7,\"server\":\"pserv-001\",\"threads\":23,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/48616563-02a9-4ee2-9288-a1ab491bd30b\",\"moduleSequenceNumber\":1842}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":9130,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.010000000000002,\"pid\":9131,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.010000000000002,\"pid\":9132,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.8100000000000014,\"pid\":9134,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.410000000000001,\"pid\":9138,\"ramUsage\":1.7,\"server\":\"pserv-001\",\"threads\":23,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/48616563-02a9-4ee2-9288-a1ab491bd30b\",\"moduleSequenceNumber\":1842}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.210000000000001,\"pid\":9140,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.0100000000000007,\"pid\":9141,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.0100000000000007,\"pid\":9142,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"pid\":9144,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"pid\":9148,\"ramUsage\":1.7,\"server\":\"pserv-001\",\"threads\":23,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/48616563-02a9-4ee2-9288-a1ab491bd30b\",\"moduleSequenceNumber\":1842}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.21,\"pid\":9150,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.01,\"pid\":9151,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.01,\"pid\":9152,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"pid\":9154,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":9157,\"ramUsage\":1.7,\"server\":\"pserv-001\",\"threads\":22,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/48616563-02a9-4ee2-9288-a1ab491bd30b\",\"moduleSequenceNumber\":1842}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":9160,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",524288,false],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":9161,\"ramUsage\":10.15,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":9162,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":124,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":9164,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/111-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":9167,\"ramUsage\":1.7,\"server\":\"pserv-001\",\"threads\":22,\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/48616563-02a9-4ee2-9288-a1ab491bd30b\",\"moduleSequenceNumber\":1842}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":9170,\"ramUsage\":1.75,\"server\":\"pserv-001\",\"threads\":125,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet debug = ns.args[0];\\n\\n\\tif (debug) {\\n\\t\\tawait earn(ns);\\n\\t} else {\\n\\t\\twhile (true) {\\n\\t\\t\\tawait earn(ns);\\n\\t\\t\\tawait ns.sleep(60000);\\n\\t\\t}\\n\\t}\\n}\\n\\nasync function earn(ns) {\\n\\tlet pservLimit = ns.getPurchasedServerLimit();\\n\\tlet maxServerRam = ns.getPurchasedServerMaxRam();\\n\\tlet maxServerCost = ns.getPurchasedServerCost(maxServerRam);\\n\\tlet money = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet pservs = ns.getPurchasedServers();\\n\\t\\n\\t// Identify targets, in order of best to hack.\\n\\tlet targets = getTargets(ns);\\n\\n\\t// Make sure that \\\"home\\\" is hacking the one at the target\\n\\t// top of the list.\\n\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", targets[0].hostname);\\n\\tif (!correctTarget) {\\n\\t\\t// Kill all scripts except this one.\\n\\t\\tlet currentScripts = ns.ps(\\\"home\\\");\\n\\t\\tlet batchScripts = currentScripts.filter( s => {\\n\\t\\t\\treturn s.filename != ns.getScriptName();\\n\\t\\t});\\n\\t\\tbatchScripts.forEach(s => {\\n\\t\\t\\tns.kill(s.pid);\\n\\t\\t});\\n\\n\\t\\t// Start with the correct one!\\n\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", 1, targets[0].hostname);\\n\\t}\\n\\n\\t// Buy a maxed out server to hack other targets.\\n\\tif (money >= maxServerCost && pservs.length < pservLimit) {\\n\\t\\tlet i = pservs.length + 1;\\n\\t\\tlet suffix = \\\"000\\\";\\n\\n\\t\\tif (i < 10) {\\n\\t\\t\\tsuffix = \\\"00\\\" + i.toString();\\n\\t\\t} else if (i < 100) {\\n\\t\\t\\tsuffix = \\\"0\\\" + i.toString();\\n\\t\\t} else {\\n\\t\\t\\tsuffix = i.toString();\\n\\t\\t}\\n\\n\\t\\tlet hostname = \\\"pserv-\\\" + suffix;\\n\\t\\tns.purchaseServer(hostname, ns.getPurchasedServerMaxRam());\\n\\t}\\n\\n\\t// Starting hacking using purchased servers.\\n\\t// Get pservs again.\\n\\tpservs = ns.getPurchasedServers();\\n\\n\\tfor (let n in pservs) {\\n\\t\\tlet p = pservs[n]\\n\\t\\t// Make sure pserv has the latest scripts.\\n\\t\\t// Get scripts on home and on server.\\n\\t\\tlet homeScripts = ns.ls(\\\"home\\\", \\\"/scripts/\\\");\\n\\t\\t\\n\\t\\t// Copy all scripts back to server.\\n\\t\\tawait ns.scp(homeScripts, p);\\n\\n\\t\\tlet i = parseInt(p.split(\\\"-\\\").pop());\\n\\t\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", p, targets[i].hostname);\\n\\t\\tif (!correctTarget) {\\n\\t\\t\\t// Kill all scripts on the server.\\n\\t\\t\\tns.killall(p);\\n\\n\\t\\t\\t// Start with the correct one!\\n\\t\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", p, 1, targets[i].hostname);\\n\\t\\t}\\n\\t}\\t\\n}\\n\\nfunction getTargets(ns) {\\n\\t// TODO: Having to cap infinite loop arbitrarily. Struggling\\n\\t// to get the scanQueue to remove a server once scanned.\\n\\n\\tlet targets = [];\\n\\tlet scanQueue = [];\\n\\tlet scanned = [];\\n\\n\\tlet levelOneTargets = ns.scan();\\n\\tlevelOneTargets.forEach( t => {\\n\\t\\tlet server = ns.getServer(t);\\n\\t\\tif (!server.purchasedByPlayer && t !== \\\"home\\\" && t !== \\\"darkweb\\\") {\\n\\t\\t\\ttargets.push(t);\\n\\t\\t\\tscanQueue.push(t);\\n\\t\\t}\\n\\t});\\n\\t\\n\\tlet i = 0\\n\\twhile (scanQueue.length > 0 && i < 30) {\\n\\t\\tlet results = [];\\n\\n\\t\\tscanQueue.forEach( t => {\\n\\t\\t\\tlet result = ns.scan(t);\\n\\t\\t\\tresult.forEach( server => {\\n\\t\\t\\t\\tresults.push(server)\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\t// Do something with results.\\n\\t\\tlet uniqueResults = [...new Set(results)];\\n\\t\\tuniqueResults.forEach( async r => {\\n\\t\\t\\tif (r in scanned === false) {\\n\\t\\t\\t\\ttargets.push(r);\\t\\n\\t\\t\\t\\tscanQueue.push(r);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\ti++;\\n\\t};\\n\\n\\tlet uniqueTargets = [...new Set(targets)];\\n\\n\\tlet targetServers = [];\\n\\tuniqueTargets.forEach( t => {\\n\\t\\ttargetServers.push(ns.getServer(t));\\n\\t});\\n\\n\\tlet hackableTargets = getHackableTargets(ns, targetServers);\\n\\tlet orderedTargets = getOrderedTargets(ns, hackableTargets);\\n\\n\\treturn orderedTargets;\\n}\\n\\nfunction getHackableTargets(ns, targets) {\\n\\t// Conditions\\n\\t//\\t- Player hacking skill must be greater than skill required.\\n\\t//\\t- Max possible money must be greater than zero.\\n\\n\\tlet hackingSkill = ns.getHackingLevel();\\n\\n\\tlet hackableTargets = targets.filter( t => {\\n\\t\\treturn hackingSkill >= t.requiredHackingSkill && ns.getServerMaxMoney(t.hostname) > 0;\\n\\t});\\n\\n\\treturn hackableTargets;\\n}\\n\\nfunction getOrderedTargets(ns, hackableTargets) {\\n\\t// Score is the maximum dollars per second.\\n\\t// This is not the same rate that will be effected in\\n\\t// practice, as this would drain the server of all money.\\n\\n\\tlet scoredTargets = [];\\n\\n\\thackableTargets.forEach( h => {\\n\\t\\tlet maxMoney = ns.getServerMaxMoney(h.hostname);\\n\\t\\tlet batchTime = ns.getWeakenTime(h.hostname) + 1000; // Weaken always takes longest.\\n\\t\\tlet score = maxMoney / batchTime;\\n\\t\\tscoredTargets.push({\\n\\t\\t\\thostname: h.hostname,\\n\\t\\t\\tscore: score\\n\\t\\t});\\n\\t});\\n\\n\\tlet orderedTargets = scoredTargets.sort( (a, b) => {\\n\\t\\treturn b.score - a.score;\\n\\t});\\n\\n\\tlet orderedTargetServers = [];\\n\\torderedTargets.forEach( o => {\\n\\t\\torderedTargetServers.push(ns.getServer(o.hostname));\\n\\t});\\n\\n\\treturn orderedTargets;\\n}\",\"filename\":\"/scripts/000-master-controller.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":12.35,\"server\":\"pserv-001\",\"moduleSequenceNumber\":320,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet server = ns.getServer();\\n\\n\\tlet maxThreads = Math.trunc(ns.getServerMaxRam(server.hostname) / 2);\\n\\tlet offset = 200;\\n\\n\\t// Prepare server.\\n\\tunlockServer(ns, target);\\n\\n\\tlet serverReady = false\\n\\twhile (!serverReady) {\\n\\t\\tstartBatch(ns, target, maxThreads, true);\\n        serverReady = getServerStatus(ns, target);\\n\\t\\tif (!serverReady) {\\n            let waitTime = ns.getWeakenTime(target);\\n\\t\\t\\tawait ns.sleep(waitTime + (5 * offset));\\n\\t\\t}\\n\\t}\\n\\n\\t// Set up and run batches.\\n\\twhile (true) {\\n        let freeRam = ns.getServerMaxRam(server.hostname) - ns.getServerUsedRam(server.hostname);\\n        if (freeRam >= 20) {\\n            startBatch(ns, target, maxThreads, false);\\n            await ns.sleep(1000);\\n        } else {\\n            await ns.sleep(2000);\\n        }\\n\\t}\\n}\\n\\nfunction getServerStatus(ns, target) {\\n    let maxMoney = ns.getServerMaxMoney(target);\\n    let currentMoney = ns.getServerMoneyAvailable(target);\\n    let moneyReady = maxMoney == currentMoney;\\n\\n    let minSecurity = ns.getServerMinSecurityLevel(target);\\n    let currentSecurity = ns.getServerSecurityLevel(target);\\n    let securityReady = minSecurity == currentSecurity;\\n\\n    if (moneyReady && securityReady) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction unlockServer(ns, target) {\\n    try {\\n        ns.brutessh(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.ftpcrack(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.relaysmtp(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.httpworm(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.sqlinject(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    ns.nuke(target);\\n}\\n\\nfunction startBatch(ns, target, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\tns.exec(\\\"scripts/110-batch.js\\\", server.hostname, 1, target, threads, preparingServer);\\n}\",\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/2b2d6a8f-b5ed-4752-9775-45f99a359f98\",\"moduleSequenceNumber\":229}],\"dependents\":[],\"ramUsage\":5.75,\"server\":\"pserv-001\",\"moduleSequenceNumber\":229,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet maxThreads = ns.args[1];\\n\\tlet preparingServer = ns.args[2] | false;\\n\\n\\tlet times = getTimes(ns, target);\\n\\tlet threads = getThreads(ns, target, maxThreads);\\n\\n\\tlet validThreads = Object.keys(threads).every( n => threads[n] >= 1);\\n\\t// ns.tprint(validThreads);\\n\\tif (validThreads) {\\n\\t\\tawait runBatch(ns, target, times, threads, preparingServer);\\n\\t}\\n}\\n\\nfunction getTimes(ns, target) {\\n\\t// Get run times for server.\\n\\tlet wTime = ns.getWeakenTime(target);\\n\\tlet gTime = ns.getGrowTime(target);\\n\\tlet hTime = ns.getHackTime(target);\\n\\tlet times = {\\n\\t\\tw: wTime,\\n\\t\\tg: gTime,\\n\\t\\th: hTime,\\n\\t\\toffset: 200\\n\\t}\\n\\n\\treturn times;\\n}\\n\\nfunction getThreads(ns, target, maxThreads) {\\n\\tlet multiplier = 2\\n\\n\\t// Get ideal number of threads for preferred hack amount.\\n\\tlet maxHackAmount = ns.getServerMaxMoney(target) / multiplier;\\n\\tlet hackThreads = ns.hackAnalyzeThreads(target, maxHackAmount);\\n\\tlet hackSecurityEffect = ns.hackAnalyzeSecurity(hackThreads);\\n\\n\\t// First weaken reduces security after hack. Calculate threads needed.\\n\\tlet firstWeakenEffect = 0;\\n\\tlet firstWeakenThreads = hackThreads\\n\\twhile (firstWeakenEffect < hackSecurityEffect) {\\n\\t\\tfirstWeakenEffect = ns.weakenAnalyze(firstWeakenThreads);\\n\\t\\tfirstWeakenThreads++;\\n\\t}\\n\\n\\t// Get grow threads needed to bring back up to full.\\n\\tlet growThreads = ns.growthAnalyze(target, multiplier);\\n\\tlet growSecurityEffect = ns.growthAnalyzeSecurity(growThreads);\\n\\n\\t// Second weaken reduces security after growth. Calculate threads needed.\\n\\tlet secondWeakenEffect = 0;\\n\\tlet secondWeakenThreads = growThreads\\n\\twhile (secondWeakenEffect < growSecurityEffect) {\\n\\t\\tsecondWeakenEffect = ns.weakenAnalyze(secondWeakenThreads);\\n\\t\\tsecondWeakenThreads++;\\n\\t}\\n\\n\\t// Scale down if this would use more threads than the maximum allowed.\\n\\tlet totalThreads = hackThreads + growThreads + firstWeakenThreads + secondWeakenThreads;\\n\\tif (totalThreads > maxThreads) {\\n\\t\\tlet ratio = (maxThreads / totalThreads) * 0.8;\\n\\t\\t\\n\\t\\thackThreads = hackThreads * ratio;\\n\\t\\tgrowThreads = growThreads * ratio;\\n\\t\\tfirstWeakenThreads = firstWeakenThreads * ratio;\\n\\t\\tsecondWeakenThreads = secondWeakenThreads * ratio;\\n\\t}\\n\\n\\tif (hackThreads < 1) {\\n\\t\\thackThreads = 1;\\n\\t}\\n\\tif (growThreads < 1) {\\n\\t\\tgrowThreads = 1;\\n\\t}\\n\\tif (firstWeakenThreads < 1) {\\n\\t\\tfirstWeakenThreads = 1;\\n\\t}\\n\\tif (secondWeakenThreads < 1) {\\n\\t\\tsecondWeakenThreads = 1;\\n\\t}\\n\\n\\tlet threads = {\\n\\t\\tw1: firstWeakenThreads,\\n\\t\\tw2: secondWeakenThreads,\\n\\t\\tg: growThreads,\\n\\t\\th: hackThreads\\n\\t}\\n\\n\\treturn threads;\\n}\\n\\nasync function runBatch(ns, target, times, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\t// Finish order:\\n\\t// 1. Hack\\n\\t// 2. Weaken\\n\\t// 3. Grow\\n\\t// 4. Weaken\\n\\n\\tlet w1Sleep = times.offset;\\n\\tlet w2Sleep = 3 * times.offset;\\n\\tlet gSleep = (times.w - times.g) + (times.offset * 2) - w2Sleep;\\n\\tlet hSleep = (times.w - times.h) - (w2Sleep + gSleep);\\n\\n\\tawait ns.sleep(w1Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w1, target);\\n\\t\\n\\tawait ns.sleep(w2Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w2, target);\\n\\t\\n\\tawait ns.sleep(gSleep);\\n\\tns.exec(\\\"scripts/112-grow.js\\\", server.hostname, threads.g, target);\\n\\t\\n\\tif (!preparingServer) {\\n\\t\\tawait ns.sleep(hSleep);\\n\\t\\tns.exec(\\\"scripts/111-hack.js\\\", server.hostname, threads.h, target);\\n\\t}\\n}\",\"filename\":\"/scripts/110-batch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a1e91dd9-548d-4800-80d9-0a497eba213f\",\"moduleSequenceNumber\":230}],\"dependents\":[],\"ramUsage\":10.15,\"server\":\"pserv-001\",\"moduleSequenceNumber\":230,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.hack(target);\\t\\n}\",\"filename\":\"/scripts/111-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/111-hack.js\",\"url\":\"blob:https://danielyxie.github.io/48616563-02a9-4ee2-9288-a1ab491bd30b\",\"moduleSequenceNumber\":1842}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-001\",\"moduleSequenceNumber\":1842,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"/scripts/112-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/130f7aba-c96b-4ba6-a9c0-e320ed572b27\",\"moduleSequenceNumber\":274}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-001\",\"moduleSequenceNumber\":274,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"/scripts/113-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/80591289-e3a3-4661-b98d-9f38370091fb\",\"moduleSequenceNumber\":231}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-001\",\"moduleSequenceNumber\":231,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-002\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-002\",\"httpPortOpen\":false,\"ip\":\"42.1.2.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":950.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"/scripts/100-batch-controller.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":335.8099999999895,\"pid\":6231,\"ramUsage\":5.75,\"server\":\"pserv-002\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/c8332ef0-49ed-436a-b6eb-76aa943413f5\",\"moduleSequenceNumber\":333}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":67.41000000000042,\"pid\":8440,\"ramUsage\":1.75,\"server\":\"pserv-002\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/57a6fe07-1256-4293-8ab2-5e759b9cff09\",\"moduleSequenceNumber\":335}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.81000000000041,\"pid\":8449,\"ramUsage\":1.75,\"server\":\"pserv-002\",\"threads\":270,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/57a6fe07-1256-4293-8ab2-5e759b9cff09\",\"moduleSequenceNumber\":335}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.209999999999923,\"pid\":8854,\"ramUsage\":1.75,\"server\":\"pserv-002\",\"threads\":269,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/7993fcd5-98a2-401b-9d60-0c13a8bab5f8\",\"moduleSequenceNumber\":378}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet debug = ns.args[0];\\n\\n\\tif (debug) {\\n\\t\\tawait earn(ns);\\n\\t} else {\\n\\t\\twhile (true) {\\n\\t\\t\\tawait earn(ns);\\n\\t\\t\\tawait ns.sleep(60000);\\n\\t\\t}\\n\\t}\\n}\\n\\nasync function earn(ns) {\\n\\tlet pservLimit = ns.getPurchasedServerLimit();\\n\\tlet maxServerRam = ns.getPurchasedServerMaxRam();\\n\\tlet maxServerCost = ns.getPurchasedServerCost(maxServerRam);\\n\\tlet money = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet pservs = ns.getPurchasedServers();\\n\\t\\n\\t// Identify targets, in order of best to hack.\\n\\tlet targets = getTargets(ns);\\n\\n\\t// Make sure that \\\"home\\\" is hacking the one at the target\\n\\t// top of the list.\\n\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", targets[0].hostname);\\n\\tif (!correctTarget) {\\n\\t\\t// Kill all scripts except this one.\\n\\t\\tlet currentScripts = ns.ps(\\\"home\\\");\\n\\t\\tlet batchScripts = currentScripts.filter( s => {\\n\\t\\t\\treturn s.filename != ns.getScriptName();\\n\\t\\t});\\n\\t\\tbatchScripts.forEach(s => {\\n\\t\\t\\tns.kill(s.pid);\\n\\t\\t});\\n\\n\\t\\t// Start with the correct one!\\n\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", 1, targets[0].hostname);\\n\\t}\\n\\n\\t// Buy a maxed out server to hack other targets.\\n\\tif (money >= maxServerCost && pservs.length < pservLimit) {\\n\\t\\tlet i = pservs.length + 1;\\n\\t\\tlet suffix = \\\"000\\\";\\n\\n\\t\\tif (i < 10) {\\n\\t\\t\\tsuffix = \\\"00\\\" + i.toString();\\n\\t\\t} else if (i < 100) {\\n\\t\\t\\tsuffix = \\\"0\\\" + i.toString();\\n\\t\\t} else {\\n\\t\\t\\tsuffix = i.toString();\\n\\t\\t}\\n\\n\\t\\tlet hostname = \\\"pserv-\\\" + suffix;\\n\\t\\tns.purchaseServer(hostname, ns.getPurchasedServerMaxRam());\\n\\t}\\n\\n\\t// Starting hacking using purchased servers.\\n\\t// Get pservs again.\\n\\tpservs = ns.getPurchasedServers();\\n\\n\\tfor (let n in pservs) {\\n\\t\\tlet p = pservs[n]\\n\\t\\t// Make sure pserv has the latest scripts.\\n\\t\\t// Get scripts on home and on server.\\n\\t\\tlet homeScripts = ns.ls(\\\"home\\\", \\\"/scripts/\\\");\\n\\t\\t\\n\\t\\t// Copy all scripts back to server.\\n\\t\\tawait ns.scp(homeScripts, p);\\n\\n\\t\\tlet i = parseInt(p.split(\\\"-\\\").pop());\\n\\t\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", p, targets[i].hostname);\\n\\t\\tif (!correctTarget) {\\n\\t\\t\\t// Kill all scripts on the server.\\n\\t\\t\\tns.killall(p);\\n\\n\\t\\t\\t// Start with the correct one!\\n\\t\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", p, 1, targets[i].hostname);\\n\\t\\t}\\n\\t}\\t\\n}\\n\\nfunction getTargets(ns) {\\n\\t// TODO: Having to cap infinite loop arbitrarily. Struggling\\n\\t// to get the scanQueue to remove a server once scanned.\\n\\n\\tlet targets = [];\\n\\tlet scanQueue = [];\\n\\tlet scanned = [];\\n\\n\\tlet levelOneTargets = ns.scan();\\n\\tlevelOneTargets.forEach( t => {\\n\\t\\tlet server = ns.getServer(t);\\n\\t\\tif (!server.purchasedByPlayer && t !== \\\"home\\\" && t !== \\\"darkweb\\\") {\\n\\t\\t\\ttargets.push(t);\\n\\t\\t\\tscanQueue.push(t);\\n\\t\\t}\\n\\t});\\n\\t\\n\\tlet i = 0\\n\\twhile (scanQueue.length > 0 && i < 30) {\\n\\t\\tlet results = [];\\n\\n\\t\\tscanQueue.forEach( t => {\\n\\t\\t\\tlet result = ns.scan(t);\\n\\t\\t\\tresult.forEach( server => {\\n\\t\\t\\t\\tresults.push(server)\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\t// Do something with results.\\n\\t\\tlet uniqueResults = [...new Set(results)];\\n\\t\\tuniqueResults.forEach( async r => {\\n\\t\\t\\tif (r in scanned === false) {\\n\\t\\t\\t\\ttargets.push(r);\\t\\n\\t\\t\\t\\tscanQueue.push(r);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\ti++;\\n\\t};\\n\\n\\tlet uniqueTargets = [...new Set(targets)];\\n\\n\\tlet targetServers = [];\\n\\tuniqueTargets.forEach( t => {\\n\\t\\ttargetServers.push(ns.getServer(t));\\n\\t});\\n\\n\\tlet hackableTargets = getHackableTargets(ns, targetServers);\\n\\tlet orderedTargets = getOrderedTargets(ns, hackableTargets);\\n\\n\\treturn orderedTargets;\\n}\\n\\nfunction getHackableTargets(ns, targets) {\\n\\t// Conditions\\n\\t//\\t- Player hacking skill must be greater than skill required.\\n\\t//\\t- Max possible money must be greater than zero.\\n\\n\\tlet hackingSkill = ns.getHackingLevel();\\n\\n\\tlet hackableTargets = targets.filter( t => {\\n\\t\\treturn hackingSkill >= t.requiredHackingSkill && ns.getServerMaxMoney(t.hostname) > 0;\\n\\t});\\n\\n\\treturn hackableTargets;\\n}\\n\\nfunction getOrderedTargets(ns, hackableTargets) {\\n\\t// Score is the maximum dollars per second.\\n\\t// This is not the same rate that will be effected in\\n\\t// practice, as this would drain the server of all money.\\n\\n\\tlet scoredTargets = [];\\n\\n\\thackableTargets.forEach( h => {\\n\\t\\tlet maxMoney = ns.getServerMaxMoney(h.hostname);\\n\\t\\tlet batchTime = ns.getWeakenTime(h.hostname) + 1000; // Weaken always takes longest.\\n\\t\\tlet score = maxMoney / batchTime;\\n\\t\\tscoredTargets.push({\\n\\t\\t\\thostname: h.hostname,\\n\\t\\t\\tscore: score\\n\\t\\t});\\n\\t});\\n\\n\\tlet orderedTargets = scoredTargets.sort( (a, b) => {\\n\\t\\treturn b.score - a.score;\\n\\t});\\n\\n\\tlet orderedTargetServers = [];\\n\\torderedTargets.forEach( o => {\\n\\t\\torderedTargetServers.push(ns.getServer(o.hostname));\\n\\t});\\n\\n\\treturn orderedTargets;\\n}\",\"filename\":\"/scripts/000-master-controller.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":12.35,\"server\":\"pserv-002\",\"moduleSequenceNumber\":327,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet server = ns.getServer();\\n\\n\\tlet maxThreads = Math.trunc(ns.getServerMaxRam(server.hostname) / 2);\\n\\tlet offset = 200;\\n\\n\\t// Prepare server.\\n\\tunlockServer(ns, target);\\n\\n\\tlet serverReady = false\\n\\twhile (!serverReady) {\\n\\t\\tstartBatch(ns, target, maxThreads, true);\\n        serverReady = getServerStatus(ns, target);\\n\\t\\tif (!serverReady) {\\n            let waitTime = ns.getWeakenTime(target);\\n\\t\\t\\tawait ns.sleep(waitTime + (5 * offset));\\n\\t\\t}\\n\\t}\\n\\n\\t// Set up and run batches.\\n\\twhile (true) {\\n        let freeRam = ns.getServerMaxRam(server.hostname) - ns.getServerUsedRam(server.hostname);\\n        if (freeRam >= 20) {\\n            startBatch(ns, target, maxThreads, false);\\n            await ns.sleep(1000);\\n        } else {\\n            await ns.sleep(2000);\\n        }\\n\\t}\\n}\\n\\nfunction getServerStatus(ns, target) {\\n    let maxMoney = ns.getServerMaxMoney(target);\\n    let currentMoney = ns.getServerMoneyAvailable(target);\\n    let moneyReady = maxMoney == currentMoney;\\n\\n    let minSecurity = ns.getServerMinSecurityLevel(target);\\n    let currentSecurity = ns.getServerSecurityLevel(target);\\n    let securityReady = minSecurity == currentSecurity;\\n\\n    if (moneyReady && securityReady) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction unlockServer(ns, target) {\\n    try {\\n        ns.brutessh(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.ftpcrack(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.relaysmtp(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.httpworm(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.sqlinject(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    ns.nuke(target);\\n}\\n\\nfunction startBatch(ns, target, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\tns.exec(\\\"scripts/110-batch.js\\\", server.hostname, 1, target, threads, preparingServer);\\n}\",\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/c8332ef0-49ed-436a-b6eb-76aa943413f5\",\"moduleSequenceNumber\":333}],\"dependents\":[],\"ramUsage\":5.75,\"server\":\"pserv-002\",\"moduleSequenceNumber\":333,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet maxThreads = ns.args[1];\\n\\tlet preparingServer = ns.args[2] | false;\\n\\n\\tlet times = getTimes(ns, target);\\n\\tlet threads = getThreads(ns, target, maxThreads);\\n\\n\\tlet validThreads = Object.keys(threads).every( n => threads[n] >= 1);\\n\\t// ns.tprint(validThreads);\\n\\tif (validThreads) {\\n\\t\\tawait runBatch(ns, target, times, threads, preparingServer);\\n\\t}\\n}\\n\\nfunction getTimes(ns, target) {\\n\\t// Get run times for server.\\n\\tlet wTime = ns.getWeakenTime(target);\\n\\tlet gTime = ns.getGrowTime(target);\\n\\tlet hTime = ns.getHackTime(target);\\n\\tlet times = {\\n\\t\\tw: wTime,\\n\\t\\tg: gTime,\\n\\t\\th: hTime,\\n\\t\\toffset: 200\\n\\t}\\n\\n\\treturn times;\\n}\\n\\nfunction getThreads(ns, target, maxThreads) {\\n\\tlet multiplier = 2\\n\\n\\t// Get ideal number of threads for preferred hack amount.\\n\\tlet maxHackAmount = ns.getServerMaxMoney(target) / multiplier;\\n\\tlet hackThreads = ns.hackAnalyzeThreads(target, maxHackAmount);\\n\\tlet hackSecurityEffect = ns.hackAnalyzeSecurity(hackThreads);\\n\\n\\t// First weaken reduces security after hack. Calculate threads needed.\\n\\tlet firstWeakenEffect = 0;\\n\\tlet firstWeakenThreads = hackThreads\\n\\twhile (firstWeakenEffect < hackSecurityEffect) {\\n\\t\\tfirstWeakenEffect = ns.weakenAnalyze(firstWeakenThreads);\\n\\t\\tfirstWeakenThreads++;\\n\\t}\\n\\n\\t// Get grow threads needed to bring back up to full.\\n\\tlet growThreads = ns.growthAnalyze(target, multiplier);\\n\\tlet growSecurityEffect = ns.growthAnalyzeSecurity(growThreads);\\n\\n\\t// Second weaken reduces security after growth. Calculate threads needed.\\n\\tlet secondWeakenEffect = 0;\\n\\tlet secondWeakenThreads = growThreads\\n\\twhile (secondWeakenEffect < growSecurityEffect) {\\n\\t\\tsecondWeakenEffect = ns.weakenAnalyze(secondWeakenThreads);\\n\\t\\tsecondWeakenThreads++;\\n\\t}\\n\\n\\t// Scale down if this would use more threads than the maximum allowed.\\n\\tlet totalThreads = hackThreads + growThreads + firstWeakenThreads + secondWeakenThreads;\\n\\tif (totalThreads > maxThreads) {\\n\\t\\tlet ratio = (maxThreads / totalThreads) * 0.8;\\n\\t\\t\\n\\t\\thackThreads = hackThreads * ratio;\\n\\t\\tgrowThreads = growThreads * ratio;\\n\\t\\tfirstWeakenThreads = firstWeakenThreads * ratio;\\n\\t\\tsecondWeakenThreads = secondWeakenThreads * ratio;\\n\\t}\\n\\n\\tif (hackThreads < 1) {\\n\\t\\thackThreads = 1;\\n\\t}\\n\\tif (growThreads < 1) {\\n\\t\\tgrowThreads = 1;\\n\\t}\\n\\tif (firstWeakenThreads < 1) {\\n\\t\\tfirstWeakenThreads = 1;\\n\\t}\\n\\tif (secondWeakenThreads < 1) {\\n\\t\\tsecondWeakenThreads = 1;\\n\\t}\\n\\n\\tlet threads = {\\n\\t\\tw1: firstWeakenThreads,\\n\\t\\tw2: secondWeakenThreads,\\n\\t\\tg: growThreads,\\n\\t\\th: hackThreads\\n\\t}\\n\\n\\treturn threads;\\n}\\n\\nasync function runBatch(ns, target, times, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\t// Finish order:\\n\\t// 1. Hack\\n\\t// 2. Weaken\\n\\t// 3. Grow\\n\\t// 4. Weaken\\n\\n\\tlet w1Sleep = times.offset;\\n\\tlet w2Sleep = 3 * times.offset;\\n\\tlet gSleep = (times.w - times.g) + (times.offset * 2) - w2Sleep;\\n\\tlet hSleep = (times.w - times.h) - (w2Sleep + gSleep);\\n\\n\\tawait ns.sleep(w1Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w1, target);\\n\\t\\n\\tawait ns.sleep(w2Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w2, target);\\n\\t\\n\\tawait ns.sleep(gSleep);\\n\\tns.exec(\\\"scripts/112-grow.js\\\", server.hostname, threads.g, target);\\n\\t\\n\\tif (!preparingServer) {\\n\\t\\tawait ns.sleep(hSleep);\\n\\t\\tns.exec(\\\"scripts/111-hack.js\\\", server.hostname, threads.h, target);\\n\\t}\\n}\",\"filename\":\"/scripts/110-batch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/c7710139-30b8-4641-b79d-314ae2e93a28\",\"moduleSequenceNumber\":334}],\"dependents\":[],\"ramUsage\":10.15,\"server\":\"pserv-002\",\"moduleSequenceNumber\":334,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.hack(target);\\t\\n}\",\"filename\":\"/scripts/111-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-002\",\"moduleSequenceNumber\":330,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"/scripts/112-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/7993fcd5-98a2-401b-9d60-0c13a8bab5f8\",\"moduleSequenceNumber\":378}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-002\",\"moduleSequenceNumber\":378,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"/scripts/113-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/57a6fe07-1256-4293-8ab2-5e759b9cff09\",\"moduleSequenceNumber\":335}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-002\",\"moduleSequenceNumber\":335,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-003\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-003\",\"httpPortOpen\":false,\"ip\":\"80.3.4.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1006.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"/scripts/100-batch-controller.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.209999999999965,\"pid\":8771,\"ramUsage\":5.75,\"server\":\"pserv-003\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/24260227-cf94-4724-a1eb-58b9ed19a12c\",\"moduleSequenceNumber\":375}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.00999999999996,\"pid\":8794,\"ramUsage\":1.75,\"server\":\"pserv-003\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/5dac9b4b-94b1-4462-9d6b-3b370bc1a93e\",\"moduleSequenceNumber\":377}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.409999999999954,\"pid\":8812,\"ramUsage\":1.75,\"server\":\"pserv-003\",\"threads\":286,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/5dac9b4b-94b1-4462-9d6b-3b370bc1a93e\",\"moduleSequenceNumber\":377}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.210000000000003,\"pid\":9119,\"ramUsage\":1.75,\"server\":\"pserv-003\",\"threads\":285,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/b0aab955-3742-4b3e-9d8c-7dedf103840b\",\"moduleSequenceNumber\":426}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet debug = ns.args[0];\\n\\n\\tif (debug) {\\n\\t\\tawait earn(ns);\\n\\t} else {\\n\\t\\twhile (true) {\\n\\t\\t\\tawait earn(ns);\\n\\t\\t\\tawait ns.sleep(60000);\\n\\t\\t}\\n\\t}\\n}\\n\\nasync function earn(ns) {\\n\\tlet pservLimit = ns.getPurchasedServerLimit();\\n\\tlet maxServerRam = ns.getPurchasedServerMaxRam();\\n\\tlet maxServerCost = ns.getPurchasedServerCost(maxServerRam);\\n\\tlet money = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet pservs = ns.getPurchasedServers();\\n\\t\\n\\t// Identify targets, in order of best to hack.\\n\\tlet targets = getTargets(ns);\\n\\n\\t// Make sure that \\\"home\\\" is hacking the one at the target\\n\\t// top of the list.\\n\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", targets[0].hostname);\\n\\tif (!correctTarget) {\\n\\t\\t// Kill all scripts except this one.\\n\\t\\tlet currentScripts = ns.ps(\\\"home\\\");\\n\\t\\tlet batchScripts = currentScripts.filter( s => {\\n\\t\\t\\treturn s.filename != ns.getScriptName();\\n\\t\\t});\\n\\t\\tbatchScripts.forEach(s => {\\n\\t\\t\\tns.kill(s.pid);\\n\\t\\t});\\n\\n\\t\\t// Start with the correct one!\\n\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", 1, targets[0].hostname);\\n\\t}\\n\\n\\t// Buy a maxed out server to hack other targets.\\n\\tif (money >= maxServerCost && pservs.length < pservLimit) {\\n\\t\\tlet i = pservs.length + 1;\\n\\t\\tlet suffix = \\\"000\\\";\\n\\n\\t\\tif (i < 10) {\\n\\t\\t\\tsuffix = \\\"00\\\" + i.toString();\\n\\t\\t} else if (i < 100) {\\n\\t\\t\\tsuffix = \\\"0\\\" + i.toString();\\n\\t\\t} else {\\n\\t\\t\\tsuffix = i.toString();\\n\\t\\t}\\n\\n\\t\\tlet hostname = \\\"pserv-\\\" + suffix;\\n\\t\\tns.purchaseServer(hostname, ns.getPurchasedServerMaxRam());\\n\\t}\\n\\n\\t// Starting hacking using purchased servers.\\n\\t// Get pservs again.\\n\\tpservs = ns.getPurchasedServers();\\n\\n\\tfor (let n in pservs) {\\n\\t\\tlet p = pservs[n]\\n\\t\\t// Make sure pserv has the latest scripts.\\n\\t\\t// Get scripts on home and on server.\\n\\t\\tlet homeScripts = ns.ls(\\\"home\\\", \\\"/scripts/\\\");\\n\\t\\t\\n\\t\\t// Copy all scripts back to server.\\n\\t\\tawait ns.scp(homeScripts, p);\\n\\n\\t\\tlet i = parseInt(p.split(\\\"-\\\").pop());\\n\\t\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", p, targets[i].hostname);\\n\\t\\tif (!correctTarget) {\\n\\t\\t\\t// Kill all scripts on the server.\\n\\t\\t\\tns.killall(p);\\n\\n\\t\\t\\t// Start with the correct one!\\n\\t\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", p, 1, targets[i].hostname);\\n\\t\\t}\\n\\t}\\t\\n}\\n\\nfunction getTargets(ns) {\\n\\t// TODO: Having to cap infinite loop arbitrarily. Struggling\\n\\t// to get the scanQueue to remove a server once scanned.\\n\\n\\tlet targets = [];\\n\\tlet scanQueue = [];\\n\\tlet scanned = [];\\n\\n\\tlet levelOneTargets = ns.scan();\\n\\tlevelOneTargets.forEach( t => {\\n\\t\\tlet server = ns.getServer(t);\\n\\t\\tif (!server.purchasedByPlayer && t !== \\\"home\\\" && t !== \\\"darkweb\\\") {\\n\\t\\t\\ttargets.push(t);\\n\\t\\t\\tscanQueue.push(t);\\n\\t\\t}\\n\\t});\\n\\t\\n\\tlet i = 0\\n\\twhile (scanQueue.length > 0 && i < 30) {\\n\\t\\tlet results = [];\\n\\n\\t\\tscanQueue.forEach( t => {\\n\\t\\t\\tlet result = ns.scan(t);\\n\\t\\t\\tresult.forEach( server => {\\n\\t\\t\\t\\tresults.push(server)\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\t// Do something with results.\\n\\t\\tlet uniqueResults = [...new Set(results)];\\n\\t\\tuniqueResults.forEach( async r => {\\n\\t\\t\\tif (r in scanned === false) {\\n\\t\\t\\t\\ttargets.push(r);\\t\\n\\t\\t\\t\\tscanQueue.push(r);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\ti++;\\n\\t};\\n\\n\\tlet uniqueTargets = [...new Set(targets)];\\n\\n\\tlet targetServers = [];\\n\\tuniqueTargets.forEach( t => {\\n\\t\\ttargetServers.push(ns.getServer(t));\\n\\t});\\n\\n\\tlet hackableTargets = getHackableTargets(ns, targetServers);\\n\\tlet orderedTargets = getOrderedTargets(ns, hackableTargets);\\n\\n\\treturn orderedTargets;\\n}\\n\\nfunction getHackableTargets(ns, targets) {\\n\\t// Conditions\\n\\t//\\t- Player hacking skill must be greater than skill required.\\n\\t//\\t- Max possible money must be greater than zero.\\n\\n\\tlet hackingSkill = ns.getHackingLevel();\\n\\n\\tlet hackableTargets = targets.filter( t => {\\n\\t\\treturn hackingSkill >= t.requiredHackingSkill && ns.getServerMaxMoney(t.hostname) > 0;\\n\\t});\\n\\n\\treturn hackableTargets;\\n}\\n\\nfunction getOrderedTargets(ns, hackableTargets) {\\n\\t// Score is the maximum dollars per second.\\n\\t// This is not the same rate that will be effected in\\n\\t// practice, as this would drain the server of all money.\\n\\n\\tlet scoredTargets = [];\\n\\n\\thackableTargets.forEach( h => {\\n\\t\\tlet maxMoney = ns.getServerMaxMoney(h.hostname);\\n\\t\\tlet batchTime = ns.getWeakenTime(h.hostname) + 1000; // Weaken always takes longest.\\n\\t\\tlet score = maxMoney / batchTime;\\n\\t\\tscoredTargets.push({\\n\\t\\t\\thostname: h.hostname,\\n\\t\\t\\tscore: score\\n\\t\\t});\\n\\t});\\n\\n\\tlet orderedTargets = scoredTargets.sort( (a, b) => {\\n\\t\\treturn b.score - a.score;\\n\\t});\\n\\n\\tlet orderedTargetServers = [];\\n\\torderedTargets.forEach( o => {\\n\\t\\torderedTargetServers.push(ns.getServer(o.hostname));\\n\\t});\\n\\n\\treturn orderedTargets;\\n}\",\"filename\":\"/scripts/000-master-controller.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":12.35,\"server\":\"pserv-003\",\"moduleSequenceNumber\":369,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet server = ns.getServer();\\n\\n\\tlet maxThreads = Math.trunc(ns.getServerMaxRam(server.hostname) / 2);\\n\\tlet offset = 200;\\n\\n\\t// Prepare server.\\n\\tunlockServer(ns, target);\\n\\n\\tlet serverReady = false\\n\\twhile (!serverReady) {\\n\\t\\tstartBatch(ns, target, maxThreads, true);\\n        serverReady = getServerStatus(ns, target);\\n\\t\\tif (!serverReady) {\\n            let waitTime = ns.getWeakenTime(target);\\n\\t\\t\\tawait ns.sleep(waitTime + (5 * offset));\\n\\t\\t}\\n\\t}\\n\\n\\t// Set up and run batches.\\n\\twhile (true) {\\n        let freeRam = ns.getServerMaxRam(server.hostname) - ns.getServerUsedRam(server.hostname);\\n        if (freeRam >= 20) {\\n            startBatch(ns, target, maxThreads, false);\\n            await ns.sleep(1000);\\n        } else {\\n            await ns.sleep(2000);\\n        }\\n\\t}\\n}\\n\\nfunction getServerStatus(ns, target) {\\n    let maxMoney = ns.getServerMaxMoney(target);\\n    let currentMoney = ns.getServerMoneyAvailable(target);\\n    let moneyReady = maxMoney == currentMoney;\\n\\n    let minSecurity = ns.getServerMinSecurityLevel(target);\\n    let currentSecurity = ns.getServerSecurityLevel(target);\\n    let securityReady = minSecurity == currentSecurity;\\n\\n    if (moneyReady && securityReady) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction unlockServer(ns, target) {\\n    try {\\n        ns.brutessh(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.ftpcrack(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.relaysmtp(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.httpworm(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.sqlinject(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    ns.nuke(target);\\n}\\n\\nfunction startBatch(ns, target, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\tns.exec(\\\"scripts/110-batch.js\\\", server.hostname, 1, target, threads, preparingServer);\\n}\",\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/24260227-cf94-4724-a1eb-58b9ed19a12c\",\"moduleSequenceNumber\":375}],\"dependents\":[],\"ramUsage\":5.75,\"server\":\"pserv-003\",\"moduleSequenceNumber\":375,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet maxThreads = ns.args[1];\\n\\tlet preparingServer = ns.args[2] | false;\\n\\n\\tlet times = getTimes(ns, target);\\n\\tlet threads = getThreads(ns, target, maxThreads);\\n\\n\\tlet validThreads = Object.keys(threads).every( n => threads[n] >= 1);\\n\\t// ns.tprint(validThreads);\\n\\tif (validThreads) {\\n\\t\\tawait runBatch(ns, target, times, threads, preparingServer);\\n\\t}\\n}\\n\\nfunction getTimes(ns, target) {\\n\\t// Get run times for server.\\n\\tlet wTime = ns.getWeakenTime(target);\\n\\tlet gTime = ns.getGrowTime(target);\\n\\tlet hTime = ns.getHackTime(target);\\n\\tlet times = {\\n\\t\\tw: wTime,\\n\\t\\tg: gTime,\\n\\t\\th: hTime,\\n\\t\\toffset: 200\\n\\t}\\n\\n\\treturn times;\\n}\\n\\nfunction getThreads(ns, target, maxThreads) {\\n\\tlet multiplier = 2\\n\\n\\t// Get ideal number of threads for preferred hack amount.\\n\\tlet maxHackAmount = ns.getServerMaxMoney(target) / multiplier;\\n\\tlet hackThreads = ns.hackAnalyzeThreads(target, maxHackAmount);\\n\\tlet hackSecurityEffect = ns.hackAnalyzeSecurity(hackThreads);\\n\\n\\t// First weaken reduces security after hack. Calculate threads needed.\\n\\tlet firstWeakenEffect = 0;\\n\\tlet firstWeakenThreads = hackThreads\\n\\twhile (firstWeakenEffect < hackSecurityEffect) {\\n\\t\\tfirstWeakenEffect = ns.weakenAnalyze(firstWeakenThreads);\\n\\t\\tfirstWeakenThreads++;\\n\\t}\\n\\n\\t// Get grow threads needed to bring back up to full.\\n\\tlet growThreads = ns.growthAnalyze(target, multiplier);\\n\\tlet growSecurityEffect = ns.growthAnalyzeSecurity(growThreads);\\n\\n\\t// Second weaken reduces security after growth. Calculate threads needed.\\n\\tlet secondWeakenEffect = 0;\\n\\tlet secondWeakenThreads = growThreads\\n\\twhile (secondWeakenEffect < growSecurityEffect) {\\n\\t\\tsecondWeakenEffect = ns.weakenAnalyze(secondWeakenThreads);\\n\\t\\tsecondWeakenThreads++;\\n\\t}\\n\\n\\t// Scale down if this would use more threads than the maximum allowed.\\n\\tlet totalThreads = hackThreads + growThreads + firstWeakenThreads + secondWeakenThreads;\\n\\tif (totalThreads > maxThreads) {\\n\\t\\tlet ratio = (maxThreads / totalThreads) * 0.8;\\n\\t\\t\\n\\t\\thackThreads = hackThreads * ratio;\\n\\t\\tgrowThreads = growThreads * ratio;\\n\\t\\tfirstWeakenThreads = firstWeakenThreads * ratio;\\n\\t\\tsecondWeakenThreads = secondWeakenThreads * ratio;\\n\\t}\\n\\n\\tif (hackThreads < 1) {\\n\\t\\thackThreads = 1;\\n\\t}\\n\\tif (growThreads < 1) {\\n\\t\\tgrowThreads = 1;\\n\\t}\\n\\tif (firstWeakenThreads < 1) {\\n\\t\\tfirstWeakenThreads = 1;\\n\\t}\\n\\tif (secondWeakenThreads < 1) {\\n\\t\\tsecondWeakenThreads = 1;\\n\\t}\\n\\n\\tlet threads = {\\n\\t\\tw1: firstWeakenThreads,\\n\\t\\tw2: secondWeakenThreads,\\n\\t\\tg: growThreads,\\n\\t\\th: hackThreads\\n\\t}\\n\\n\\treturn threads;\\n}\\n\\nasync function runBatch(ns, target, times, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\t// Finish order:\\n\\t// 1. Hack\\n\\t// 2. Weaken\\n\\t// 3. Grow\\n\\t// 4. Weaken\\n\\n\\tlet w1Sleep = times.offset;\\n\\tlet w2Sleep = 3 * times.offset;\\n\\tlet gSleep = (times.w - times.g) + (times.offset * 2) - w2Sleep;\\n\\tlet hSleep = (times.w - times.h) - (w2Sleep + gSleep);\\n\\n\\tawait ns.sleep(w1Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w1, target);\\n\\t\\n\\tawait ns.sleep(w2Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w2, target);\\n\\t\\n\\tawait ns.sleep(gSleep);\\n\\tns.exec(\\\"scripts/112-grow.js\\\", server.hostname, threads.g, target);\\n\\t\\n\\tif (!preparingServer) {\\n\\t\\tawait ns.sleep(hSleep);\\n\\t\\tns.exec(\\\"scripts/111-hack.js\\\", server.hostname, threads.h, target);\\n\\t}\\n}\",\"filename\":\"/scripts/110-batch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/35bdd45f-c622-4ce3-9a28-c6ea1bdd0954\",\"moduleSequenceNumber\":376}],\"dependents\":[],\"ramUsage\":10.15,\"server\":\"pserv-003\",\"moduleSequenceNumber\":376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.hack(target);\\t\\n}\",\"filename\":\"/scripts/111-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-003\",\"moduleSequenceNumber\":372,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"/scripts/112-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/b0aab955-3742-4b3e-9d8c-7dedf103840b\",\"moduleSequenceNumber\":426}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-003\",\"moduleSequenceNumber\":426,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"/scripts/113-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/5dac9b4b-94b1-4462-9d6b-3b370bc1a93e\",\"moduleSequenceNumber\":377}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-003\",\"moduleSequenceNumber\":377,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-004\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-004\",\"httpPortOpen\":false,\"ip\":\"26.3.6.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":864.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{},\"filename\":\"/scripts/100-batch-controller.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.209999999999965,\"pid\":8773,\"ramUsage\":5.75,\"server\":\"pserv-004\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/621ad742-5550-40ee-9e09-7063a703fa3a\",\"moduleSequenceNumber\":424}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",524288,true],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.209999999999965,\"pid\":8774,\"ramUsage\":10.15,\"server\":\"pserv-004\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/47ac9dbc-c051-4953-8b25-efb8d7cf9510\",\"moduleSequenceNumber\":425}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.00999999999996,\"pid\":8795,\"ramUsage\":1.75,\"server\":\"pserv-004\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/aafbd328-8691-4bd0-b163-302506f47842\",\"moduleSequenceNumber\":427}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.409999999999954,\"pid\":8813,\"ramUsage\":1.75,\"server\":\"pserv-004\",\"threads\":484,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/aafbd328-8691-4bd0-b163-302506f47842\",\"moduleSequenceNumber\":427}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet debug = ns.args[0];\\n\\n\\tif (debug) {\\n\\t\\tawait earn(ns);\\n\\t} else {\\n\\t\\twhile (true) {\\n\\t\\t\\tawait earn(ns);\\n\\t\\t\\tawait ns.sleep(60000);\\n\\t\\t}\\n\\t}\\n}\\n\\nasync function earn(ns) {\\n\\tlet pservLimit = ns.getPurchasedServerLimit();\\n\\tlet maxServerRam = ns.getPurchasedServerMaxRam();\\n\\tlet maxServerCost = ns.getPurchasedServerCost(maxServerRam);\\n\\tlet money = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet pservs = ns.getPurchasedServers();\\n\\t\\n\\t// Identify targets, in order of best to hack.\\n\\tlet targets = getTargets(ns);\\n\\n\\t// Make sure that \\\"home\\\" is hacking the one at the target\\n\\t// top of the list.\\n\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", targets[0].hostname);\\n\\tif (!correctTarget) {\\n\\t\\t// Kill all scripts except this one.\\n\\t\\tlet currentScripts = ns.ps(\\\"home\\\");\\n\\t\\tlet batchScripts = currentScripts.filter( s => {\\n\\t\\t\\treturn s.filename != ns.getScriptName();\\n\\t\\t});\\n\\t\\tbatchScripts.forEach(s => {\\n\\t\\t\\tns.kill(s.pid);\\n\\t\\t});\\n\\n\\t\\t// Start with the correct one!\\n\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", 1, targets[0].hostname);\\n\\t}\\n\\n\\t// Buy a maxed out server to hack other targets.\\n\\tif (money >= maxServerCost && pservs.length < pservLimit) {\\n\\t\\tlet i = pservs.length + 1;\\n\\t\\tlet suffix = \\\"000\\\";\\n\\n\\t\\tif (i < 10) {\\n\\t\\t\\tsuffix = \\\"00\\\" + i.toString();\\n\\t\\t} else if (i < 100) {\\n\\t\\t\\tsuffix = \\\"0\\\" + i.toString();\\n\\t\\t} else {\\n\\t\\t\\tsuffix = i.toString();\\n\\t\\t}\\n\\n\\t\\tlet hostname = \\\"pserv-\\\" + suffix;\\n\\t\\tns.purchaseServer(hostname, ns.getPurchasedServerMaxRam());\\n\\t}\\n\\n\\t// Starting hacking using purchased servers.\\n\\t// Get pservs again.\\n\\tpservs = ns.getPurchasedServers();\\n\\n\\tfor (let n in pservs) {\\n\\t\\tlet p = pservs[n]\\n\\t\\t// Make sure pserv has the latest scripts.\\n\\t\\t// Get scripts on home and on server.\\n\\t\\tlet homeScripts = ns.ls(\\\"home\\\", \\\"/scripts/\\\");\\n\\t\\t\\n\\t\\t// Copy all scripts back to server.\\n\\t\\tawait ns.scp(homeScripts, p);\\n\\n\\t\\tlet i = parseInt(p.split(\\\"-\\\").pop());\\n\\t\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", p, targets[i].hostname);\\n\\t\\tif (!correctTarget) {\\n\\t\\t\\t// Kill all scripts on the server.\\n\\t\\t\\tns.killall(p);\\n\\n\\t\\t\\t// Start with the correct one!\\n\\t\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", p, 1, targets[i].hostname);\\n\\t\\t}\\n\\t}\\t\\n}\\n\\nfunction getTargets(ns) {\\n\\t// TODO: Having to cap infinite loop arbitrarily. Struggling\\n\\t// to get the scanQueue to remove a server once scanned.\\n\\n\\tlet targets = [];\\n\\tlet scanQueue = [];\\n\\tlet scanned = [];\\n\\n\\tlet levelOneTargets = ns.scan();\\n\\tlevelOneTargets.forEach( t => {\\n\\t\\tlet server = ns.getServer(t);\\n\\t\\tif (!server.purchasedByPlayer && t !== \\\"home\\\" && t !== \\\"darkweb\\\") {\\n\\t\\t\\ttargets.push(t);\\n\\t\\t\\tscanQueue.push(t);\\n\\t\\t}\\n\\t});\\n\\t\\n\\tlet i = 0\\n\\twhile (scanQueue.length > 0 && i < 30) {\\n\\t\\tlet results = [];\\n\\n\\t\\tscanQueue.forEach( t => {\\n\\t\\t\\tlet result = ns.scan(t);\\n\\t\\t\\tresult.forEach( server => {\\n\\t\\t\\t\\tresults.push(server)\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\t// Do something with results.\\n\\t\\tlet uniqueResults = [...new Set(results)];\\n\\t\\tuniqueResults.forEach( async r => {\\n\\t\\t\\tif (r in scanned === false) {\\n\\t\\t\\t\\ttargets.push(r);\\t\\n\\t\\t\\t\\tscanQueue.push(r);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\ti++;\\n\\t};\\n\\n\\tlet uniqueTargets = [...new Set(targets)];\\n\\n\\tlet targetServers = [];\\n\\tuniqueTargets.forEach( t => {\\n\\t\\ttargetServers.push(ns.getServer(t));\\n\\t});\\n\\n\\tlet hackableTargets = getHackableTargets(ns, targetServers);\\n\\tlet orderedTargets = getOrderedTargets(ns, hackableTargets);\\n\\n\\treturn orderedTargets;\\n}\\n\\nfunction getHackableTargets(ns, targets) {\\n\\t// Conditions\\n\\t//\\t- Player hacking skill must be greater than skill required.\\n\\t//\\t- Max possible money must be greater than zero.\\n\\n\\tlet hackingSkill = ns.getHackingLevel();\\n\\n\\tlet hackableTargets = targets.filter( t => {\\n\\t\\treturn hackingSkill >= t.requiredHackingSkill && ns.getServerMaxMoney(t.hostname) > 0;\\n\\t});\\n\\n\\treturn hackableTargets;\\n}\\n\\nfunction getOrderedTargets(ns, hackableTargets) {\\n\\t// Score is the maximum dollars per second.\\n\\t// This is not the same rate that will be effected in\\n\\t// practice, as this would drain the server of all money.\\n\\n\\tlet scoredTargets = [];\\n\\n\\thackableTargets.forEach( h => {\\n\\t\\tlet maxMoney = ns.getServerMaxMoney(h.hostname);\\n\\t\\tlet batchTime = ns.getWeakenTime(h.hostname) + 1000; // Weaken always takes longest.\\n\\t\\tlet score = maxMoney / batchTime;\\n\\t\\tscoredTargets.push({\\n\\t\\t\\thostname: h.hostname,\\n\\t\\t\\tscore: score\\n\\t\\t});\\n\\t});\\n\\n\\tlet orderedTargets = scoredTargets.sort( (a, b) => {\\n\\t\\treturn b.score - a.score;\\n\\t});\\n\\n\\tlet orderedTargetServers = [];\\n\\torderedTargets.forEach( o => {\\n\\t\\torderedTargetServers.push(ns.getServer(o.hostname));\\n\\t});\\n\\n\\treturn orderedTargets;\\n}\",\"filename\":\"/scripts/000-master-controller.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":12.35,\"server\":\"pserv-004\",\"moduleSequenceNumber\":418,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet server = ns.getServer();\\n\\n\\tlet maxThreads = Math.trunc(ns.getServerMaxRam(server.hostname) / 2);\\n\\tlet offset = 200;\\n\\n\\t// Prepare server.\\n\\tunlockServer(ns, target);\\n\\n\\tlet serverReady = false\\n\\twhile (!serverReady) {\\n\\t\\tstartBatch(ns, target, maxThreads, true);\\n        serverReady = getServerStatus(ns, target);\\n\\t\\tif (!serverReady) {\\n            let waitTime = ns.getWeakenTime(target);\\n\\t\\t\\tawait ns.sleep(waitTime + (5 * offset));\\n\\t\\t}\\n\\t}\\n\\n\\t// Set up and run batches.\\n\\twhile (true) {\\n        let freeRam = ns.getServerMaxRam(server.hostname) - ns.getServerUsedRam(server.hostname);\\n        if (freeRam >= 20) {\\n            startBatch(ns, target, maxThreads, false);\\n            await ns.sleep(1000);\\n        } else {\\n            await ns.sleep(2000);\\n        }\\n\\t}\\n}\\n\\nfunction getServerStatus(ns, target) {\\n    let maxMoney = ns.getServerMaxMoney(target);\\n    let currentMoney = ns.getServerMoneyAvailable(target);\\n    let moneyReady = maxMoney == currentMoney;\\n\\n    let minSecurity = ns.getServerMinSecurityLevel(target);\\n    let currentSecurity = ns.getServerSecurityLevel(target);\\n    let securityReady = minSecurity == currentSecurity;\\n\\n    if (moneyReady && securityReady) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction unlockServer(ns, target) {\\n    try {\\n        ns.brutessh(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.ftpcrack(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.relaysmtp(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.httpworm(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.sqlinject(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    ns.nuke(target);\\n}\\n\\nfunction startBatch(ns, target, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\tns.exec(\\\"scripts/110-batch.js\\\", server.hostname, 1, target, threads, preparingServer);\\n}\",\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/621ad742-5550-40ee-9e09-7063a703fa3a\",\"moduleSequenceNumber\":424}],\"dependents\":[],\"ramUsage\":5.75,\"server\":\"pserv-004\",\"moduleSequenceNumber\":424,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet maxThreads = ns.args[1];\\n\\tlet preparingServer = ns.args[2] | false;\\n\\n\\tlet times = getTimes(ns, target);\\n\\tlet threads = getThreads(ns, target, maxThreads);\\n\\n\\tlet validThreads = Object.keys(threads).every( n => threads[n] >= 1);\\n\\t// ns.tprint(validThreads);\\n\\tif (validThreads) {\\n\\t\\tawait runBatch(ns, target, times, threads, preparingServer);\\n\\t}\\n}\\n\\nfunction getTimes(ns, target) {\\n\\t// Get run times for server.\\n\\tlet wTime = ns.getWeakenTime(target);\\n\\tlet gTime = ns.getGrowTime(target);\\n\\tlet hTime = ns.getHackTime(target);\\n\\tlet times = {\\n\\t\\tw: wTime,\\n\\t\\tg: gTime,\\n\\t\\th: hTime,\\n\\t\\toffset: 200\\n\\t}\\n\\n\\treturn times;\\n}\\n\\nfunction getThreads(ns, target, maxThreads) {\\n\\tlet multiplier = 2\\n\\n\\t// Get ideal number of threads for preferred hack amount.\\n\\tlet maxHackAmount = ns.getServerMaxMoney(target) / multiplier;\\n\\tlet hackThreads = ns.hackAnalyzeThreads(target, maxHackAmount);\\n\\tlet hackSecurityEffect = ns.hackAnalyzeSecurity(hackThreads);\\n\\n\\t// First weaken reduces security after hack. Calculate threads needed.\\n\\tlet firstWeakenEffect = 0;\\n\\tlet firstWeakenThreads = hackThreads\\n\\twhile (firstWeakenEffect < hackSecurityEffect) {\\n\\t\\tfirstWeakenEffect = ns.weakenAnalyze(firstWeakenThreads);\\n\\t\\tfirstWeakenThreads++;\\n\\t}\\n\\n\\t// Get grow threads needed to bring back up to full.\\n\\tlet growThreads = ns.growthAnalyze(target, multiplier);\\n\\tlet growSecurityEffect = ns.growthAnalyzeSecurity(growThreads);\\n\\n\\t// Second weaken reduces security after growth. Calculate threads needed.\\n\\tlet secondWeakenEffect = 0;\\n\\tlet secondWeakenThreads = growThreads\\n\\twhile (secondWeakenEffect < growSecurityEffect) {\\n\\t\\tsecondWeakenEffect = ns.weakenAnalyze(secondWeakenThreads);\\n\\t\\tsecondWeakenThreads++;\\n\\t}\\n\\n\\t// Scale down if this would use more threads than the maximum allowed.\\n\\tlet totalThreads = hackThreads + growThreads + firstWeakenThreads + secondWeakenThreads;\\n\\tif (totalThreads > maxThreads) {\\n\\t\\tlet ratio = (maxThreads / totalThreads) * 0.8;\\n\\t\\t\\n\\t\\thackThreads = hackThreads * ratio;\\n\\t\\tgrowThreads = growThreads * ratio;\\n\\t\\tfirstWeakenThreads = firstWeakenThreads * ratio;\\n\\t\\tsecondWeakenThreads = secondWeakenThreads * ratio;\\n\\t}\\n\\n\\tif (hackThreads < 1) {\\n\\t\\thackThreads = 1;\\n\\t}\\n\\tif (growThreads < 1) {\\n\\t\\tgrowThreads = 1;\\n\\t}\\n\\tif (firstWeakenThreads < 1) {\\n\\t\\tfirstWeakenThreads = 1;\\n\\t}\\n\\tif (secondWeakenThreads < 1) {\\n\\t\\tsecondWeakenThreads = 1;\\n\\t}\\n\\n\\tlet threads = {\\n\\t\\tw1: firstWeakenThreads,\\n\\t\\tw2: secondWeakenThreads,\\n\\t\\tg: growThreads,\\n\\t\\th: hackThreads\\n\\t}\\n\\n\\treturn threads;\\n}\\n\\nasync function runBatch(ns, target, times, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\t// Finish order:\\n\\t// 1. Hack\\n\\t// 2. Weaken\\n\\t// 3. Grow\\n\\t// 4. Weaken\\n\\n\\tlet w1Sleep = times.offset;\\n\\tlet w2Sleep = 3 * times.offset;\\n\\tlet gSleep = (times.w - times.g) + (times.offset * 2) - w2Sleep;\\n\\tlet hSleep = (times.w - times.h) - (w2Sleep + gSleep);\\n\\n\\tawait ns.sleep(w1Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w1, target);\\n\\t\\n\\tawait ns.sleep(w2Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w2, target);\\n\\t\\n\\tawait ns.sleep(gSleep);\\n\\tns.exec(\\\"scripts/112-grow.js\\\", server.hostname, threads.g, target);\\n\\t\\n\\tif (!preparingServer) {\\n\\t\\tawait ns.sleep(hSleep);\\n\\t\\tns.exec(\\\"scripts/111-hack.js\\\", server.hostname, threads.h, target);\\n\\t}\\n}\",\"filename\":\"/scripts/110-batch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/47ac9dbc-c051-4953-8b25-efb8d7cf9510\",\"moduleSequenceNumber\":425}],\"dependents\":[],\"ramUsage\":10.15,\"server\":\"pserv-004\",\"moduleSequenceNumber\":425,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.hack(target);\\t\\n}\",\"filename\":\"/scripts/111-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-004\",\"moduleSequenceNumber\":421,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"/scripts/112-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/2cd59f48-d565-4f37-99b3-fac5596d41fa\",\"moduleSequenceNumber\":542}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-004\",\"moduleSequenceNumber\":542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"/scripts/113-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/aafbd328-8691-4bd0-b163-302506f47842\",\"moduleSequenceNumber\":427}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-004\",\"moduleSequenceNumber\":427,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-005\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-005\",\"httpPortOpen\":false,\"ip\":\"31.9.6.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":987.15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"/scripts/100-batch-controller.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.209999999999965,\"pid\":8775,\"ramUsage\":5.75,\"server\":\"pserv-005\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/5d14ab76-321e-446b-aa1f-1d69f8423f20\",\"moduleSequenceNumber\":479}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",524288,true],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.209999999999965,\"pid\":8776,\"ramUsage\":10.15,\"server\":\"pserv-005\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/7bffeb92-ff59-4ab9-9b12-0c397037dc82\",\"moduleSequenceNumber\":480}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.00999999999996,\"pid\":8796,\"ramUsage\":1.75,\"server\":\"pserv-005\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/b0aa1a8c-f1be-4900-8868-c5bf847fcd08\",\"moduleSequenceNumber\":481}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.409999999999954,\"pid\":8814,\"ramUsage\":1.75,\"server\":\"pserv-005\",\"threads\":554,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/b0aa1a8c-f1be-4900-8868-c5bf847fcd08\",\"moduleSequenceNumber\":481}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet debug = ns.args[0];\\n\\n\\tif (debug) {\\n\\t\\tawait earn(ns);\\n\\t} else {\\n\\t\\twhile (true) {\\n\\t\\t\\tawait earn(ns);\\n\\t\\t\\tawait ns.sleep(60000);\\n\\t\\t}\\n\\t}\\n}\\n\\nasync function earn(ns) {\\n\\tlet pservLimit = ns.getPurchasedServerLimit();\\n\\tlet maxServerRam = ns.getPurchasedServerMaxRam();\\n\\tlet maxServerCost = ns.getPurchasedServerCost(maxServerRam);\\n\\tlet money = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet pservs = ns.getPurchasedServers();\\n\\t\\n\\t// Identify targets, in order of best to hack.\\n\\tlet targets = getTargets(ns);\\n\\n\\t// Make sure that \\\"home\\\" is hacking the one at the target\\n\\t// top of the list.\\n\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", targets[0].hostname);\\n\\tif (!correctTarget) {\\n\\t\\t// Kill all scripts except this one.\\n\\t\\tlet currentScripts = ns.ps(\\\"home\\\");\\n\\t\\tlet batchScripts = currentScripts.filter( s => {\\n\\t\\t\\treturn s.filename != ns.getScriptName();\\n\\t\\t});\\n\\t\\tbatchScripts.forEach(s => {\\n\\t\\t\\tns.kill(s.pid);\\n\\t\\t});\\n\\n\\t\\t// Start with the correct one!\\n\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", 1, targets[0].hostname);\\n\\t}\\n\\n\\t// Buy a maxed out server to hack other targets.\\n\\tif (money >= maxServerCost && pservs.length < pservLimit) {\\n\\t\\tlet i = pservs.length + 1;\\n\\t\\tlet suffix = \\\"000\\\";\\n\\n\\t\\tif (i < 10) {\\n\\t\\t\\tsuffix = \\\"00\\\" + i.toString();\\n\\t\\t} else if (i < 100) {\\n\\t\\t\\tsuffix = \\\"0\\\" + i.toString();\\n\\t\\t} else {\\n\\t\\t\\tsuffix = i.toString();\\n\\t\\t}\\n\\n\\t\\tlet hostname = \\\"pserv-\\\" + suffix;\\n\\t\\tns.purchaseServer(hostname, ns.getPurchasedServerMaxRam());\\n\\t}\\n\\n\\t// Starting hacking using purchased servers.\\n\\t// Get pservs again.\\n\\tpservs = ns.getPurchasedServers();\\n\\n\\tfor (let n in pservs) {\\n\\t\\tlet p = pservs[n]\\n\\t\\t// Make sure pserv has the latest scripts.\\n\\t\\t// Get scripts on home and on server.\\n\\t\\tlet homeScripts = ns.ls(\\\"home\\\", \\\"/scripts/\\\");\\n\\t\\t\\n\\t\\t// Copy all scripts back to server.\\n\\t\\tawait ns.scp(homeScripts, p);\\n\\n\\t\\tlet i = parseInt(p.split(\\\"-\\\").pop());\\n\\t\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", p, targets[i].hostname);\\n\\t\\tif (!correctTarget) {\\n\\t\\t\\t// Kill all scripts on the server.\\n\\t\\t\\tns.killall(p);\\n\\n\\t\\t\\t// Start with the correct one!\\n\\t\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", p, 1, targets[i].hostname);\\n\\t\\t}\\n\\t}\\t\\n}\\n\\nfunction getTargets(ns) {\\n\\t// TODO: Having to cap infinite loop arbitrarily. Struggling\\n\\t// to get the scanQueue to remove a server once scanned.\\n\\n\\tlet targets = [];\\n\\tlet scanQueue = [];\\n\\tlet scanned = [];\\n\\n\\tlet levelOneTargets = ns.scan();\\n\\tlevelOneTargets.forEach( t => {\\n\\t\\tlet server = ns.getServer(t);\\n\\t\\tif (!server.purchasedByPlayer && t !== \\\"home\\\" && t !== \\\"darkweb\\\") {\\n\\t\\t\\ttargets.push(t);\\n\\t\\t\\tscanQueue.push(t);\\n\\t\\t}\\n\\t});\\n\\t\\n\\tlet i = 0\\n\\twhile (scanQueue.length > 0 && i < 30) {\\n\\t\\tlet results = [];\\n\\n\\t\\tscanQueue.forEach( t => {\\n\\t\\t\\tlet result = ns.scan(t);\\n\\t\\t\\tresult.forEach( server => {\\n\\t\\t\\t\\tresults.push(server)\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\t// Do something with results.\\n\\t\\tlet uniqueResults = [...new Set(results)];\\n\\t\\tuniqueResults.forEach( async r => {\\n\\t\\t\\tif (r in scanned === false) {\\n\\t\\t\\t\\ttargets.push(r);\\t\\n\\t\\t\\t\\tscanQueue.push(r);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\ti++;\\n\\t};\\n\\n\\tlet uniqueTargets = [...new Set(targets)];\\n\\n\\tlet targetServers = [];\\n\\tuniqueTargets.forEach( t => {\\n\\t\\ttargetServers.push(ns.getServer(t));\\n\\t});\\n\\n\\tlet hackableTargets = getHackableTargets(ns, targetServers);\\n\\tlet orderedTargets = getOrderedTargets(ns, hackableTargets);\\n\\n\\treturn orderedTargets;\\n}\\n\\nfunction getHackableTargets(ns, targets) {\\n\\t// Conditions\\n\\t//\\t- Player hacking skill must be greater than skill required.\\n\\t//\\t- Max possible money must be greater than zero.\\n\\n\\tlet hackingSkill = ns.getHackingLevel();\\n\\n\\tlet hackableTargets = targets.filter( t => {\\n\\t\\treturn hackingSkill >= t.requiredHackingSkill && ns.getServerMaxMoney(t.hostname) > 0;\\n\\t});\\n\\n\\treturn hackableTargets;\\n}\\n\\nfunction getOrderedTargets(ns, hackableTargets) {\\n\\t// Score is the maximum dollars per second.\\n\\t// This is not the same rate that will be effected in\\n\\t// practice, as this would drain the server of all money.\\n\\n\\tlet scoredTargets = [];\\n\\n\\thackableTargets.forEach( h => {\\n\\t\\tlet maxMoney = ns.getServerMaxMoney(h.hostname);\\n\\t\\tlet batchTime = ns.getWeakenTime(h.hostname) + 1000; // Weaken always takes longest.\\n\\t\\tlet score = maxMoney / batchTime;\\n\\t\\tscoredTargets.push({\\n\\t\\t\\thostname: h.hostname,\\n\\t\\t\\tscore: score\\n\\t\\t});\\n\\t});\\n\\n\\tlet orderedTargets = scoredTargets.sort( (a, b) => {\\n\\t\\treturn b.score - a.score;\\n\\t});\\n\\n\\tlet orderedTargetServers = [];\\n\\torderedTargets.forEach( o => {\\n\\t\\torderedTargetServers.push(ns.getServer(o.hostname));\\n\\t});\\n\\n\\treturn orderedTargets;\\n}\",\"filename\":\"/scripts/000-master-controller.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":12.35,\"server\":\"pserv-005\",\"moduleSequenceNumber\":473,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet server = ns.getServer();\\n\\n\\tlet maxThreads = Math.trunc(ns.getServerMaxRam(server.hostname) / 2);\\n\\tlet offset = 200;\\n\\n\\t// Prepare server.\\n\\tunlockServer(ns, target);\\n\\n\\tlet serverReady = false\\n\\twhile (!serverReady) {\\n\\t\\tstartBatch(ns, target, maxThreads, true);\\n        serverReady = getServerStatus(ns, target);\\n\\t\\tif (!serverReady) {\\n            let waitTime = ns.getWeakenTime(target);\\n\\t\\t\\tawait ns.sleep(waitTime + (5 * offset));\\n\\t\\t}\\n\\t}\\n\\n\\t// Set up and run batches.\\n\\twhile (true) {\\n        let freeRam = ns.getServerMaxRam(server.hostname) - ns.getServerUsedRam(server.hostname);\\n        if (freeRam >= 20) {\\n            startBatch(ns, target, maxThreads, false);\\n            await ns.sleep(1000);\\n        } else {\\n            await ns.sleep(2000);\\n        }\\n\\t}\\n}\\n\\nfunction getServerStatus(ns, target) {\\n    let maxMoney = ns.getServerMaxMoney(target);\\n    let currentMoney = ns.getServerMoneyAvailable(target);\\n    let moneyReady = maxMoney == currentMoney;\\n\\n    let minSecurity = ns.getServerMinSecurityLevel(target);\\n    let currentSecurity = ns.getServerSecurityLevel(target);\\n    let securityReady = minSecurity == currentSecurity;\\n\\n    if (moneyReady && securityReady) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction unlockServer(ns, target) {\\n    try {\\n        ns.brutessh(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.ftpcrack(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.relaysmtp(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.httpworm(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.sqlinject(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    ns.nuke(target);\\n}\\n\\nfunction startBatch(ns, target, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\tns.exec(\\\"scripts/110-batch.js\\\", server.hostname, 1, target, threads, preparingServer);\\n}\",\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/5d14ab76-321e-446b-aa1f-1d69f8423f20\",\"moduleSequenceNumber\":479}],\"dependents\":[],\"ramUsage\":5.75,\"server\":\"pserv-005\",\"moduleSequenceNumber\":479,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet maxThreads = ns.args[1];\\n\\tlet preparingServer = ns.args[2] | false;\\n\\n\\tlet times = getTimes(ns, target);\\n\\tlet threads = getThreads(ns, target, maxThreads);\\n\\n\\tlet validThreads = Object.keys(threads).every( n => threads[n] >= 1);\\n\\t// ns.tprint(validThreads);\\n\\tif (validThreads) {\\n\\t\\tawait runBatch(ns, target, times, threads, preparingServer);\\n\\t}\\n}\\n\\nfunction getTimes(ns, target) {\\n\\t// Get run times for server.\\n\\tlet wTime = ns.getWeakenTime(target);\\n\\tlet gTime = ns.getGrowTime(target);\\n\\tlet hTime = ns.getHackTime(target);\\n\\tlet times = {\\n\\t\\tw: wTime,\\n\\t\\tg: gTime,\\n\\t\\th: hTime,\\n\\t\\toffset: 200\\n\\t}\\n\\n\\treturn times;\\n}\\n\\nfunction getThreads(ns, target, maxThreads) {\\n\\tlet multiplier = 2\\n\\n\\t// Get ideal number of threads for preferred hack amount.\\n\\tlet maxHackAmount = ns.getServerMaxMoney(target) / multiplier;\\n\\tlet hackThreads = ns.hackAnalyzeThreads(target, maxHackAmount);\\n\\tlet hackSecurityEffect = ns.hackAnalyzeSecurity(hackThreads);\\n\\n\\t// First weaken reduces security after hack. Calculate threads needed.\\n\\tlet firstWeakenEffect = 0;\\n\\tlet firstWeakenThreads = hackThreads\\n\\twhile (firstWeakenEffect < hackSecurityEffect) {\\n\\t\\tfirstWeakenEffect = ns.weakenAnalyze(firstWeakenThreads);\\n\\t\\tfirstWeakenThreads++;\\n\\t}\\n\\n\\t// Get grow threads needed to bring back up to full.\\n\\tlet growThreads = ns.growthAnalyze(target, multiplier);\\n\\tlet growSecurityEffect = ns.growthAnalyzeSecurity(growThreads);\\n\\n\\t// Second weaken reduces security after growth. Calculate threads needed.\\n\\tlet secondWeakenEffect = 0;\\n\\tlet secondWeakenThreads = growThreads\\n\\twhile (secondWeakenEffect < growSecurityEffect) {\\n\\t\\tsecondWeakenEffect = ns.weakenAnalyze(secondWeakenThreads);\\n\\t\\tsecondWeakenThreads++;\\n\\t}\\n\\n\\t// Scale down if this would use more threads than the maximum allowed.\\n\\tlet totalThreads = hackThreads + growThreads + firstWeakenThreads + secondWeakenThreads;\\n\\tif (totalThreads > maxThreads) {\\n\\t\\tlet ratio = (maxThreads / totalThreads) * 0.8;\\n\\t\\t\\n\\t\\thackThreads = hackThreads * ratio;\\n\\t\\tgrowThreads = growThreads * ratio;\\n\\t\\tfirstWeakenThreads = firstWeakenThreads * ratio;\\n\\t\\tsecondWeakenThreads = secondWeakenThreads * ratio;\\n\\t}\\n\\n\\tif (hackThreads < 1) {\\n\\t\\thackThreads = 1;\\n\\t}\\n\\tif (growThreads < 1) {\\n\\t\\tgrowThreads = 1;\\n\\t}\\n\\tif (firstWeakenThreads < 1) {\\n\\t\\tfirstWeakenThreads = 1;\\n\\t}\\n\\tif (secondWeakenThreads < 1) {\\n\\t\\tsecondWeakenThreads = 1;\\n\\t}\\n\\n\\tlet threads = {\\n\\t\\tw1: firstWeakenThreads,\\n\\t\\tw2: secondWeakenThreads,\\n\\t\\tg: growThreads,\\n\\t\\th: hackThreads\\n\\t}\\n\\n\\treturn threads;\\n}\\n\\nasync function runBatch(ns, target, times, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\t// Finish order:\\n\\t// 1. Hack\\n\\t// 2. Weaken\\n\\t// 3. Grow\\n\\t// 4. Weaken\\n\\n\\tlet w1Sleep = times.offset;\\n\\tlet w2Sleep = 3 * times.offset;\\n\\tlet gSleep = (times.w - times.g) + (times.offset * 2) - w2Sleep;\\n\\tlet hSleep = (times.w - times.h) - (w2Sleep + gSleep);\\n\\n\\tawait ns.sleep(w1Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w1, target);\\n\\t\\n\\tawait ns.sleep(w2Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w2, target);\\n\\t\\n\\tawait ns.sleep(gSleep);\\n\\tns.exec(\\\"scripts/112-grow.js\\\", server.hostname, threads.g, target);\\n\\t\\n\\tif (!preparingServer) {\\n\\t\\tawait ns.sleep(hSleep);\\n\\t\\tns.exec(\\\"scripts/111-hack.js\\\", server.hostname, threads.h, target);\\n\\t}\\n}\",\"filename\":\"/scripts/110-batch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/7bffeb92-ff59-4ab9-9b12-0c397037dc82\",\"moduleSequenceNumber\":480}],\"dependents\":[],\"ramUsage\":10.15,\"server\":\"pserv-005\",\"moduleSequenceNumber\":480,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.hack(target);\\t\\n}\",\"filename\":\"/scripts/111-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-005\",\"moduleSequenceNumber\":476,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"/scripts/112-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/9a7bed6b-cd03-4585-b386-6edca8c47f79\",\"moduleSequenceNumber\":609}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-005\",\"moduleSequenceNumber\":609,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"/scripts/113-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/b0aa1a8c-f1be-4900-8868-c5bf847fcd08\",\"moduleSequenceNumber\":481}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-005\",\"moduleSequenceNumber\":481,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-006\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-006\",\"httpPortOpen\":false,\"ip\":\"23.2.0.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1944.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{},\"filename\":\"/scripts/100-batch-controller.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":335.8099999999895,\"pid\":6239,\"ramUsage\":5.75,\"server\":\"pserv-006\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/e6e10f37-7b5e-41bf-87b0-da2af5f6dd5d\",\"moduleSequenceNumber\":539}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":335.6099999999895,\"pid\":6250,\"ramUsage\":1.75,\"server\":\"pserv-006\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/e401a2a3-d00e-45bd-a391-5fbc208f5577\",\"moduleSequenceNumber\":541}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":335.00999999998953,\"pid\":6259,\"ramUsage\":1.75,\"server\":\"pserv-006\",\"threads\":554,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/e401a2a3-d00e-45bd-a391-5fbc208f5577\",\"moduleSequenceNumber\":541}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":196.0099999999974,\"pid\":7125,\"ramUsage\":1.75,\"server\":\"pserv-006\",\"threads\":553,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/70530959-b3fa-4d93-b336-aa0cc2b759d8\",\"moduleSequenceNumber\":667}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet debug = ns.args[0];\\n\\n\\tif (debug) {\\n\\t\\tawait earn(ns);\\n\\t} else {\\n\\t\\twhile (true) {\\n\\t\\t\\tawait earn(ns);\\n\\t\\t\\tawait ns.sleep(60000);\\n\\t\\t}\\n\\t}\\n}\\n\\nasync function earn(ns) {\\n\\tlet pservLimit = ns.getPurchasedServerLimit();\\n\\tlet maxServerRam = ns.getPurchasedServerMaxRam();\\n\\tlet maxServerCost = ns.getPurchasedServerCost(maxServerRam);\\n\\tlet money = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet pservs = ns.getPurchasedServers();\\n\\t\\n\\t// Identify targets, in order of best to hack.\\n\\tlet targets = getTargets(ns);\\n\\n\\t// Make sure that \\\"home\\\" is hacking the one at the target\\n\\t// top of the list.\\n\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", targets[0].hostname);\\n\\tif (!correctTarget) {\\n\\t\\t// Kill all scripts except this one.\\n\\t\\tlet currentScripts = ns.ps(\\\"home\\\");\\n\\t\\tlet batchScripts = currentScripts.filter( s => {\\n\\t\\t\\treturn s.filename != ns.getScriptName();\\n\\t\\t});\\n\\t\\tbatchScripts.forEach(s => {\\n\\t\\t\\tns.kill(s.pid);\\n\\t\\t});\\n\\n\\t\\t// Start with the correct one!\\n\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", 1, targets[0].hostname);\\n\\t}\\n\\n\\t// Buy a maxed out server to hack other targets.\\n\\tif (money >= maxServerCost && pservs.length < pservLimit) {\\n\\t\\tlet i = pservs.length + 1;\\n\\t\\tlet suffix = \\\"000\\\";\\n\\n\\t\\tif (i < 10) {\\n\\t\\t\\tsuffix = \\\"00\\\" + i.toString();\\n\\t\\t} else if (i < 100) {\\n\\t\\t\\tsuffix = \\\"0\\\" + i.toString();\\n\\t\\t} else {\\n\\t\\t\\tsuffix = i.toString();\\n\\t\\t}\\n\\n\\t\\tlet hostname = \\\"pserv-\\\" + suffix;\\n\\t\\tns.purchaseServer(hostname, ns.getPurchasedServerMaxRam());\\n\\t}\\n\\n\\t// Starting hacking using purchased servers.\\n\\t// Get pservs again.\\n\\tpservs = ns.getPurchasedServers();\\n\\n\\tfor (let n in pservs) {\\n\\t\\tlet p = pservs[n]\\n\\t\\t// Make sure pserv has the latest scripts.\\n\\t\\t// Get scripts on home and on server.\\n\\t\\tlet homeScripts = ns.ls(\\\"home\\\", \\\"/scripts/\\\");\\n\\t\\t\\n\\t\\t// Copy all scripts back to server.\\n\\t\\tawait ns.scp(homeScripts, p);\\n\\n\\t\\tlet i = parseInt(p.split(\\\"-\\\").pop());\\n\\t\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", p, targets[i].hostname);\\n\\t\\tif (!correctTarget) {\\n\\t\\t\\t// Kill all scripts on the server.\\n\\t\\t\\tns.killall(p);\\n\\n\\t\\t\\t// Start with the correct one!\\n\\t\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", p, 1, targets[i].hostname);\\n\\t\\t}\\n\\t}\\t\\n}\\n\\nfunction getTargets(ns) {\\n\\t// TODO: Having to cap infinite loop arbitrarily. Struggling\\n\\t// to get the scanQueue to remove a server once scanned.\\n\\n\\tlet targets = [];\\n\\tlet scanQueue = [];\\n\\tlet scanned = [];\\n\\n\\tlet levelOneTargets = ns.scan();\\n\\tlevelOneTargets.forEach( t => {\\n\\t\\tlet server = ns.getServer(t);\\n\\t\\tif (!server.purchasedByPlayer && t !== \\\"home\\\" && t !== \\\"darkweb\\\") {\\n\\t\\t\\ttargets.push(t);\\n\\t\\t\\tscanQueue.push(t);\\n\\t\\t}\\n\\t});\\n\\t\\n\\tlet i = 0\\n\\twhile (scanQueue.length > 0 && i < 30) {\\n\\t\\tlet results = [];\\n\\n\\t\\tscanQueue.forEach( t => {\\n\\t\\t\\tlet result = ns.scan(t);\\n\\t\\t\\tresult.forEach( server => {\\n\\t\\t\\t\\tresults.push(server)\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\t// Do something with results.\\n\\t\\tlet uniqueResults = [...new Set(results)];\\n\\t\\tuniqueResults.forEach( async r => {\\n\\t\\t\\tif (r in scanned === false) {\\n\\t\\t\\t\\ttargets.push(r);\\t\\n\\t\\t\\t\\tscanQueue.push(r);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\ti++;\\n\\t};\\n\\n\\tlet uniqueTargets = [...new Set(targets)];\\n\\n\\tlet targetServers = [];\\n\\tuniqueTargets.forEach( t => {\\n\\t\\ttargetServers.push(ns.getServer(t));\\n\\t});\\n\\n\\tlet hackableTargets = getHackableTargets(ns, targetServers);\\n\\tlet orderedTargets = getOrderedTargets(ns, hackableTargets);\\n\\n\\treturn orderedTargets;\\n}\\n\\nfunction getHackableTargets(ns, targets) {\\n\\t// Conditions\\n\\t//\\t- Player hacking skill must be greater than skill required.\\n\\t//\\t- Max possible money must be greater than zero.\\n\\n\\tlet hackingSkill = ns.getHackingLevel();\\n\\n\\tlet hackableTargets = targets.filter( t => {\\n\\t\\treturn hackingSkill >= t.requiredHackingSkill && ns.getServerMaxMoney(t.hostname) > 0;\\n\\t});\\n\\n\\treturn hackableTargets;\\n}\\n\\nfunction getOrderedTargets(ns, hackableTargets) {\\n\\t// Score is the maximum dollars per second.\\n\\t// This is not the same rate that will be effected in\\n\\t// practice, as this would drain the server of all money.\\n\\n\\tlet scoredTargets = [];\\n\\n\\thackableTargets.forEach( h => {\\n\\t\\tlet maxMoney = ns.getServerMaxMoney(h.hostname);\\n\\t\\tlet batchTime = ns.getWeakenTime(h.hostname) + 1000; // Weaken always takes longest.\\n\\t\\tlet score = maxMoney / batchTime;\\n\\t\\tscoredTargets.push({\\n\\t\\t\\thostname: h.hostname,\\n\\t\\t\\tscore: score\\n\\t\\t});\\n\\t});\\n\\n\\tlet orderedTargets = scoredTargets.sort( (a, b) => {\\n\\t\\treturn b.score - a.score;\\n\\t});\\n\\n\\tlet orderedTargetServers = [];\\n\\torderedTargets.forEach( o => {\\n\\t\\torderedTargetServers.push(ns.getServer(o.hostname));\\n\\t});\\n\\n\\treturn orderedTargets;\\n}\",\"filename\":\"/scripts/000-master-controller.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":12.35,\"server\":\"pserv-006\",\"moduleSequenceNumber\":533,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet server = ns.getServer();\\n\\n\\tlet maxThreads = Math.trunc(ns.getServerMaxRam(server.hostname) / 2);\\n\\tlet offset = 200;\\n\\n\\t// Prepare server.\\n\\tunlockServer(ns, target);\\n\\n\\tlet serverReady = false\\n\\twhile (!serverReady) {\\n\\t\\tstartBatch(ns, target, maxThreads, true);\\n        serverReady = getServerStatus(ns, target);\\n\\t\\tif (!serverReady) {\\n            let waitTime = ns.getWeakenTime(target);\\n\\t\\t\\tawait ns.sleep(waitTime + (5 * offset));\\n\\t\\t}\\n\\t}\\n\\n\\t// Set up and run batches.\\n\\twhile (true) {\\n        let freeRam = ns.getServerMaxRam(server.hostname) - ns.getServerUsedRam(server.hostname);\\n        if (freeRam >= 20) {\\n            startBatch(ns, target, maxThreads, false);\\n            await ns.sleep(1000);\\n        } else {\\n            await ns.sleep(2000);\\n        }\\n\\t}\\n}\\n\\nfunction getServerStatus(ns, target) {\\n    let maxMoney = ns.getServerMaxMoney(target);\\n    let currentMoney = ns.getServerMoneyAvailable(target);\\n    let moneyReady = maxMoney == currentMoney;\\n\\n    let minSecurity = ns.getServerMinSecurityLevel(target);\\n    let currentSecurity = ns.getServerSecurityLevel(target);\\n    let securityReady = minSecurity == currentSecurity;\\n\\n    if (moneyReady && securityReady) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction unlockServer(ns, target) {\\n    try {\\n        ns.brutessh(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.ftpcrack(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.relaysmtp(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.httpworm(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.sqlinject(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    ns.nuke(target);\\n}\\n\\nfunction startBatch(ns, target, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\tns.exec(\\\"scripts/110-batch.js\\\", server.hostname, 1, target, threads, preparingServer);\\n}\",\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/e6e10f37-7b5e-41bf-87b0-da2af5f6dd5d\",\"moduleSequenceNumber\":539}],\"dependents\":[],\"ramUsage\":5.75,\"server\":\"pserv-006\",\"moduleSequenceNumber\":539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet maxThreads = ns.args[1];\\n\\tlet preparingServer = ns.args[2] | false;\\n\\n\\tlet times = getTimes(ns, target);\\n\\tlet threads = getThreads(ns, target, maxThreads);\\n\\n\\tlet validThreads = Object.keys(threads).every( n => threads[n] >= 1);\\n\\t// ns.tprint(validThreads);\\n\\tif (validThreads) {\\n\\t\\tawait runBatch(ns, target, times, threads, preparingServer);\\n\\t}\\n}\\n\\nfunction getTimes(ns, target) {\\n\\t// Get run times for server.\\n\\tlet wTime = ns.getWeakenTime(target);\\n\\tlet gTime = ns.getGrowTime(target);\\n\\tlet hTime = ns.getHackTime(target);\\n\\tlet times = {\\n\\t\\tw: wTime,\\n\\t\\tg: gTime,\\n\\t\\th: hTime,\\n\\t\\toffset: 200\\n\\t}\\n\\n\\treturn times;\\n}\\n\\nfunction getThreads(ns, target, maxThreads) {\\n\\tlet multiplier = 2\\n\\n\\t// Get ideal number of threads for preferred hack amount.\\n\\tlet maxHackAmount = ns.getServerMaxMoney(target) / multiplier;\\n\\tlet hackThreads = ns.hackAnalyzeThreads(target, maxHackAmount);\\n\\tlet hackSecurityEffect = ns.hackAnalyzeSecurity(hackThreads);\\n\\n\\t// First weaken reduces security after hack. Calculate threads needed.\\n\\tlet firstWeakenEffect = 0;\\n\\tlet firstWeakenThreads = hackThreads\\n\\twhile (firstWeakenEffect < hackSecurityEffect) {\\n\\t\\tfirstWeakenEffect = ns.weakenAnalyze(firstWeakenThreads);\\n\\t\\tfirstWeakenThreads++;\\n\\t}\\n\\n\\t// Get grow threads needed to bring back up to full.\\n\\tlet growThreads = ns.growthAnalyze(target, multiplier);\\n\\tlet growSecurityEffect = ns.growthAnalyzeSecurity(growThreads);\\n\\n\\t// Second weaken reduces security after growth. Calculate threads needed.\\n\\tlet secondWeakenEffect = 0;\\n\\tlet secondWeakenThreads = growThreads\\n\\twhile (secondWeakenEffect < growSecurityEffect) {\\n\\t\\tsecondWeakenEffect = ns.weakenAnalyze(secondWeakenThreads);\\n\\t\\tsecondWeakenThreads++;\\n\\t}\\n\\n\\t// Scale down if this would use more threads than the maximum allowed.\\n\\tlet totalThreads = hackThreads + growThreads + firstWeakenThreads + secondWeakenThreads;\\n\\tif (totalThreads > maxThreads) {\\n\\t\\tlet ratio = (maxThreads / totalThreads) * 0.8;\\n\\t\\t\\n\\t\\thackThreads = hackThreads * ratio;\\n\\t\\tgrowThreads = growThreads * ratio;\\n\\t\\tfirstWeakenThreads = firstWeakenThreads * ratio;\\n\\t\\tsecondWeakenThreads = secondWeakenThreads * ratio;\\n\\t}\\n\\n\\tif (hackThreads < 1) {\\n\\t\\thackThreads = 1;\\n\\t}\\n\\tif (growThreads < 1) {\\n\\t\\tgrowThreads = 1;\\n\\t}\\n\\tif (firstWeakenThreads < 1) {\\n\\t\\tfirstWeakenThreads = 1;\\n\\t}\\n\\tif (secondWeakenThreads < 1) {\\n\\t\\tsecondWeakenThreads = 1;\\n\\t}\\n\\n\\tlet threads = {\\n\\t\\tw1: firstWeakenThreads,\\n\\t\\tw2: secondWeakenThreads,\\n\\t\\tg: growThreads,\\n\\t\\th: hackThreads\\n\\t}\\n\\n\\treturn threads;\\n}\\n\\nasync function runBatch(ns, target, times, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\t// Finish order:\\n\\t// 1. Hack\\n\\t// 2. Weaken\\n\\t// 3. Grow\\n\\t// 4. Weaken\\n\\n\\tlet w1Sleep = times.offset;\\n\\tlet w2Sleep = 3 * times.offset;\\n\\tlet gSleep = (times.w - times.g) + (times.offset * 2) - w2Sleep;\\n\\tlet hSleep = (times.w - times.h) - (w2Sleep + gSleep);\\n\\n\\tawait ns.sleep(w1Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w1, target);\\n\\t\\n\\tawait ns.sleep(w2Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w2, target);\\n\\t\\n\\tawait ns.sleep(gSleep);\\n\\tns.exec(\\\"scripts/112-grow.js\\\", server.hostname, threads.g, target);\\n\\t\\n\\tif (!preparingServer) {\\n\\t\\tawait ns.sleep(hSleep);\\n\\t\\tns.exec(\\\"scripts/111-hack.js\\\", server.hostname, threads.h, target);\\n\\t}\\n}\",\"filename\":\"/scripts/110-batch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/5a027332-b6f2-4b68-b8e1-4577a63b4cdc\",\"moduleSequenceNumber\":540}],\"dependents\":[],\"ramUsage\":10.15,\"server\":\"pserv-006\",\"moduleSequenceNumber\":540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.hack(target);\\t\\n}\",\"filename\":\"/scripts/111-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-006\",\"moduleSequenceNumber\":536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"/scripts/112-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/70530959-b3fa-4d93-b336-aa0cc2b759d8\",\"moduleSequenceNumber\":667}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-006\",\"moduleSequenceNumber\":667,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"/scripts/113-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/e401a2a3-d00e-45bd-a391-5fbc208f5577\",\"moduleSequenceNumber\":541}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-006\",\"moduleSequenceNumber\":541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-007\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-007\",\"httpPortOpen\":false,\"ip\":\"69.9.2.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1986.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"/scripts/100-batch-controller.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":335.8099999999895,\"pid\":6241,\"ramUsage\":5.75,\"server\":\"pserv-007\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/b5515b4d-17df-40f1-b87f-086b4c0c416c\",\"moduleSequenceNumber\":606}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":335.6099999999895,\"pid\":6251,\"ramUsage\":1.75,\"server\":\"pserv-007\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/e592b3e7-f18b-449d-a878-c810e02a4f6c\",\"moduleSequenceNumber\":608}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":335.00999999998953,\"pid\":6260,\"ramUsage\":1.75,\"server\":\"pserv-007\",\"threads\":566,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/e592b3e7-f18b-449d-a878-c810e02a4f6c\",\"moduleSequenceNumber\":608}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":226.60999999999567,\"pid\":6848,\"ramUsage\":1.75,\"server\":\"pserv-007\",\"threads\":565,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/6e7a7bcf-6248-403f-bb1b-61b0c0f03fd7\",\"moduleSequenceNumber\":683}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet debug = ns.args[0];\\n\\n\\tif (debug) {\\n\\t\\tawait earn(ns);\\n\\t} else {\\n\\t\\twhile (true) {\\n\\t\\t\\tawait earn(ns);\\n\\t\\t\\tawait ns.sleep(60000);\\n\\t\\t}\\n\\t}\\n}\\n\\nasync function earn(ns) {\\n\\tlet pservLimit = ns.getPurchasedServerLimit();\\n\\tlet maxServerRam = ns.getPurchasedServerMaxRam();\\n\\tlet maxServerCost = ns.getPurchasedServerCost(maxServerRam);\\n\\tlet money = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet pservs = ns.getPurchasedServers();\\n\\t\\n\\t// Identify targets, in order of best to hack.\\n\\tlet targets = getTargets(ns);\\n\\n\\t// Make sure that \\\"home\\\" is hacking the one at the target\\n\\t// top of the list.\\n\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", targets[0].hostname);\\n\\tif (!correctTarget) {\\n\\t\\t// Kill all scripts except this one.\\n\\t\\tlet currentScripts = ns.ps(\\\"home\\\");\\n\\t\\tlet batchScripts = currentScripts.filter( s => {\\n\\t\\t\\treturn s.filename != ns.getScriptName();\\n\\t\\t});\\n\\t\\tbatchScripts.forEach(s => {\\n\\t\\t\\tns.kill(s.pid);\\n\\t\\t});\\n\\n\\t\\t// Start with the correct one!\\n\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", 1, targets[0].hostname);\\n\\t}\\n\\n\\t// Buy a maxed out server to hack other targets.\\n\\tif (money >= maxServerCost && pservs.length < pservLimit) {\\n\\t\\tlet i = pservs.length + 1;\\n\\t\\tlet suffix = \\\"000\\\";\\n\\n\\t\\tif (i < 10) {\\n\\t\\t\\tsuffix = \\\"00\\\" + i.toString();\\n\\t\\t} else if (i < 100) {\\n\\t\\t\\tsuffix = \\\"0\\\" + i.toString();\\n\\t\\t} else {\\n\\t\\t\\tsuffix = i.toString();\\n\\t\\t}\\n\\n\\t\\tlet hostname = \\\"pserv-\\\" + suffix;\\n\\t\\tns.purchaseServer(hostname, ns.getPurchasedServerMaxRam());\\n\\t}\\n\\n\\t// Starting hacking using purchased servers.\\n\\t// Get pservs again.\\n\\tpservs = ns.getPurchasedServers();\\n\\n\\tfor (let n in pservs) {\\n\\t\\tlet p = pservs[n]\\n\\t\\t// Make sure pserv has the latest scripts.\\n\\t\\t// Get scripts on home and on server.\\n\\t\\tlet homeScripts = ns.ls(\\\"home\\\", \\\"/scripts/\\\");\\n\\t\\t\\n\\t\\t// Copy all scripts back to server.\\n\\t\\tawait ns.scp(homeScripts, p);\\n\\n\\t\\tlet i = parseInt(p.split(\\\"-\\\").pop());\\n\\t\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", p, targets[i].hostname);\\n\\t\\tif (!correctTarget) {\\n\\t\\t\\t// Kill all scripts on the server.\\n\\t\\t\\tns.killall(p);\\n\\n\\t\\t\\t// Start with the correct one!\\n\\t\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", p, 1, targets[i].hostname);\\n\\t\\t}\\n\\t}\\t\\n}\\n\\nfunction getTargets(ns) {\\n\\t// TODO: Having to cap infinite loop arbitrarily. Struggling\\n\\t// to get the scanQueue to remove a server once scanned.\\n\\n\\tlet targets = [];\\n\\tlet scanQueue = [];\\n\\tlet scanned = [];\\n\\n\\tlet levelOneTargets = ns.scan();\\n\\tlevelOneTargets.forEach( t => {\\n\\t\\tlet server = ns.getServer(t);\\n\\t\\tif (!server.purchasedByPlayer && t !== \\\"home\\\" && t !== \\\"darkweb\\\") {\\n\\t\\t\\ttargets.push(t);\\n\\t\\t\\tscanQueue.push(t);\\n\\t\\t}\\n\\t});\\n\\t\\n\\tlet i = 0\\n\\twhile (scanQueue.length > 0 && i < 30) {\\n\\t\\tlet results = [];\\n\\n\\t\\tscanQueue.forEach( t => {\\n\\t\\t\\tlet result = ns.scan(t);\\n\\t\\t\\tresult.forEach( server => {\\n\\t\\t\\t\\tresults.push(server)\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\t// Do something with results.\\n\\t\\tlet uniqueResults = [...new Set(results)];\\n\\t\\tuniqueResults.forEach( async r => {\\n\\t\\t\\tif (r in scanned === false) {\\n\\t\\t\\t\\ttargets.push(r);\\t\\n\\t\\t\\t\\tscanQueue.push(r);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\ti++;\\n\\t};\\n\\n\\tlet uniqueTargets = [...new Set(targets)];\\n\\n\\tlet targetServers = [];\\n\\tuniqueTargets.forEach( t => {\\n\\t\\ttargetServers.push(ns.getServer(t));\\n\\t});\\n\\n\\tlet hackableTargets = getHackableTargets(ns, targetServers);\\n\\tlet orderedTargets = getOrderedTargets(ns, hackableTargets);\\n\\n\\treturn orderedTargets;\\n}\\n\\nfunction getHackableTargets(ns, targets) {\\n\\t// Conditions\\n\\t//\\t- Player hacking skill must be greater than skill required.\\n\\t//\\t- Max possible money must be greater than zero.\\n\\n\\tlet hackingSkill = ns.getHackingLevel();\\n\\n\\tlet hackableTargets = targets.filter( t => {\\n\\t\\treturn hackingSkill >= t.requiredHackingSkill && ns.getServerMaxMoney(t.hostname) > 0;\\n\\t});\\n\\n\\treturn hackableTargets;\\n}\\n\\nfunction getOrderedTargets(ns, hackableTargets) {\\n\\t// Score is the maximum dollars per second.\\n\\t// This is not the same rate that will be effected in\\n\\t// practice, as this would drain the server of all money.\\n\\n\\tlet scoredTargets = [];\\n\\n\\thackableTargets.forEach( h => {\\n\\t\\tlet maxMoney = ns.getServerMaxMoney(h.hostname);\\n\\t\\tlet batchTime = ns.getWeakenTime(h.hostname) + 1000; // Weaken always takes longest.\\n\\t\\tlet score = maxMoney / batchTime;\\n\\t\\tscoredTargets.push({\\n\\t\\t\\thostname: h.hostname,\\n\\t\\t\\tscore: score\\n\\t\\t});\\n\\t});\\n\\n\\tlet orderedTargets = scoredTargets.sort( (a, b) => {\\n\\t\\treturn b.score - a.score;\\n\\t});\\n\\n\\tlet orderedTargetServers = [];\\n\\torderedTargets.forEach( o => {\\n\\t\\torderedTargetServers.push(ns.getServer(o.hostname));\\n\\t});\\n\\n\\treturn orderedTargets;\\n}\",\"filename\":\"/scripts/000-master-controller.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":12.35,\"server\":\"pserv-007\",\"moduleSequenceNumber\":600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet server = ns.getServer();\\n\\n\\tlet maxThreads = Math.trunc(ns.getServerMaxRam(server.hostname) / 2);\\n\\tlet offset = 200;\\n\\n\\t// Prepare server.\\n\\tunlockServer(ns, target);\\n\\n\\tlet serverReady = false\\n\\twhile (!serverReady) {\\n\\t\\tstartBatch(ns, target, maxThreads, true);\\n        serverReady = getServerStatus(ns, target);\\n\\t\\tif (!serverReady) {\\n            let waitTime = ns.getWeakenTime(target);\\n\\t\\t\\tawait ns.sleep(waitTime + (5 * offset));\\n\\t\\t}\\n\\t}\\n\\n\\t// Set up and run batches.\\n\\twhile (true) {\\n        let freeRam = ns.getServerMaxRam(server.hostname) - ns.getServerUsedRam(server.hostname);\\n        if (freeRam >= 20) {\\n            startBatch(ns, target, maxThreads, false);\\n            await ns.sleep(1000);\\n        } else {\\n            await ns.sleep(2000);\\n        }\\n\\t}\\n}\\n\\nfunction getServerStatus(ns, target) {\\n    let maxMoney = ns.getServerMaxMoney(target);\\n    let currentMoney = ns.getServerMoneyAvailable(target);\\n    let moneyReady = maxMoney == currentMoney;\\n\\n    let minSecurity = ns.getServerMinSecurityLevel(target);\\n    let currentSecurity = ns.getServerSecurityLevel(target);\\n    let securityReady = minSecurity == currentSecurity;\\n\\n    if (moneyReady && securityReady) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction unlockServer(ns, target) {\\n    try {\\n        ns.brutessh(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.ftpcrack(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.relaysmtp(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.httpworm(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.sqlinject(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    ns.nuke(target);\\n}\\n\\nfunction startBatch(ns, target, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\tns.exec(\\\"scripts/110-batch.js\\\", server.hostname, 1, target, threads, preparingServer);\\n}\",\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/b5515b4d-17df-40f1-b87f-086b4c0c416c\",\"moduleSequenceNumber\":606}],\"dependents\":[],\"ramUsage\":5.75,\"server\":\"pserv-007\",\"moduleSequenceNumber\":606,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet maxThreads = ns.args[1];\\n\\tlet preparingServer = ns.args[2] | false;\\n\\n\\tlet times = getTimes(ns, target);\\n\\tlet threads = getThreads(ns, target, maxThreads);\\n\\n\\tlet validThreads = Object.keys(threads).every( n => threads[n] >= 1);\\n\\t// ns.tprint(validThreads);\\n\\tif (validThreads) {\\n\\t\\tawait runBatch(ns, target, times, threads, preparingServer);\\n\\t}\\n}\\n\\nfunction getTimes(ns, target) {\\n\\t// Get run times for server.\\n\\tlet wTime = ns.getWeakenTime(target);\\n\\tlet gTime = ns.getGrowTime(target);\\n\\tlet hTime = ns.getHackTime(target);\\n\\tlet times = {\\n\\t\\tw: wTime,\\n\\t\\tg: gTime,\\n\\t\\th: hTime,\\n\\t\\toffset: 200\\n\\t}\\n\\n\\treturn times;\\n}\\n\\nfunction getThreads(ns, target, maxThreads) {\\n\\tlet multiplier = 2\\n\\n\\t// Get ideal number of threads for preferred hack amount.\\n\\tlet maxHackAmount = ns.getServerMaxMoney(target) / multiplier;\\n\\tlet hackThreads = ns.hackAnalyzeThreads(target, maxHackAmount);\\n\\tlet hackSecurityEffect = ns.hackAnalyzeSecurity(hackThreads);\\n\\n\\t// First weaken reduces security after hack. Calculate threads needed.\\n\\tlet firstWeakenEffect = 0;\\n\\tlet firstWeakenThreads = hackThreads\\n\\twhile (firstWeakenEffect < hackSecurityEffect) {\\n\\t\\tfirstWeakenEffect = ns.weakenAnalyze(firstWeakenThreads);\\n\\t\\tfirstWeakenThreads++;\\n\\t}\\n\\n\\t// Get grow threads needed to bring back up to full.\\n\\tlet growThreads = ns.growthAnalyze(target, multiplier);\\n\\tlet growSecurityEffect = ns.growthAnalyzeSecurity(growThreads);\\n\\n\\t// Second weaken reduces security after growth. Calculate threads needed.\\n\\tlet secondWeakenEffect = 0;\\n\\tlet secondWeakenThreads = growThreads\\n\\twhile (secondWeakenEffect < growSecurityEffect) {\\n\\t\\tsecondWeakenEffect = ns.weakenAnalyze(secondWeakenThreads);\\n\\t\\tsecondWeakenThreads++;\\n\\t}\\n\\n\\t// Scale down if this would use more threads than the maximum allowed.\\n\\tlet totalThreads = hackThreads + growThreads + firstWeakenThreads + secondWeakenThreads;\\n\\tif (totalThreads > maxThreads) {\\n\\t\\tlet ratio = (maxThreads / totalThreads) * 0.8;\\n\\t\\t\\n\\t\\thackThreads = hackThreads * ratio;\\n\\t\\tgrowThreads = growThreads * ratio;\\n\\t\\tfirstWeakenThreads = firstWeakenThreads * ratio;\\n\\t\\tsecondWeakenThreads = secondWeakenThreads * ratio;\\n\\t}\\n\\n\\tif (hackThreads < 1) {\\n\\t\\thackThreads = 1;\\n\\t}\\n\\tif (growThreads < 1) {\\n\\t\\tgrowThreads = 1;\\n\\t}\\n\\tif (firstWeakenThreads < 1) {\\n\\t\\tfirstWeakenThreads = 1;\\n\\t}\\n\\tif (secondWeakenThreads < 1) {\\n\\t\\tsecondWeakenThreads = 1;\\n\\t}\\n\\n\\tlet threads = {\\n\\t\\tw1: firstWeakenThreads,\\n\\t\\tw2: secondWeakenThreads,\\n\\t\\tg: growThreads,\\n\\t\\th: hackThreads\\n\\t}\\n\\n\\treturn threads;\\n}\\n\\nasync function runBatch(ns, target, times, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\t// Finish order:\\n\\t// 1. Hack\\n\\t// 2. Weaken\\n\\t// 3. Grow\\n\\t// 4. Weaken\\n\\n\\tlet w1Sleep = times.offset;\\n\\tlet w2Sleep = 3 * times.offset;\\n\\tlet gSleep = (times.w - times.g) + (times.offset * 2) - w2Sleep;\\n\\tlet hSleep = (times.w - times.h) - (w2Sleep + gSleep);\\n\\n\\tawait ns.sleep(w1Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w1, target);\\n\\t\\n\\tawait ns.sleep(w2Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w2, target);\\n\\t\\n\\tawait ns.sleep(gSleep);\\n\\tns.exec(\\\"scripts/112-grow.js\\\", server.hostname, threads.g, target);\\n\\t\\n\\tif (!preparingServer) {\\n\\t\\tawait ns.sleep(hSleep);\\n\\t\\tns.exec(\\\"scripts/111-hack.js\\\", server.hostname, threads.h, target);\\n\\t}\\n}\",\"filename\":\"/scripts/110-batch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/9b047308-cbd0-4d5d-ac94-2710f53c7ddb\",\"moduleSequenceNumber\":607}],\"dependents\":[],\"ramUsage\":10.15,\"server\":\"pserv-007\",\"moduleSequenceNumber\":607,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.hack(target);\\t\\n}\",\"filename\":\"/scripts/111-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-007\",\"moduleSequenceNumber\":603,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"/scripts/112-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/6e7a7bcf-6248-403f-bb1b-61b0c0f03fd7\",\"moduleSequenceNumber\":683}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-007\",\"moduleSequenceNumber\":683,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"/scripts/113-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/e592b3e7-f18b-449d-a878-c810e02a4f6c\",\"moduleSequenceNumber\":608}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-007\",\"moduleSequenceNumber\":608,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-008\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-008\",\"httpPortOpen\":false,\"ip\":\"39.6.4.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1461.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"/scripts/100-batch-controller.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":756.4100000000351,\"pid\":4076,\"ramUsage\":5.75,\"server\":\"pserv-008\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":285.8099999999923,\"pid\":6516,\"ramUsage\":1.75,\"server\":\"pserv-008\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/24d360ec-985c-46ef-9294-b8944bd8bf35\",\"moduleSequenceNumber\":682}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":285.20999999999236,\"pid\":6521,\"ramUsage\":1.75,\"server\":\"pserv-008\",\"threads\":416,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/24d360ec-985c-46ef-9294-b8944bd8bf35\",\"moduleSequenceNumber\":682}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":218.8099999999961,\"pid\":6911,\"ramUsage\":1.75,\"server\":\"pserv-008\",\"threads\":415,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/e528de76-aef3-407d-b9a0-5a1b51182db2\",\"moduleSequenceNumber\":762}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet debug = ns.args[0];\\n\\n\\tif (debug) {\\n\\t\\tawait earn(ns);\\n\\t} else {\\n\\t\\twhile (true) {\\n\\t\\t\\tawait earn(ns);\\n\\t\\t\\tawait ns.sleep(60000);\\n\\t\\t}\\n\\t}\\n}\\n\\nasync function earn(ns) {\\n\\tlet pservLimit = ns.getPurchasedServerLimit();\\n\\tlet maxServerRam = ns.getPurchasedServerMaxRam();\\n\\tlet maxServerCost = ns.getPurchasedServerCost(maxServerRam);\\n\\tlet money = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet pservs = ns.getPurchasedServers();\\n\\t\\n\\t// Identify targets, in order of best to hack.\\n\\tlet targets = getTargets(ns);\\n\\n\\t// Make sure that \\\"home\\\" is hacking the one at the target\\n\\t// top of the list.\\n\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", targets[0].hostname);\\n\\tif (!correctTarget) {\\n\\t\\t// Kill all scripts except this one.\\n\\t\\tlet currentScripts = ns.ps(\\\"home\\\");\\n\\t\\tlet batchScripts = currentScripts.filter( s => {\\n\\t\\t\\treturn s.filename != ns.getScriptName();\\n\\t\\t});\\n\\t\\tbatchScripts.forEach(s => {\\n\\t\\t\\tns.kill(s.pid);\\n\\t\\t});\\n\\n\\t\\t// Start with the correct one!\\n\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", 1, targets[0].hostname);\\n\\t}\\n\\n\\t// Buy a maxed out server to hack other targets.\\n\\tif (money >= maxServerCost && pservs.length < pservLimit) {\\n\\t\\tlet i = pservs.length + 1;\\n\\t\\tlet suffix = \\\"000\\\";\\n\\n\\t\\tif (i < 10) {\\n\\t\\t\\tsuffix = \\\"00\\\" + i.toString();\\n\\t\\t} else if (i < 100) {\\n\\t\\t\\tsuffix = \\\"0\\\" + i.toString();\\n\\t\\t} else {\\n\\t\\t\\tsuffix = i.toString();\\n\\t\\t}\\n\\n\\t\\tlet hostname = \\\"pserv-\\\" + suffix;\\n\\t\\tns.purchaseServer(hostname, ns.getPurchasedServerMaxRam());\\n\\t}\\n\\n\\t// Starting hacking using purchased servers.\\n\\t// Get pservs again.\\n\\tpservs = ns.getPurchasedServers();\\n\\n\\tfor (let n in pservs) {\\n\\t\\tlet p = pservs[n]\\n\\t\\t// Make sure pserv has the latest scripts.\\n\\t\\t// Get scripts on home and on server.\\n\\t\\tlet homeScripts = ns.ls(\\\"home\\\", \\\"/scripts/\\\");\\n\\t\\t\\n\\t\\t// Copy all scripts back to server.\\n\\t\\tawait ns.scp(homeScripts, p);\\n\\n\\t\\tlet i = parseInt(p.split(\\\"-\\\").pop());\\n\\t\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", p, targets[i].hostname);\\n\\t\\tif (!correctTarget) {\\n\\t\\t\\t// Kill all scripts on the server.\\n\\t\\t\\tns.killall(p);\\n\\n\\t\\t\\t// Start with the correct one!\\n\\t\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", p, 1, targets[i].hostname);\\n\\t\\t}\\n\\t}\\t\\n}\\n\\nfunction getTargets(ns) {\\n\\t// TODO: Having to cap infinite loop arbitrarily. Struggling\\n\\t// to get the scanQueue to remove a server once scanned.\\n\\n\\tlet targets = [];\\n\\tlet scanQueue = [];\\n\\tlet scanned = [];\\n\\n\\tlet levelOneTargets = ns.scan();\\n\\tlevelOneTargets.forEach( t => {\\n\\t\\tlet server = ns.getServer(t);\\n\\t\\tif (!server.purchasedByPlayer && t !== \\\"home\\\" && t !== \\\"darkweb\\\") {\\n\\t\\t\\ttargets.push(t);\\n\\t\\t\\tscanQueue.push(t);\\n\\t\\t}\\n\\t});\\n\\t\\n\\tlet i = 0\\n\\twhile (scanQueue.length > 0 && i < 30) {\\n\\t\\tlet results = [];\\n\\n\\t\\tscanQueue.forEach( t => {\\n\\t\\t\\tlet result = ns.scan(t);\\n\\t\\t\\tresult.forEach( server => {\\n\\t\\t\\t\\tresults.push(server)\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\t// Do something with results.\\n\\t\\tlet uniqueResults = [...new Set(results)];\\n\\t\\tuniqueResults.forEach( async r => {\\n\\t\\t\\tif (r in scanned === false) {\\n\\t\\t\\t\\ttargets.push(r);\\t\\n\\t\\t\\t\\tscanQueue.push(r);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\ti++;\\n\\t};\\n\\n\\tlet uniqueTargets = [...new Set(targets)];\\n\\n\\tlet targetServers = [];\\n\\tuniqueTargets.forEach( t => {\\n\\t\\ttargetServers.push(ns.getServer(t));\\n\\t});\\n\\n\\tlet hackableTargets = getHackableTargets(ns, targetServers);\\n\\tlet orderedTargets = getOrderedTargets(ns, hackableTargets);\\n\\n\\treturn orderedTargets;\\n}\\n\\nfunction getHackableTargets(ns, targets) {\\n\\t// Conditions\\n\\t//\\t- Player hacking skill must be greater than skill required.\\n\\t//\\t- Max possible money must be greater than zero.\\n\\n\\tlet hackingSkill = ns.getHackingLevel();\\n\\n\\tlet hackableTargets = targets.filter( t => {\\n\\t\\treturn hackingSkill >= t.requiredHackingSkill && ns.getServerMaxMoney(t.hostname) > 0;\\n\\t});\\n\\n\\treturn hackableTargets;\\n}\\n\\nfunction getOrderedTargets(ns, hackableTargets) {\\n\\t// Score is the maximum dollars per second.\\n\\t// This is not the same rate that will be effected in\\n\\t// practice, as this would drain the server of all money.\\n\\n\\tlet scoredTargets = [];\\n\\n\\thackableTargets.forEach( h => {\\n\\t\\tlet maxMoney = ns.getServerMaxMoney(h.hostname);\\n\\t\\tlet batchTime = ns.getWeakenTime(h.hostname) + 1000; // Weaken always takes longest.\\n\\t\\tlet score = maxMoney / batchTime;\\n\\t\\tscoredTargets.push({\\n\\t\\t\\thostname: h.hostname,\\n\\t\\t\\tscore: score\\n\\t\\t});\\n\\t});\\n\\n\\tlet orderedTargets = scoredTargets.sort( (a, b) => {\\n\\t\\treturn b.score - a.score;\\n\\t});\\n\\n\\tlet orderedTargetServers = [];\\n\\torderedTargets.forEach( o => {\\n\\t\\torderedTargetServers.push(ns.getServer(o.hostname));\\n\\t});\\n\\n\\treturn orderedTargets;\\n}\",\"filename\":\"/scripts/000-master-controller.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":12.35,\"server\":\"pserv-008\",\"moduleSequenceNumber\":674,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet server = ns.getServer();\\n\\n\\tlet maxThreads = Math.trunc(ns.getServerMaxRam(server.hostname) / 2);\\n\\tlet offset = 200;\\n\\n\\t// Prepare server.\\n\\tunlockServer(ns, target);\\n\\n\\tlet serverReady = false\\n\\twhile (!serverReady) {\\n\\t\\tstartBatch(ns, target, maxThreads, true);\\n        serverReady = getServerStatus(ns, target);\\n\\t\\tif (!serverReady) {\\n            let waitTime = ns.getWeakenTime(target);\\n\\t\\t\\tawait ns.sleep(waitTime + (5 * offset));\\n\\t\\t}\\n\\t}\\n\\n\\t// Set up and run batches.\\n\\twhile (true) {\\n        let freeRam = ns.getServerMaxRam(server.hostname) - ns.getServerUsedRam(server.hostname);\\n        if (freeRam >= 20) {\\n            startBatch(ns, target, maxThreads, false);\\n            await ns.sleep(1000);\\n        } else {\\n            await ns.sleep(2000);\\n        }\\n\\t}\\n}\\n\\nfunction getServerStatus(ns, target) {\\n    let maxMoney = ns.getServerMaxMoney(target);\\n    let currentMoney = ns.getServerMoneyAvailable(target);\\n    let moneyReady = maxMoney == currentMoney;\\n\\n    let minSecurity = ns.getServerMinSecurityLevel(target);\\n    let currentSecurity = ns.getServerSecurityLevel(target);\\n    let securityReady = minSecurity == currentSecurity;\\n\\n    if (moneyReady && securityReady) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction unlockServer(ns, target) {\\n    try {\\n        ns.brutessh(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.ftpcrack(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.relaysmtp(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.httpworm(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.sqlinject(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    ns.nuke(target);\\n}\\n\\nfunction startBatch(ns, target, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\tns.exec(\\\"scripts/110-batch.js\\\", server.hostname, 1, target, threads, preparingServer);\\n}\",\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/a424f9e5-0ace-467c-91c1-da672a2340bd\",\"moduleSequenceNumber\":680}],\"dependents\":[],\"ramUsage\":5.75,\"server\":\"pserv-008\",\"moduleSequenceNumber\":680,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet maxThreads = ns.args[1];\\n\\tlet preparingServer = ns.args[2] | false;\\n\\n\\tlet times = getTimes(ns, target);\\n\\tlet threads = getThreads(ns, target, maxThreads);\\n\\n\\tlet validThreads = Object.keys(threads).every( n => threads[n] >= 1);\\n\\t// ns.tprint(validThreads);\\n\\tif (validThreads) {\\n\\t\\tawait runBatch(ns, target, times, threads, preparingServer);\\n\\t}\\n}\\n\\nfunction getTimes(ns, target) {\\n\\t// Get run times for server.\\n\\tlet wTime = ns.getWeakenTime(target);\\n\\tlet gTime = ns.getGrowTime(target);\\n\\tlet hTime = ns.getHackTime(target);\\n\\tlet times = {\\n\\t\\tw: wTime,\\n\\t\\tg: gTime,\\n\\t\\th: hTime,\\n\\t\\toffset: 200\\n\\t}\\n\\n\\treturn times;\\n}\\n\\nfunction getThreads(ns, target, maxThreads) {\\n\\tlet multiplier = 2\\n\\n\\t// Get ideal number of threads for preferred hack amount.\\n\\tlet maxHackAmount = ns.getServerMaxMoney(target) / multiplier;\\n\\tlet hackThreads = ns.hackAnalyzeThreads(target, maxHackAmount);\\n\\tlet hackSecurityEffect = ns.hackAnalyzeSecurity(hackThreads);\\n\\n\\t// First weaken reduces security after hack. Calculate threads needed.\\n\\tlet firstWeakenEffect = 0;\\n\\tlet firstWeakenThreads = hackThreads\\n\\twhile (firstWeakenEffect < hackSecurityEffect) {\\n\\t\\tfirstWeakenEffect = ns.weakenAnalyze(firstWeakenThreads);\\n\\t\\tfirstWeakenThreads++;\\n\\t}\\n\\n\\t// Get grow threads needed to bring back up to full.\\n\\tlet growThreads = ns.growthAnalyze(target, multiplier);\\n\\tlet growSecurityEffect = ns.growthAnalyzeSecurity(growThreads);\\n\\n\\t// Second weaken reduces security after growth. Calculate threads needed.\\n\\tlet secondWeakenEffect = 0;\\n\\tlet secondWeakenThreads = growThreads\\n\\twhile (secondWeakenEffect < growSecurityEffect) {\\n\\t\\tsecondWeakenEffect = ns.weakenAnalyze(secondWeakenThreads);\\n\\t\\tsecondWeakenThreads++;\\n\\t}\\n\\n\\t// Scale down if this would use more threads than the maximum allowed.\\n\\tlet totalThreads = hackThreads + growThreads + firstWeakenThreads + secondWeakenThreads;\\n\\tif (totalThreads > maxThreads) {\\n\\t\\tlet ratio = (maxThreads / totalThreads) * 0.8;\\n\\t\\t\\n\\t\\thackThreads = hackThreads * ratio;\\n\\t\\tgrowThreads = growThreads * ratio;\\n\\t\\tfirstWeakenThreads = firstWeakenThreads * ratio;\\n\\t\\tsecondWeakenThreads = secondWeakenThreads * ratio;\\n\\t}\\n\\n\\tif (hackThreads < 1) {\\n\\t\\thackThreads = 1;\\n\\t}\\n\\tif (growThreads < 1) {\\n\\t\\tgrowThreads = 1;\\n\\t}\\n\\tif (firstWeakenThreads < 1) {\\n\\t\\tfirstWeakenThreads = 1;\\n\\t}\\n\\tif (secondWeakenThreads < 1) {\\n\\t\\tsecondWeakenThreads = 1;\\n\\t}\\n\\n\\tlet threads = {\\n\\t\\tw1: firstWeakenThreads,\\n\\t\\tw2: secondWeakenThreads,\\n\\t\\tg: growThreads,\\n\\t\\th: hackThreads\\n\\t}\\n\\n\\treturn threads;\\n}\\n\\nasync function runBatch(ns, target, times, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\t// Finish order:\\n\\t// 1. Hack\\n\\t// 2. Weaken\\n\\t// 3. Grow\\n\\t// 4. Weaken\\n\\n\\tlet w1Sleep = times.offset;\\n\\tlet w2Sleep = 3 * times.offset;\\n\\tlet gSleep = (times.w - times.g) + (times.offset * 2) - w2Sleep;\\n\\tlet hSleep = (times.w - times.h) - (w2Sleep + gSleep);\\n\\n\\tawait ns.sleep(w1Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w1, target);\\n\\t\\n\\tawait ns.sleep(w2Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w2, target);\\n\\t\\n\\tawait ns.sleep(gSleep);\\n\\tns.exec(\\\"scripts/112-grow.js\\\", server.hostname, threads.g, target);\\n\\t\\n\\tif (!preparingServer) {\\n\\t\\tawait ns.sleep(hSleep);\\n\\t\\tns.exec(\\\"scripts/111-hack.js\\\", server.hostname, threads.h, target);\\n\\t}\\n}\",\"filename\":\"/scripts/110-batch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/9db2f7a2-088e-4a7f-be1a-dc511051b3e7\",\"moduleSequenceNumber\":681}],\"dependents\":[],\"ramUsage\":10.15,\"server\":\"pserv-008\",\"moduleSequenceNumber\":681,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.hack(target);\\t\\n}\",\"filename\":\"/scripts/111-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-008\",\"moduleSequenceNumber\":677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"/scripts/112-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/e528de76-aef3-407d-b9a0-5a1b51182db2\",\"moduleSequenceNumber\":762}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-008\",\"moduleSequenceNumber\":762,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"/scripts/113-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/24d360ec-985c-46ef-9294-b8944bd8bf35\",\"moduleSequenceNumber\":682}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-008\",\"moduleSequenceNumber\":682,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-009\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-009\",\"httpPortOpen\":false,\"ip\":\"44.3.0.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":950.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"/scripts/100-batch-controller.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":696.2100000000214,\"pid\":4389,\"ramUsage\":5.75,\"server\":\"pserv-009\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":96.81000000000084,\"pid\":8111,\"ramUsage\":1.75,\"server\":\"pserv-009\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/7cbbdbbb-4d73-45c1-a1bd-a29028022804\",\"moduleSequenceNumber\":761}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":96.21000000000083,\"pid\":8119,\"ramUsage\":1.75,\"server\":\"pserv-009\",\"threads\":270,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/7cbbdbbb-4d73-45c1-a1bd-a29028022804\",\"moduleSequenceNumber\":761}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62.010000000000346,\"pid\":8499,\"ramUsage\":1.75,\"server\":\"pserv-009\",\"threads\":269,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/d146a99c-0aab-4a61-914f-85acca575c52\",\"moduleSequenceNumber\":847}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet debug = ns.args[0];\\n\\n\\tif (debug) {\\n\\t\\tawait earn(ns);\\n\\t} else {\\n\\t\\twhile (true) {\\n\\t\\t\\tawait earn(ns);\\n\\t\\t\\tawait ns.sleep(60000);\\n\\t\\t}\\n\\t}\\n}\\n\\nasync function earn(ns) {\\n\\tlet pservLimit = ns.getPurchasedServerLimit();\\n\\tlet maxServerRam = ns.getPurchasedServerMaxRam();\\n\\tlet maxServerCost = ns.getPurchasedServerCost(maxServerRam);\\n\\tlet money = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet pservs = ns.getPurchasedServers();\\n\\t\\n\\t// Identify targets, in order of best to hack.\\n\\tlet targets = getTargets(ns);\\n\\n\\t// Make sure that \\\"home\\\" is hacking the one at the target\\n\\t// top of the list.\\n\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", targets[0].hostname);\\n\\tif (!correctTarget) {\\n\\t\\t// Kill all scripts except this one.\\n\\t\\tlet currentScripts = ns.ps(\\\"home\\\");\\n\\t\\tlet batchScripts = currentScripts.filter( s => {\\n\\t\\t\\treturn s.filename != ns.getScriptName();\\n\\t\\t});\\n\\t\\tbatchScripts.forEach(s => {\\n\\t\\t\\tns.kill(s.pid);\\n\\t\\t});\\n\\n\\t\\t// Start with the correct one!\\n\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", 1, targets[0].hostname);\\n\\t}\\n\\n\\t// Buy a maxed out server to hack other targets.\\n\\tif (money >= maxServerCost && pservs.length < pservLimit) {\\n\\t\\tlet i = pservs.length + 1;\\n\\t\\tlet suffix = \\\"000\\\";\\n\\n\\t\\tif (i < 10) {\\n\\t\\t\\tsuffix = \\\"00\\\" + i.toString();\\n\\t\\t} else if (i < 100) {\\n\\t\\t\\tsuffix = \\\"0\\\" + i.toString();\\n\\t\\t} else {\\n\\t\\t\\tsuffix = i.toString();\\n\\t\\t}\\n\\n\\t\\tlet hostname = \\\"pserv-\\\" + suffix;\\n\\t\\tns.purchaseServer(hostname, ns.getPurchasedServerMaxRam());\\n\\t}\\n\\n\\t// Starting hacking using purchased servers.\\n\\t// Get pservs again.\\n\\tpservs = ns.getPurchasedServers();\\n\\n\\tfor (let n in pservs) {\\n\\t\\tlet p = pservs[n]\\n\\t\\t// Make sure pserv has the latest scripts.\\n\\t\\t// Get scripts on home and on server.\\n\\t\\tlet homeScripts = ns.ls(\\\"home\\\", \\\"/scripts/\\\");\\n\\t\\t\\n\\t\\t// Copy all scripts back to server.\\n\\t\\tawait ns.scp(homeScripts, p);\\n\\n\\t\\tlet i = parseInt(p.split(\\\"-\\\").pop());\\n\\t\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", p, targets[i].hostname);\\n\\t\\tif (!correctTarget) {\\n\\t\\t\\t// Kill all scripts on the server.\\n\\t\\t\\tns.killall(p);\\n\\n\\t\\t\\t// Start with the correct one!\\n\\t\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", p, 1, targets[i].hostname);\\n\\t\\t}\\n\\t}\\t\\n}\\n\\nfunction getTargets(ns) {\\n\\t// TODO: Having to cap infinite loop arbitrarily. Struggling\\n\\t// to get the scanQueue to remove a server once scanned.\\n\\n\\tlet targets = [];\\n\\tlet scanQueue = [];\\n\\tlet scanned = [];\\n\\n\\tlet levelOneTargets = ns.scan();\\n\\tlevelOneTargets.forEach( t => {\\n\\t\\tlet server = ns.getServer(t);\\n\\t\\tif (!server.purchasedByPlayer && t !== \\\"home\\\" && t !== \\\"darkweb\\\") {\\n\\t\\t\\ttargets.push(t);\\n\\t\\t\\tscanQueue.push(t);\\n\\t\\t}\\n\\t});\\n\\t\\n\\tlet i = 0\\n\\twhile (scanQueue.length > 0 && i < 30) {\\n\\t\\tlet results = [];\\n\\n\\t\\tscanQueue.forEach( t => {\\n\\t\\t\\tlet result = ns.scan(t);\\n\\t\\t\\tresult.forEach( server => {\\n\\t\\t\\t\\tresults.push(server)\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\t// Do something with results.\\n\\t\\tlet uniqueResults = [...new Set(results)];\\n\\t\\tuniqueResults.forEach( async r => {\\n\\t\\t\\tif (r in scanned === false) {\\n\\t\\t\\t\\ttargets.push(r);\\t\\n\\t\\t\\t\\tscanQueue.push(r);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\ti++;\\n\\t};\\n\\n\\tlet uniqueTargets = [...new Set(targets)];\\n\\n\\tlet targetServers = [];\\n\\tuniqueTargets.forEach( t => {\\n\\t\\ttargetServers.push(ns.getServer(t));\\n\\t});\\n\\n\\tlet hackableTargets = getHackableTargets(ns, targetServers);\\n\\tlet orderedTargets = getOrderedTargets(ns, hackableTargets);\\n\\n\\treturn orderedTargets;\\n}\\n\\nfunction getHackableTargets(ns, targets) {\\n\\t// Conditions\\n\\t//\\t- Player hacking skill must be greater than skill required.\\n\\t//\\t- Max possible money must be greater than zero.\\n\\n\\tlet hackingSkill = ns.getHackingLevel();\\n\\n\\tlet hackableTargets = targets.filter( t => {\\n\\t\\treturn hackingSkill >= t.requiredHackingSkill && ns.getServerMaxMoney(t.hostname) > 0;\\n\\t});\\n\\n\\treturn hackableTargets;\\n}\\n\\nfunction getOrderedTargets(ns, hackableTargets) {\\n\\t// Score is the maximum dollars per second.\\n\\t// This is not the same rate that will be effected in\\n\\t// practice, as this would drain the server of all money.\\n\\n\\tlet scoredTargets = [];\\n\\n\\thackableTargets.forEach( h => {\\n\\t\\tlet maxMoney = ns.getServerMaxMoney(h.hostname);\\n\\t\\tlet batchTime = ns.getWeakenTime(h.hostname) + 1000; // Weaken always takes longest.\\n\\t\\tlet score = maxMoney / batchTime;\\n\\t\\tscoredTargets.push({\\n\\t\\t\\thostname: h.hostname,\\n\\t\\t\\tscore: score\\n\\t\\t});\\n\\t});\\n\\n\\tlet orderedTargets = scoredTargets.sort( (a, b) => {\\n\\t\\treturn b.score - a.score;\\n\\t});\\n\\n\\tlet orderedTargetServers = [];\\n\\torderedTargets.forEach( o => {\\n\\t\\torderedTargetServers.push(ns.getServer(o.hostname));\\n\\t});\\n\\n\\treturn orderedTargets;\\n}\",\"filename\":\"/scripts/000-master-controller.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":12.35,\"server\":\"pserv-009\",\"moduleSequenceNumber\":753,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet server = ns.getServer();\\n\\n\\tlet maxThreads = Math.trunc(ns.getServerMaxRam(server.hostname) / 2);\\n\\tlet offset = 200;\\n\\n\\t// Prepare server.\\n\\tunlockServer(ns, target);\\n\\n\\tlet serverReady = false\\n\\twhile (!serverReady) {\\n\\t\\tstartBatch(ns, target, maxThreads, true);\\n        serverReady = getServerStatus(ns, target);\\n\\t\\tif (!serverReady) {\\n            let waitTime = ns.getWeakenTime(target);\\n\\t\\t\\tawait ns.sleep(waitTime + (5 * offset));\\n\\t\\t}\\n\\t}\\n\\n\\t// Set up and run batches.\\n\\twhile (true) {\\n        let freeRam = ns.getServerMaxRam(server.hostname) - ns.getServerUsedRam(server.hostname);\\n        if (freeRam >= 20) {\\n            startBatch(ns, target, maxThreads, false);\\n            await ns.sleep(1000);\\n        } else {\\n            await ns.sleep(2000);\\n        }\\n\\t}\\n}\\n\\nfunction getServerStatus(ns, target) {\\n    let maxMoney = ns.getServerMaxMoney(target);\\n    let currentMoney = ns.getServerMoneyAvailable(target);\\n    let moneyReady = maxMoney == currentMoney;\\n\\n    let minSecurity = ns.getServerMinSecurityLevel(target);\\n    let currentSecurity = ns.getServerSecurityLevel(target);\\n    let securityReady = minSecurity == currentSecurity;\\n\\n    if (moneyReady && securityReady) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction unlockServer(ns, target) {\\n    try {\\n        ns.brutessh(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.ftpcrack(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.relaysmtp(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.httpworm(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.sqlinject(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    ns.nuke(target);\\n}\\n\\nfunction startBatch(ns, target, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\tns.exec(\\\"scripts/110-batch.js\\\", server.hostname, 1, target, threads, preparingServer);\\n}\",\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/7b30800c-851e-4c34-afc5-903e64301d7d\",\"moduleSequenceNumber\":759}],\"dependents\":[],\"ramUsage\":5.75,\"server\":\"pserv-009\",\"moduleSequenceNumber\":759,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet maxThreads = ns.args[1];\\n\\tlet preparingServer = ns.args[2] | false;\\n\\n\\tlet times = getTimes(ns, target);\\n\\tlet threads = getThreads(ns, target, maxThreads);\\n\\n\\tlet validThreads = Object.keys(threads).every( n => threads[n] >= 1);\\n\\t// ns.tprint(validThreads);\\n\\tif (validThreads) {\\n\\t\\tawait runBatch(ns, target, times, threads, preparingServer);\\n\\t}\\n}\\n\\nfunction getTimes(ns, target) {\\n\\t// Get run times for server.\\n\\tlet wTime = ns.getWeakenTime(target);\\n\\tlet gTime = ns.getGrowTime(target);\\n\\tlet hTime = ns.getHackTime(target);\\n\\tlet times = {\\n\\t\\tw: wTime,\\n\\t\\tg: gTime,\\n\\t\\th: hTime,\\n\\t\\toffset: 200\\n\\t}\\n\\n\\treturn times;\\n}\\n\\nfunction getThreads(ns, target, maxThreads) {\\n\\tlet multiplier = 2\\n\\n\\t// Get ideal number of threads for preferred hack amount.\\n\\tlet maxHackAmount = ns.getServerMaxMoney(target) / multiplier;\\n\\tlet hackThreads = ns.hackAnalyzeThreads(target, maxHackAmount);\\n\\tlet hackSecurityEffect = ns.hackAnalyzeSecurity(hackThreads);\\n\\n\\t// First weaken reduces security after hack. Calculate threads needed.\\n\\tlet firstWeakenEffect = 0;\\n\\tlet firstWeakenThreads = hackThreads\\n\\twhile (firstWeakenEffect < hackSecurityEffect) {\\n\\t\\tfirstWeakenEffect = ns.weakenAnalyze(firstWeakenThreads);\\n\\t\\tfirstWeakenThreads++;\\n\\t}\\n\\n\\t// Get grow threads needed to bring back up to full.\\n\\tlet growThreads = ns.growthAnalyze(target, multiplier);\\n\\tlet growSecurityEffect = ns.growthAnalyzeSecurity(growThreads);\\n\\n\\t// Second weaken reduces security after growth. Calculate threads needed.\\n\\tlet secondWeakenEffect = 0;\\n\\tlet secondWeakenThreads = growThreads\\n\\twhile (secondWeakenEffect < growSecurityEffect) {\\n\\t\\tsecondWeakenEffect = ns.weakenAnalyze(secondWeakenThreads);\\n\\t\\tsecondWeakenThreads++;\\n\\t}\\n\\n\\t// Scale down if this would use more threads than the maximum allowed.\\n\\tlet totalThreads = hackThreads + growThreads + firstWeakenThreads + secondWeakenThreads;\\n\\tif (totalThreads > maxThreads) {\\n\\t\\tlet ratio = (maxThreads / totalThreads) * 0.8;\\n\\t\\t\\n\\t\\thackThreads = hackThreads * ratio;\\n\\t\\tgrowThreads = growThreads * ratio;\\n\\t\\tfirstWeakenThreads = firstWeakenThreads * ratio;\\n\\t\\tsecondWeakenThreads = secondWeakenThreads * ratio;\\n\\t}\\n\\n\\tif (hackThreads < 1) {\\n\\t\\thackThreads = 1;\\n\\t}\\n\\tif (growThreads < 1) {\\n\\t\\tgrowThreads = 1;\\n\\t}\\n\\tif (firstWeakenThreads < 1) {\\n\\t\\tfirstWeakenThreads = 1;\\n\\t}\\n\\tif (secondWeakenThreads < 1) {\\n\\t\\tsecondWeakenThreads = 1;\\n\\t}\\n\\n\\tlet threads = {\\n\\t\\tw1: firstWeakenThreads,\\n\\t\\tw2: secondWeakenThreads,\\n\\t\\tg: growThreads,\\n\\t\\th: hackThreads\\n\\t}\\n\\n\\treturn threads;\\n}\\n\\nasync function runBatch(ns, target, times, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\t// Finish order:\\n\\t// 1. Hack\\n\\t// 2. Weaken\\n\\t// 3. Grow\\n\\t// 4. Weaken\\n\\n\\tlet w1Sleep = times.offset;\\n\\tlet w2Sleep = 3 * times.offset;\\n\\tlet gSleep = (times.w - times.g) + (times.offset * 2) - w2Sleep;\\n\\tlet hSleep = (times.w - times.h) - (w2Sleep + gSleep);\\n\\n\\tawait ns.sleep(w1Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w1, target);\\n\\t\\n\\tawait ns.sleep(w2Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w2, target);\\n\\t\\n\\tawait ns.sleep(gSleep);\\n\\tns.exec(\\\"scripts/112-grow.js\\\", server.hostname, threads.g, target);\\n\\t\\n\\tif (!preparingServer) {\\n\\t\\tawait ns.sleep(hSleep);\\n\\t\\tns.exec(\\\"scripts/111-hack.js\\\", server.hostname, threads.h, target);\\n\\t}\\n}\",\"filename\":\"/scripts/110-batch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/4ff0d905-1772-4d4f-9b5b-d1911feb4448\",\"moduleSequenceNumber\":760}],\"dependents\":[],\"ramUsage\":10.15,\"server\":\"pserv-009\",\"moduleSequenceNumber\":760,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.hack(target);\\t\\n}\",\"filename\":\"/scripts/111-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-009\",\"moduleSequenceNumber\":756,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"/scripts/112-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/d146a99c-0aab-4a61-914f-85acca575c52\",\"moduleSequenceNumber\":847}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-009\",\"moduleSequenceNumber\":847,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"/scripts/113-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/7cbbdbbb-4d73-45c1-a1bd-a29028022804\",\"moduleSequenceNumber\":761}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-009\",\"moduleSequenceNumber\":761,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-010\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-010\",\"httpPortOpen\":false,\"ip\":\"59.0.7.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":681.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"/scripts/100-batch-controller.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":275.6099999999929,\"pid\":6571,\"ramUsage\":5.75,\"server\":\"pserv-010\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/c9c9e9c5-23fe-43bf-8db9-b053002e033e\",\"moduleSequenceNumber\":844}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":96.61000000000084,\"pid\":8114,\"ramUsage\":1.75,\"server\":\"pserv-010\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/3f569423-2ab3-4ba2-b082-5b25c6356917\",\"moduleSequenceNumber\":846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":96.01000000000083,\"pid\":8123,\"ramUsage\":1.75,\"server\":\"pserv-010\",\"threads\":193,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/3f569423-2ab3-4ba2-b082-5b25c6356917\",\"moduleSequenceNumber\":846}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":72.21000000000049,\"pid\":8390,\"ramUsage\":1.75,\"server\":\"pserv-010\",\"threads\":192,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/1f4664d8-467e-4c5e-900d-6a1a9ce07c2c\",\"moduleSequenceNumber\":938}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet debug = ns.args[0];\\n\\n\\tif (debug) {\\n\\t\\tawait earn(ns);\\n\\t} else {\\n\\t\\twhile (true) {\\n\\t\\t\\tawait earn(ns);\\n\\t\\t\\tawait ns.sleep(60000);\\n\\t\\t}\\n\\t}\\n}\\n\\nasync function earn(ns) {\\n\\tlet pservLimit = ns.getPurchasedServerLimit();\\n\\tlet maxServerRam = ns.getPurchasedServerMaxRam();\\n\\tlet maxServerCost = ns.getPurchasedServerCost(maxServerRam);\\n\\tlet money = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet pservs = ns.getPurchasedServers();\\n\\t\\n\\t// Identify targets, in order of best to hack.\\n\\tlet targets = getTargets(ns);\\n\\n\\t// Make sure that \\\"home\\\" is hacking the one at the target\\n\\t// top of the list.\\n\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", targets[0].hostname);\\n\\tif (!correctTarget) {\\n\\t\\t// Kill all scripts except this one.\\n\\t\\tlet currentScripts = ns.ps(\\\"home\\\");\\n\\t\\tlet batchScripts = currentScripts.filter( s => {\\n\\t\\t\\treturn s.filename != ns.getScriptName();\\n\\t\\t});\\n\\t\\tbatchScripts.forEach(s => {\\n\\t\\t\\tns.kill(s.pid);\\n\\t\\t});\\n\\n\\t\\t// Start with the correct one!\\n\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", 1, targets[0].hostname);\\n\\t}\\n\\n\\t// Buy a maxed out server to hack other targets.\\n\\tif (money >= maxServerCost && pservs.length < pservLimit) {\\n\\t\\tlet i = pservs.length + 1;\\n\\t\\tlet suffix = \\\"000\\\";\\n\\n\\t\\tif (i < 10) {\\n\\t\\t\\tsuffix = \\\"00\\\" + i.toString();\\n\\t\\t} else if (i < 100) {\\n\\t\\t\\tsuffix = \\\"0\\\" + i.toString();\\n\\t\\t} else {\\n\\t\\t\\tsuffix = i.toString();\\n\\t\\t}\\n\\n\\t\\tlet hostname = \\\"pserv-\\\" + suffix;\\n\\t\\tns.purchaseServer(hostname, ns.getPurchasedServerMaxRam());\\n\\t}\\n\\n\\t// Starting hacking using purchased servers.\\n\\t// Get pservs again.\\n\\tpservs = ns.getPurchasedServers();\\n\\n\\tfor (let n in pservs) {\\n\\t\\tlet p = pservs[n]\\n\\t\\t// Make sure pserv has the latest scripts.\\n\\t\\t// Get scripts on home and on server.\\n\\t\\tlet homeScripts = ns.ls(\\\"home\\\", \\\"/scripts/\\\");\\n\\t\\t\\n\\t\\t// Copy all scripts back to server.\\n\\t\\tawait ns.scp(homeScripts, p);\\n\\n\\t\\tlet i = parseInt(p.split(\\\"-\\\").pop());\\n\\t\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", p, targets[i].hostname);\\n\\t\\tif (!correctTarget) {\\n\\t\\t\\t// Kill all scripts on the server.\\n\\t\\t\\tns.killall(p);\\n\\n\\t\\t\\t// Start with the correct one!\\n\\t\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", p, 1, targets[i].hostname);\\n\\t\\t}\\n\\t}\\t\\n}\\n\\nfunction getTargets(ns) {\\n\\t// TODO: Having to cap infinite loop arbitrarily. Struggling\\n\\t// to get the scanQueue to remove a server once scanned.\\n\\n\\tlet targets = [];\\n\\tlet scanQueue = [];\\n\\tlet scanned = [];\\n\\n\\tlet levelOneTargets = ns.scan();\\n\\tlevelOneTargets.forEach( t => {\\n\\t\\tlet server = ns.getServer(t);\\n\\t\\tif (!server.purchasedByPlayer && t !== \\\"home\\\" && t !== \\\"darkweb\\\") {\\n\\t\\t\\ttargets.push(t);\\n\\t\\t\\tscanQueue.push(t);\\n\\t\\t}\\n\\t});\\n\\t\\n\\tlet i = 0\\n\\twhile (scanQueue.length > 0 && i < 30) {\\n\\t\\tlet results = [];\\n\\n\\t\\tscanQueue.forEach( t => {\\n\\t\\t\\tlet result = ns.scan(t);\\n\\t\\t\\tresult.forEach( server => {\\n\\t\\t\\t\\tresults.push(server)\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\t// Do something with results.\\n\\t\\tlet uniqueResults = [...new Set(results)];\\n\\t\\tuniqueResults.forEach( async r => {\\n\\t\\t\\tif (r in scanned === false) {\\n\\t\\t\\t\\ttargets.push(r);\\t\\n\\t\\t\\t\\tscanQueue.push(r);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\ti++;\\n\\t};\\n\\n\\tlet uniqueTargets = [...new Set(targets)];\\n\\n\\tlet targetServers = [];\\n\\tuniqueTargets.forEach( t => {\\n\\t\\ttargetServers.push(ns.getServer(t));\\n\\t});\\n\\n\\tlet hackableTargets = getHackableTargets(ns, targetServers);\\n\\tlet orderedTargets = getOrderedTargets(ns, hackableTargets);\\n\\n\\treturn orderedTargets;\\n}\\n\\nfunction getHackableTargets(ns, targets) {\\n\\t// Conditions\\n\\t//\\t- Player hacking skill must be greater than skill required.\\n\\t//\\t- Max possible money must be greater than zero.\\n\\n\\tlet hackingSkill = ns.getHackingLevel();\\n\\n\\tlet hackableTargets = targets.filter( t => {\\n\\t\\treturn hackingSkill >= t.requiredHackingSkill && ns.getServerMaxMoney(t.hostname) > 0;\\n\\t});\\n\\n\\treturn hackableTargets;\\n}\\n\\nfunction getOrderedTargets(ns, hackableTargets) {\\n\\t// Score is the maximum dollars per second.\\n\\t// This is not the same rate that will be effected in\\n\\t// practice, as this would drain the server of all money.\\n\\n\\tlet scoredTargets = [];\\n\\n\\thackableTargets.forEach( h => {\\n\\t\\tlet maxMoney = ns.getServerMaxMoney(h.hostname);\\n\\t\\tlet batchTime = ns.getWeakenTime(h.hostname) + 1000; // Weaken always takes longest.\\n\\t\\tlet score = maxMoney / batchTime;\\n\\t\\tscoredTargets.push({\\n\\t\\t\\thostname: h.hostname,\\n\\t\\t\\tscore: score\\n\\t\\t});\\n\\t});\\n\\n\\tlet orderedTargets = scoredTargets.sort( (a, b) => {\\n\\t\\treturn b.score - a.score;\\n\\t});\\n\\n\\tlet orderedTargetServers = [];\\n\\torderedTargets.forEach( o => {\\n\\t\\torderedTargetServers.push(ns.getServer(o.hostname));\\n\\t});\\n\\n\\treturn orderedTargets;\\n}\",\"filename\":\"/scripts/000-master-controller.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":12.35,\"server\":\"pserv-010\",\"moduleSequenceNumber\":838,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet server = ns.getServer();\\n\\n\\tlet maxThreads = Math.trunc(ns.getServerMaxRam(server.hostname) / 2);\\n\\tlet offset = 200;\\n\\n\\t// Prepare server.\\n\\tunlockServer(ns, target);\\n\\n\\tlet serverReady = false\\n\\twhile (!serverReady) {\\n\\t\\tstartBatch(ns, target, maxThreads, true);\\n        serverReady = getServerStatus(ns, target);\\n\\t\\tif (!serverReady) {\\n            let waitTime = ns.getWeakenTime(target);\\n\\t\\t\\tawait ns.sleep(waitTime + (5 * offset));\\n\\t\\t}\\n\\t}\\n\\n\\t// Set up and run batches.\\n\\twhile (true) {\\n        let freeRam = ns.getServerMaxRam(server.hostname) - ns.getServerUsedRam(server.hostname);\\n        if (freeRam >= 20) {\\n            startBatch(ns, target, maxThreads, false);\\n            await ns.sleep(1000);\\n        } else {\\n            await ns.sleep(2000);\\n        }\\n\\t}\\n}\\n\\nfunction getServerStatus(ns, target) {\\n    let maxMoney = ns.getServerMaxMoney(target);\\n    let currentMoney = ns.getServerMoneyAvailable(target);\\n    let moneyReady = maxMoney == currentMoney;\\n\\n    let minSecurity = ns.getServerMinSecurityLevel(target);\\n    let currentSecurity = ns.getServerSecurityLevel(target);\\n    let securityReady = minSecurity == currentSecurity;\\n\\n    if (moneyReady && securityReady) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction unlockServer(ns, target) {\\n    try {\\n        ns.brutessh(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.ftpcrack(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.relaysmtp(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.httpworm(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.sqlinject(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    ns.nuke(target);\\n}\\n\\nfunction startBatch(ns, target, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\tns.exec(\\\"scripts/110-batch.js\\\", server.hostname, 1, target, threads, preparingServer);\\n}\",\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/c9c9e9c5-23fe-43bf-8db9-b053002e033e\",\"moduleSequenceNumber\":844}],\"dependents\":[],\"ramUsage\":5.75,\"server\":\"pserv-010\",\"moduleSequenceNumber\":844,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet maxThreads = ns.args[1];\\n\\tlet preparingServer = ns.args[2] | false;\\n\\n\\tlet times = getTimes(ns, target);\\n\\tlet threads = getThreads(ns, target, maxThreads);\\n\\n\\tlet validThreads = Object.keys(threads).every( n => threads[n] >= 1);\\n\\t// ns.tprint(validThreads);\\n\\tif (validThreads) {\\n\\t\\tawait runBatch(ns, target, times, threads, preparingServer);\\n\\t}\\n}\\n\\nfunction getTimes(ns, target) {\\n\\t// Get run times for server.\\n\\tlet wTime = ns.getWeakenTime(target);\\n\\tlet gTime = ns.getGrowTime(target);\\n\\tlet hTime = ns.getHackTime(target);\\n\\tlet times = {\\n\\t\\tw: wTime,\\n\\t\\tg: gTime,\\n\\t\\th: hTime,\\n\\t\\toffset: 200\\n\\t}\\n\\n\\treturn times;\\n}\\n\\nfunction getThreads(ns, target, maxThreads) {\\n\\tlet multiplier = 2\\n\\n\\t// Get ideal number of threads for preferred hack amount.\\n\\tlet maxHackAmount = ns.getServerMaxMoney(target) / multiplier;\\n\\tlet hackThreads = ns.hackAnalyzeThreads(target, maxHackAmount);\\n\\tlet hackSecurityEffect = ns.hackAnalyzeSecurity(hackThreads);\\n\\n\\t// First weaken reduces security after hack. Calculate threads needed.\\n\\tlet firstWeakenEffect = 0;\\n\\tlet firstWeakenThreads = hackThreads\\n\\twhile (firstWeakenEffect < hackSecurityEffect) {\\n\\t\\tfirstWeakenEffect = ns.weakenAnalyze(firstWeakenThreads);\\n\\t\\tfirstWeakenThreads++;\\n\\t}\\n\\n\\t// Get grow threads needed to bring back up to full.\\n\\tlet growThreads = ns.growthAnalyze(target, multiplier);\\n\\tlet growSecurityEffect = ns.growthAnalyzeSecurity(growThreads);\\n\\n\\t// Second weaken reduces security after growth. Calculate threads needed.\\n\\tlet secondWeakenEffect = 0;\\n\\tlet secondWeakenThreads = growThreads\\n\\twhile (secondWeakenEffect < growSecurityEffect) {\\n\\t\\tsecondWeakenEffect = ns.weakenAnalyze(secondWeakenThreads);\\n\\t\\tsecondWeakenThreads++;\\n\\t}\\n\\n\\t// Scale down if this would use more threads than the maximum allowed.\\n\\tlet totalThreads = hackThreads + growThreads + firstWeakenThreads + secondWeakenThreads;\\n\\tif (totalThreads > maxThreads) {\\n\\t\\tlet ratio = (maxThreads / totalThreads) * 0.8;\\n\\t\\t\\n\\t\\thackThreads = hackThreads * ratio;\\n\\t\\tgrowThreads = growThreads * ratio;\\n\\t\\tfirstWeakenThreads = firstWeakenThreads * ratio;\\n\\t\\tsecondWeakenThreads = secondWeakenThreads * ratio;\\n\\t}\\n\\n\\tif (hackThreads < 1) {\\n\\t\\thackThreads = 1;\\n\\t}\\n\\tif (growThreads < 1) {\\n\\t\\tgrowThreads = 1;\\n\\t}\\n\\tif (firstWeakenThreads < 1) {\\n\\t\\tfirstWeakenThreads = 1;\\n\\t}\\n\\tif (secondWeakenThreads < 1) {\\n\\t\\tsecondWeakenThreads = 1;\\n\\t}\\n\\n\\tlet threads = {\\n\\t\\tw1: firstWeakenThreads,\\n\\t\\tw2: secondWeakenThreads,\\n\\t\\tg: growThreads,\\n\\t\\th: hackThreads\\n\\t}\\n\\n\\treturn threads;\\n}\\n\\nasync function runBatch(ns, target, times, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\t// Finish order:\\n\\t// 1. Hack\\n\\t// 2. Weaken\\n\\t// 3. Grow\\n\\t// 4. Weaken\\n\\n\\tlet w1Sleep = times.offset;\\n\\tlet w2Sleep = 3 * times.offset;\\n\\tlet gSleep = (times.w - times.g) + (times.offset * 2) - w2Sleep;\\n\\tlet hSleep = (times.w - times.h) - (w2Sleep + gSleep);\\n\\n\\tawait ns.sleep(w1Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w1, target);\\n\\t\\n\\tawait ns.sleep(w2Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w2, target);\\n\\t\\n\\tawait ns.sleep(gSleep);\\n\\tns.exec(\\\"scripts/112-grow.js\\\", server.hostname, threads.g, target);\\n\\t\\n\\tif (!preparingServer) {\\n\\t\\tawait ns.sleep(hSleep);\\n\\t\\tns.exec(\\\"scripts/111-hack.js\\\", server.hostname, threads.h, target);\\n\\t}\\n}\",\"filename\":\"/scripts/110-batch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/3b0ca300-03b2-4280-be26-e9efcd2ba38e\",\"moduleSequenceNumber\":845}],\"dependents\":[],\"ramUsage\":10.15,\"server\":\"pserv-010\",\"moduleSequenceNumber\":845,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.hack(target);\\t\\n}\",\"filename\":\"/scripts/111-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-010\",\"moduleSequenceNumber\":841,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"/scripts/112-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/1f4664d8-467e-4c5e-900d-6a1a9ce07c2c\",\"moduleSequenceNumber\":938}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-010\",\"moduleSequenceNumber\":938,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"/scripts/113-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/3f569423-2ab3-4ba2-b082-5b25c6356917\",\"moduleSequenceNumber\":846}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-010\",\"moduleSequenceNumber\":846,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-011\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-011\",\"httpPortOpen\":false,\"ip\":\"30.4.3.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1080.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"/scripts/100-batch-controller.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.209999999999965,\"pid\":8777,\"ramUsage\":5.75,\"server\":\"pserv-011\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/9d8a0de7-35ee-4d15-8f17-6093008cbcff\",\"moduleSequenceNumber\":935}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.00999999999996,\"pid\":8797,\"ramUsage\":1.75,\"server\":\"pserv-011\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/4b4c662e-0e01-49d1-b8c1-ed16b990c9f0\",\"moduleSequenceNumber\":937}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.409999999999954,\"pid\":8815,\"ramUsage\":1.75,\"server\":\"pserv-011\",\"threads\":307,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/4b4c662e-0e01-49d1-b8c1-ed16b990c9f0\",\"moduleSequenceNumber\":937}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.409999999999954,\"pid\":8947,\"ramUsage\":1.75,\"server\":\"pserv-011\",\"threads\":306,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/5c1c7677-c76c-4954-99a0-91e97d0a53c5\",\"moduleSequenceNumber\":1020}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet debug = ns.args[0];\\n\\n\\tif (debug) {\\n\\t\\tawait earn(ns);\\n\\t} else {\\n\\t\\twhile (true) {\\n\\t\\t\\tawait earn(ns);\\n\\t\\t\\tawait ns.sleep(60000);\\n\\t\\t}\\n\\t}\\n}\\n\\nasync function earn(ns) {\\n\\tlet pservLimit = ns.getPurchasedServerLimit();\\n\\tlet maxServerRam = ns.getPurchasedServerMaxRam();\\n\\tlet maxServerCost = ns.getPurchasedServerCost(maxServerRam);\\n\\tlet money = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet pservs = ns.getPurchasedServers();\\n\\t\\n\\t// Identify targets, in order of best to hack.\\n\\tlet targets = getTargets(ns);\\n\\n\\t// Make sure that \\\"home\\\" is hacking the one at the target\\n\\t// top of the list.\\n\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", targets[0].hostname);\\n\\tif (!correctTarget) {\\n\\t\\t// Kill all scripts except this one.\\n\\t\\tlet currentScripts = ns.ps(\\\"home\\\");\\n\\t\\tlet batchScripts = currentScripts.filter( s => {\\n\\t\\t\\treturn s.filename != ns.getScriptName();\\n\\t\\t});\\n\\t\\tbatchScripts.forEach(s => {\\n\\t\\t\\tns.kill(s.pid);\\n\\t\\t});\\n\\n\\t\\t// Start with the correct one!\\n\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", 1, targets[0].hostname);\\n\\t}\\n\\n\\t// Buy a maxed out server to hack other targets.\\n\\tif (money >= maxServerCost && pservs.length < pservLimit) {\\n\\t\\tlet i = pservs.length + 1;\\n\\t\\tlet suffix = \\\"000\\\";\\n\\n\\t\\tif (i < 10) {\\n\\t\\t\\tsuffix = \\\"00\\\" + i.toString();\\n\\t\\t} else if (i < 100) {\\n\\t\\t\\tsuffix = \\\"0\\\" + i.toString();\\n\\t\\t} else {\\n\\t\\t\\tsuffix = i.toString();\\n\\t\\t}\\n\\n\\t\\tlet hostname = \\\"pserv-\\\" + suffix;\\n\\t\\tns.purchaseServer(hostname, ns.getPurchasedServerMaxRam());\\n\\t}\\n\\n\\t// Starting hacking using purchased servers.\\n\\t// Get pservs again.\\n\\tpservs = ns.getPurchasedServers();\\n\\n\\tfor (let n in pservs) {\\n\\t\\tlet p = pservs[n]\\n\\t\\t// Make sure pserv has the latest scripts.\\n\\t\\t// Get scripts on home and on server.\\n\\t\\tlet homeScripts = ns.ls(\\\"home\\\", \\\"/scripts/\\\");\\n\\t\\t\\n\\t\\t// Copy all scripts back to server.\\n\\t\\tawait ns.scp(homeScripts, p);\\n\\n\\t\\tlet i = parseInt(p.split(\\\"-\\\").pop());\\n\\t\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", p, targets[i].hostname);\\n\\t\\tif (!correctTarget) {\\n\\t\\t\\t// Kill all scripts on the server.\\n\\t\\t\\tns.killall(p);\\n\\n\\t\\t\\t// Start with the correct one!\\n\\t\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", p, 1, targets[i].hostname);\\n\\t\\t}\\n\\t}\\t\\n}\\n\\nfunction getTargets(ns) {\\n\\t// TODO: Having to cap infinite loop arbitrarily. Struggling\\n\\t// to get the scanQueue to remove a server once scanned.\\n\\n\\tlet targets = [];\\n\\tlet scanQueue = [];\\n\\tlet scanned = [];\\n\\n\\tlet levelOneTargets = ns.scan();\\n\\tlevelOneTargets.forEach( t => {\\n\\t\\tlet server = ns.getServer(t);\\n\\t\\tif (!server.purchasedByPlayer && t !== \\\"home\\\" && t !== \\\"darkweb\\\") {\\n\\t\\t\\ttargets.push(t);\\n\\t\\t\\tscanQueue.push(t);\\n\\t\\t}\\n\\t});\\n\\t\\n\\tlet i = 0\\n\\twhile (scanQueue.length > 0 && i < 30) {\\n\\t\\tlet results = [];\\n\\n\\t\\tscanQueue.forEach( t => {\\n\\t\\t\\tlet result = ns.scan(t);\\n\\t\\t\\tresult.forEach( server => {\\n\\t\\t\\t\\tresults.push(server)\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\t// Do something with results.\\n\\t\\tlet uniqueResults = [...new Set(results)];\\n\\t\\tuniqueResults.forEach( async r => {\\n\\t\\t\\tif (r in scanned === false) {\\n\\t\\t\\t\\ttargets.push(r);\\t\\n\\t\\t\\t\\tscanQueue.push(r);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\ti++;\\n\\t};\\n\\n\\tlet uniqueTargets = [...new Set(targets)];\\n\\n\\tlet targetServers = [];\\n\\tuniqueTargets.forEach( t => {\\n\\t\\ttargetServers.push(ns.getServer(t));\\n\\t});\\n\\n\\tlet hackableTargets = getHackableTargets(ns, targetServers);\\n\\tlet orderedTargets = getOrderedTargets(ns, hackableTargets);\\n\\n\\treturn orderedTargets;\\n}\\n\\nfunction getHackableTargets(ns, targets) {\\n\\t// Conditions\\n\\t//\\t- Player hacking skill must be greater than skill required.\\n\\t//\\t- Max possible money must be greater than zero.\\n\\n\\tlet hackingSkill = ns.getHackingLevel();\\n\\n\\tlet hackableTargets = targets.filter( t => {\\n\\t\\treturn hackingSkill >= t.requiredHackingSkill && ns.getServerMaxMoney(t.hostname) > 0;\\n\\t});\\n\\n\\treturn hackableTargets;\\n}\\n\\nfunction getOrderedTargets(ns, hackableTargets) {\\n\\t// Score is the maximum dollars per second.\\n\\t// This is not the same rate that will be effected in\\n\\t// practice, as this would drain the server of all money.\\n\\n\\tlet scoredTargets = [];\\n\\n\\thackableTargets.forEach( h => {\\n\\t\\tlet maxMoney = ns.getServerMaxMoney(h.hostname);\\n\\t\\tlet batchTime = ns.getWeakenTime(h.hostname) + 1000; // Weaken always takes longest.\\n\\t\\tlet score = maxMoney / batchTime;\\n\\t\\tscoredTargets.push({\\n\\t\\t\\thostname: h.hostname,\\n\\t\\t\\tscore: score\\n\\t\\t});\\n\\t});\\n\\n\\tlet orderedTargets = scoredTargets.sort( (a, b) => {\\n\\t\\treturn b.score - a.score;\\n\\t});\\n\\n\\tlet orderedTargetServers = [];\\n\\torderedTargets.forEach( o => {\\n\\t\\torderedTargetServers.push(ns.getServer(o.hostname));\\n\\t});\\n\\n\\treturn orderedTargets;\\n}\",\"filename\":\"/scripts/000-master-controller.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":12.35,\"server\":\"pserv-011\",\"moduleSequenceNumber\":929,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet server = ns.getServer();\\n\\n\\tlet maxThreads = Math.trunc(ns.getServerMaxRam(server.hostname) / 2);\\n\\tlet offset = 200;\\n\\n\\t// Prepare server.\\n\\tunlockServer(ns, target);\\n\\n\\tlet serverReady = false\\n\\twhile (!serverReady) {\\n\\t\\tstartBatch(ns, target, maxThreads, true);\\n        serverReady = getServerStatus(ns, target);\\n\\t\\tif (!serverReady) {\\n            let waitTime = ns.getWeakenTime(target);\\n\\t\\t\\tawait ns.sleep(waitTime + (5 * offset));\\n\\t\\t}\\n\\t}\\n\\n\\t// Set up and run batches.\\n\\twhile (true) {\\n        let freeRam = ns.getServerMaxRam(server.hostname) - ns.getServerUsedRam(server.hostname);\\n        if (freeRam >= 20) {\\n            startBatch(ns, target, maxThreads, false);\\n            await ns.sleep(1000);\\n        } else {\\n            await ns.sleep(2000);\\n        }\\n\\t}\\n}\\n\\nfunction getServerStatus(ns, target) {\\n    let maxMoney = ns.getServerMaxMoney(target);\\n    let currentMoney = ns.getServerMoneyAvailable(target);\\n    let moneyReady = maxMoney == currentMoney;\\n\\n    let minSecurity = ns.getServerMinSecurityLevel(target);\\n    let currentSecurity = ns.getServerSecurityLevel(target);\\n    let securityReady = minSecurity == currentSecurity;\\n\\n    if (moneyReady && securityReady) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction unlockServer(ns, target) {\\n    try {\\n        ns.brutessh(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.ftpcrack(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.relaysmtp(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.httpworm(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.sqlinject(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    ns.nuke(target);\\n}\\n\\nfunction startBatch(ns, target, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\tns.exec(\\\"scripts/110-batch.js\\\", server.hostname, 1, target, threads, preparingServer);\\n}\",\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/9d8a0de7-35ee-4d15-8f17-6093008cbcff\",\"moduleSequenceNumber\":935}],\"dependents\":[],\"ramUsage\":5.75,\"server\":\"pserv-011\",\"moduleSequenceNumber\":935,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet maxThreads = ns.args[1];\\n\\tlet preparingServer = ns.args[2] | false;\\n\\n\\tlet times = getTimes(ns, target);\\n\\tlet threads = getThreads(ns, target, maxThreads);\\n\\n\\tlet validThreads = Object.keys(threads).every( n => threads[n] >= 1);\\n\\t// ns.tprint(validThreads);\\n\\tif (validThreads) {\\n\\t\\tawait runBatch(ns, target, times, threads, preparingServer);\\n\\t}\\n}\\n\\nfunction getTimes(ns, target) {\\n\\t// Get run times for server.\\n\\tlet wTime = ns.getWeakenTime(target);\\n\\tlet gTime = ns.getGrowTime(target);\\n\\tlet hTime = ns.getHackTime(target);\\n\\tlet times = {\\n\\t\\tw: wTime,\\n\\t\\tg: gTime,\\n\\t\\th: hTime,\\n\\t\\toffset: 200\\n\\t}\\n\\n\\treturn times;\\n}\\n\\nfunction getThreads(ns, target, maxThreads) {\\n\\tlet multiplier = 2\\n\\n\\t// Get ideal number of threads for preferred hack amount.\\n\\tlet maxHackAmount = ns.getServerMaxMoney(target) / multiplier;\\n\\tlet hackThreads = ns.hackAnalyzeThreads(target, maxHackAmount);\\n\\tlet hackSecurityEffect = ns.hackAnalyzeSecurity(hackThreads);\\n\\n\\t// First weaken reduces security after hack. Calculate threads needed.\\n\\tlet firstWeakenEffect = 0;\\n\\tlet firstWeakenThreads = hackThreads\\n\\twhile (firstWeakenEffect < hackSecurityEffect) {\\n\\t\\tfirstWeakenEffect = ns.weakenAnalyze(firstWeakenThreads);\\n\\t\\tfirstWeakenThreads++;\\n\\t}\\n\\n\\t// Get grow threads needed to bring back up to full.\\n\\tlet growThreads = ns.growthAnalyze(target, multiplier);\\n\\tlet growSecurityEffect = ns.growthAnalyzeSecurity(growThreads);\\n\\n\\t// Second weaken reduces security after growth. Calculate threads needed.\\n\\tlet secondWeakenEffect = 0;\\n\\tlet secondWeakenThreads = growThreads\\n\\twhile (secondWeakenEffect < growSecurityEffect) {\\n\\t\\tsecondWeakenEffect = ns.weakenAnalyze(secondWeakenThreads);\\n\\t\\tsecondWeakenThreads++;\\n\\t}\\n\\n\\t// Scale down if this would use more threads than the maximum allowed.\\n\\tlet totalThreads = hackThreads + growThreads + firstWeakenThreads + secondWeakenThreads;\\n\\tif (totalThreads > maxThreads) {\\n\\t\\tlet ratio = (maxThreads / totalThreads) * 0.8;\\n\\t\\t\\n\\t\\thackThreads = hackThreads * ratio;\\n\\t\\tgrowThreads = growThreads * ratio;\\n\\t\\tfirstWeakenThreads = firstWeakenThreads * ratio;\\n\\t\\tsecondWeakenThreads = secondWeakenThreads * ratio;\\n\\t}\\n\\n\\tif (hackThreads < 1) {\\n\\t\\thackThreads = 1;\\n\\t}\\n\\tif (growThreads < 1) {\\n\\t\\tgrowThreads = 1;\\n\\t}\\n\\tif (firstWeakenThreads < 1) {\\n\\t\\tfirstWeakenThreads = 1;\\n\\t}\\n\\tif (secondWeakenThreads < 1) {\\n\\t\\tsecondWeakenThreads = 1;\\n\\t}\\n\\n\\tlet threads = {\\n\\t\\tw1: firstWeakenThreads,\\n\\t\\tw2: secondWeakenThreads,\\n\\t\\tg: growThreads,\\n\\t\\th: hackThreads\\n\\t}\\n\\n\\treturn threads;\\n}\\n\\nasync function runBatch(ns, target, times, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\t// Finish order:\\n\\t// 1. Hack\\n\\t// 2. Weaken\\n\\t// 3. Grow\\n\\t// 4. Weaken\\n\\n\\tlet w1Sleep = times.offset;\\n\\tlet w2Sleep = 3 * times.offset;\\n\\tlet gSleep = (times.w - times.g) + (times.offset * 2) - w2Sleep;\\n\\tlet hSleep = (times.w - times.h) - (w2Sleep + gSleep);\\n\\n\\tawait ns.sleep(w1Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w1, target);\\n\\t\\n\\tawait ns.sleep(w2Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w2, target);\\n\\t\\n\\tawait ns.sleep(gSleep);\\n\\tns.exec(\\\"scripts/112-grow.js\\\", server.hostname, threads.g, target);\\n\\t\\n\\tif (!preparingServer) {\\n\\t\\tawait ns.sleep(hSleep);\\n\\t\\tns.exec(\\\"scripts/111-hack.js\\\", server.hostname, threads.h, target);\\n\\t}\\n}\",\"filename\":\"/scripts/110-batch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/a347cf6d-3c3b-450c-9c1c-d205589926ff\",\"moduleSequenceNumber\":936}],\"dependents\":[],\"ramUsage\":10.15,\"server\":\"pserv-011\",\"moduleSequenceNumber\":936,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.hack(target);\\t\\n}\",\"filename\":\"/scripts/111-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-011\",\"moduleSequenceNumber\":932,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"/scripts/112-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/5c1c7677-c76c-4954-99a0-91e97d0a53c5\",\"moduleSequenceNumber\":1020}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-011\",\"moduleSequenceNumber\":1020,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"/scripts/113-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/4b4c662e-0e01-49d1-b8c1-ed16b990c9f0\",\"moduleSequenceNumber\":937}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-011\",\"moduleSequenceNumber\":937,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-012\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-012\",\"httpPortOpen\":false,\"ip\":\"93.0.6.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1255.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"/scripts/100-batch-controller.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.209999999999965,\"pid\":8779,\"ramUsage\":5.75,\"server\":\"pserv-012\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/f6a7d08f-a665-4e49-8082-a6caebf40fb0\",\"moduleSequenceNumber\":1033}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.00999999999996,\"pid\":8798,\"ramUsage\":1.75,\"server\":\"pserv-012\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/189d0850-b27d-4124-9df5-9f1fa671ee08\",\"moduleSequenceNumber\":1035}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.409999999999954,\"pid\":8816,\"ramUsage\":1.75,\"server\":\"pserv-012\",\"threads\":357,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/189d0850-b27d-4124-9df5-9f1fa671ee08\",\"moduleSequenceNumber\":1035}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.209999999999983,\"pid\":9028,\"ramUsage\":1.75,\"server\":\"pserv-012\",\"threads\":356,\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/89b831cf-d153-432f-ba5e-617af4e99310\",\"moduleSequenceNumber\":1123}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet debug = ns.args[0];\\n\\n\\tif (debug) {\\n\\t\\tawait earn(ns);\\n\\t} else {\\n\\t\\twhile (true) {\\n\\t\\t\\tawait earn(ns);\\n\\t\\t\\tawait ns.sleep(60000);\\n\\t\\t}\\n\\t}\\n}\\n\\nasync function earn(ns) {\\n\\tlet pservLimit = ns.getPurchasedServerLimit();\\n\\tlet maxServerRam = ns.getPurchasedServerMaxRam();\\n\\tlet maxServerCost = ns.getPurchasedServerCost(maxServerRam);\\n\\tlet money = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet pservs = ns.getPurchasedServers();\\n\\t\\n\\t// Identify targets, in order of best to hack.\\n\\tlet targets = getTargets(ns);\\n\\n\\t// Make sure that \\\"home\\\" is hacking the one at the target\\n\\t// top of the list.\\n\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", targets[0].hostname);\\n\\tif (!correctTarget) {\\n\\t\\t// Kill all scripts except this one.\\n\\t\\tlet currentScripts = ns.ps(\\\"home\\\");\\n\\t\\tlet batchScripts = currentScripts.filter( s => {\\n\\t\\t\\treturn s.filename != ns.getScriptName();\\n\\t\\t});\\n\\t\\tbatchScripts.forEach(s => {\\n\\t\\t\\tns.kill(s.pid);\\n\\t\\t});\\n\\n\\t\\t// Start with the correct one!\\n\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", 1, targets[0].hostname);\\n\\t}\\n\\n\\t// Buy a maxed out server to hack other targets.\\n\\tif (money >= maxServerCost && pservs.length < pservLimit) {\\n\\t\\tlet i = pservs.length + 1;\\n\\t\\tlet suffix = \\\"000\\\";\\n\\n\\t\\tif (i < 10) {\\n\\t\\t\\tsuffix = \\\"00\\\" + i.toString();\\n\\t\\t} else if (i < 100) {\\n\\t\\t\\tsuffix = \\\"0\\\" + i.toString();\\n\\t\\t} else {\\n\\t\\t\\tsuffix = i.toString();\\n\\t\\t}\\n\\n\\t\\tlet hostname = \\\"pserv-\\\" + suffix;\\n\\t\\tns.purchaseServer(hostname, ns.getPurchasedServerMaxRam());\\n\\t}\\n\\n\\t// Starting hacking using purchased servers.\\n\\t// Get pservs again.\\n\\tpservs = ns.getPurchasedServers();\\n\\n\\tfor (let n in pservs) {\\n\\t\\tlet p = pservs[n]\\n\\t\\t// Make sure pserv has the latest scripts.\\n\\t\\t// Get scripts on home and on server.\\n\\t\\tlet homeScripts = ns.ls(\\\"home\\\", \\\"/scripts/\\\");\\n\\t\\t\\n\\t\\t// Copy all scripts back to server.\\n\\t\\tawait ns.scp(homeScripts, p);\\n\\n\\t\\tlet i = parseInt(p.split(\\\"-\\\").pop());\\n\\t\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", p, targets[i].hostname);\\n\\t\\tif (!correctTarget) {\\n\\t\\t\\t// Kill all scripts on the server.\\n\\t\\t\\tns.killall(p);\\n\\n\\t\\t\\t// Start with the correct one!\\n\\t\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", p, 1, targets[i].hostname);\\n\\t\\t}\\n\\t}\\t\\n}\\n\\nfunction getTargets(ns) {\\n\\t// TODO: Having to cap infinite loop arbitrarily. Struggling\\n\\t// to get the scanQueue to remove a server once scanned.\\n\\n\\tlet targets = [];\\n\\tlet scanQueue = [];\\n\\tlet scanned = [];\\n\\n\\tlet levelOneTargets = ns.scan();\\n\\tlevelOneTargets.forEach( t => {\\n\\t\\tlet server = ns.getServer(t);\\n\\t\\tif (!server.purchasedByPlayer && t !== \\\"home\\\" && t !== \\\"darkweb\\\") {\\n\\t\\t\\ttargets.push(t);\\n\\t\\t\\tscanQueue.push(t);\\n\\t\\t}\\n\\t});\\n\\t\\n\\tlet i = 0\\n\\twhile (scanQueue.length > 0 && i < 30) {\\n\\t\\tlet results = [];\\n\\n\\t\\tscanQueue.forEach( t => {\\n\\t\\t\\tlet result = ns.scan(t);\\n\\t\\t\\tresult.forEach( server => {\\n\\t\\t\\t\\tresults.push(server)\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\t// Do something with results.\\n\\t\\tlet uniqueResults = [...new Set(results)];\\n\\t\\tuniqueResults.forEach( async r => {\\n\\t\\t\\tif (r in scanned === false) {\\n\\t\\t\\t\\ttargets.push(r);\\t\\n\\t\\t\\t\\tscanQueue.push(r);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\ti++;\\n\\t};\\n\\n\\tlet uniqueTargets = [...new Set(targets)];\\n\\n\\tlet targetServers = [];\\n\\tuniqueTargets.forEach( t => {\\n\\t\\ttargetServers.push(ns.getServer(t));\\n\\t});\\n\\n\\tlet hackableTargets = getHackableTargets(ns, targetServers);\\n\\tlet orderedTargets = getOrderedTargets(ns, hackableTargets);\\n\\n\\treturn orderedTargets;\\n}\\n\\nfunction getHackableTargets(ns, targets) {\\n\\t// Conditions\\n\\t//\\t- Player hacking skill must be greater than skill required.\\n\\t//\\t- Max possible money must be greater than zero.\\n\\n\\tlet hackingSkill = ns.getHackingLevel();\\n\\n\\tlet hackableTargets = targets.filter( t => {\\n\\t\\treturn hackingSkill >= t.requiredHackingSkill && ns.getServerMaxMoney(t.hostname) > 0;\\n\\t});\\n\\n\\treturn hackableTargets;\\n}\\n\\nfunction getOrderedTargets(ns, hackableTargets) {\\n\\t// Score is the maximum dollars per second.\\n\\t// This is not the same rate that will be effected in\\n\\t// practice, as this would drain the server of all money.\\n\\n\\tlet scoredTargets = [];\\n\\n\\thackableTargets.forEach( h => {\\n\\t\\tlet maxMoney = ns.getServerMaxMoney(h.hostname);\\n\\t\\tlet batchTime = ns.getWeakenTime(h.hostname) + 1000; // Weaken always takes longest.\\n\\t\\tlet score = maxMoney / batchTime;\\n\\t\\tscoredTargets.push({\\n\\t\\t\\thostname: h.hostname,\\n\\t\\t\\tscore: score\\n\\t\\t});\\n\\t});\\n\\n\\tlet orderedTargets = scoredTargets.sort( (a, b) => {\\n\\t\\treturn b.score - a.score;\\n\\t});\\n\\n\\tlet orderedTargetServers = [];\\n\\torderedTargets.forEach( o => {\\n\\t\\torderedTargetServers.push(ns.getServer(o.hostname));\\n\\t});\\n\\n\\treturn orderedTargets;\\n}\",\"filename\":\"/scripts/000-master-controller.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":12.35,\"server\":\"pserv-012\",\"moduleSequenceNumber\":1027,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet server = ns.getServer();\\n\\n\\tlet maxThreads = Math.trunc(ns.getServerMaxRam(server.hostname) / 2);\\n\\tlet offset = 200;\\n\\n\\t// Prepare server.\\n\\tunlockServer(ns, target);\\n\\n\\tlet serverReady = false\\n\\twhile (!serverReady) {\\n\\t\\tstartBatch(ns, target, maxThreads, true);\\n        serverReady = getServerStatus(ns, target);\\n\\t\\tif (!serverReady) {\\n            let waitTime = ns.getWeakenTime(target);\\n\\t\\t\\tawait ns.sleep(waitTime + (5 * offset));\\n\\t\\t}\\n\\t}\\n\\n\\t// Set up and run batches.\\n\\twhile (true) {\\n        let freeRam = ns.getServerMaxRam(server.hostname) - ns.getServerUsedRam(server.hostname);\\n        if (freeRam >= 20) {\\n            startBatch(ns, target, maxThreads, false);\\n            await ns.sleep(1000);\\n        } else {\\n            await ns.sleep(2000);\\n        }\\n\\t}\\n}\\n\\nfunction getServerStatus(ns, target) {\\n    let maxMoney = ns.getServerMaxMoney(target);\\n    let currentMoney = ns.getServerMoneyAvailable(target);\\n    let moneyReady = maxMoney == currentMoney;\\n\\n    let minSecurity = ns.getServerMinSecurityLevel(target);\\n    let currentSecurity = ns.getServerSecurityLevel(target);\\n    let securityReady = minSecurity == currentSecurity;\\n\\n    if (moneyReady && securityReady) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction unlockServer(ns, target) {\\n    try {\\n        ns.brutessh(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.ftpcrack(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.relaysmtp(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.httpworm(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.sqlinject(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    ns.nuke(target);\\n}\\n\\nfunction startBatch(ns, target, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\tns.exec(\\\"scripts/110-batch.js\\\", server.hostname, 1, target, threads, preparingServer);\\n}\",\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/f6a7d08f-a665-4e49-8082-a6caebf40fb0\",\"moduleSequenceNumber\":1033}],\"dependents\":[],\"ramUsage\":5.75,\"server\":\"pserv-012\",\"moduleSequenceNumber\":1033,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet maxThreads = ns.args[1];\\n\\tlet preparingServer = ns.args[2] | false;\\n\\n\\tlet times = getTimes(ns, target);\\n\\tlet threads = getThreads(ns, target, maxThreads);\\n\\n\\tlet validThreads = Object.keys(threads).every( n => threads[n] >= 1);\\n\\t// ns.tprint(validThreads);\\n\\tif (validThreads) {\\n\\t\\tawait runBatch(ns, target, times, threads, preparingServer);\\n\\t}\\n}\\n\\nfunction getTimes(ns, target) {\\n\\t// Get run times for server.\\n\\tlet wTime = ns.getWeakenTime(target);\\n\\tlet gTime = ns.getGrowTime(target);\\n\\tlet hTime = ns.getHackTime(target);\\n\\tlet times = {\\n\\t\\tw: wTime,\\n\\t\\tg: gTime,\\n\\t\\th: hTime,\\n\\t\\toffset: 200\\n\\t}\\n\\n\\treturn times;\\n}\\n\\nfunction getThreads(ns, target, maxThreads) {\\n\\tlet multiplier = 2\\n\\n\\t// Get ideal number of threads for preferred hack amount.\\n\\tlet maxHackAmount = ns.getServerMaxMoney(target) / multiplier;\\n\\tlet hackThreads = ns.hackAnalyzeThreads(target, maxHackAmount);\\n\\tlet hackSecurityEffect = ns.hackAnalyzeSecurity(hackThreads);\\n\\n\\t// First weaken reduces security after hack. Calculate threads needed.\\n\\tlet firstWeakenEffect = 0;\\n\\tlet firstWeakenThreads = hackThreads\\n\\twhile (firstWeakenEffect < hackSecurityEffect) {\\n\\t\\tfirstWeakenEffect = ns.weakenAnalyze(firstWeakenThreads);\\n\\t\\tfirstWeakenThreads++;\\n\\t}\\n\\n\\t// Get grow threads needed to bring back up to full.\\n\\tlet growThreads = ns.growthAnalyze(target, multiplier);\\n\\tlet growSecurityEffect = ns.growthAnalyzeSecurity(growThreads);\\n\\n\\t// Second weaken reduces security after growth. Calculate threads needed.\\n\\tlet secondWeakenEffect = 0;\\n\\tlet secondWeakenThreads = growThreads\\n\\twhile (secondWeakenEffect < growSecurityEffect) {\\n\\t\\tsecondWeakenEffect = ns.weakenAnalyze(secondWeakenThreads);\\n\\t\\tsecondWeakenThreads++;\\n\\t}\\n\\n\\t// Scale down if this would use more threads than the maximum allowed.\\n\\tlet totalThreads = hackThreads + growThreads + firstWeakenThreads + secondWeakenThreads;\\n\\tif (totalThreads > maxThreads) {\\n\\t\\tlet ratio = (maxThreads / totalThreads) * 0.8;\\n\\t\\t\\n\\t\\thackThreads = hackThreads * ratio;\\n\\t\\tgrowThreads = growThreads * ratio;\\n\\t\\tfirstWeakenThreads = firstWeakenThreads * ratio;\\n\\t\\tsecondWeakenThreads = secondWeakenThreads * ratio;\\n\\t}\\n\\n\\tif (hackThreads < 1) {\\n\\t\\thackThreads = 1;\\n\\t}\\n\\tif (growThreads < 1) {\\n\\t\\tgrowThreads = 1;\\n\\t}\\n\\tif (firstWeakenThreads < 1) {\\n\\t\\tfirstWeakenThreads = 1;\\n\\t}\\n\\tif (secondWeakenThreads < 1) {\\n\\t\\tsecondWeakenThreads = 1;\\n\\t}\\n\\n\\tlet threads = {\\n\\t\\tw1: firstWeakenThreads,\\n\\t\\tw2: secondWeakenThreads,\\n\\t\\tg: growThreads,\\n\\t\\th: hackThreads\\n\\t}\\n\\n\\treturn threads;\\n}\\n\\nasync function runBatch(ns, target, times, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\t// Finish order:\\n\\t// 1. Hack\\n\\t// 2. Weaken\\n\\t// 3. Grow\\n\\t// 4. Weaken\\n\\n\\tlet w1Sleep = times.offset;\\n\\tlet w2Sleep = 3 * times.offset;\\n\\tlet gSleep = (times.w - times.g) + (times.offset * 2) - w2Sleep;\\n\\tlet hSleep = (times.w - times.h) - (w2Sleep + gSleep);\\n\\n\\tawait ns.sleep(w1Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w1, target);\\n\\t\\n\\tawait ns.sleep(w2Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w2, target);\\n\\t\\n\\tawait ns.sleep(gSleep);\\n\\tns.exec(\\\"scripts/112-grow.js\\\", server.hostname, threads.g, target);\\n\\t\\n\\tif (!preparingServer) {\\n\\t\\tawait ns.sleep(hSleep);\\n\\t\\tns.exec(\\\"scripts/111-hack.js\\\", server.hostname, threads.h, target);\\n\\t}\\n}\",\"filename\":\"/scripts/110-batch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/c2ad9312-7e91-4540-830a-26fc52dfc2c1\",\"moduleSequenceNumber\":1034}],\"dependents\":[],\"ramUsage\":10.15,\"server\":\"pserv-012\",\"moduleSequenceNumber\":1034,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.hack(target);\\t\\n}\",\"filename\":\"/scripts/111-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-012\",\"moduleSequenceNumber\":1030,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"/scripts/112-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/89b831cf-d153-432f-ba5e-617af4e99310\",\"moduleSequenceNumber\":1123}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-012\",\"moduleSequenceNumber\":1123,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"/scripts/113-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/189d0850-b27d-4124-9df5-9f1fa671ee08\",\"moduleSequenceNumber\":1035}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-012\",\"moduleSequenceNumber\":1035,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-013\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-013\",\"httpPortOpen\":false,\"ip\":\"63.7.4.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":582.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"/scripts/100-batch-controller.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.209999999999965,\"pid\":8781,\"ramUsage\":5.75,\"server\":\"pserv-013\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/c027bfbd-c3e1-4b24-8030-c4b782f91a45\",\"moduleSequenceNumber\":1136}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\",524288,true],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.209999999999965,\"pid\":8782,\"ramUsage\":10.15,\"server\":\"pserv-013\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/e8de974e-095b-4f70-96fe-eb979398d4a5\",\"moduleSequenceNumber\":1137}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.00999999999996,\"pid\":8799,\"ramUsage\":1.75,\"server\":\"pserv-013\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/1da45f39-2266-42b4-a0bd-242854ce9964\",\"moduleSequenceNumber\":1138}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.409999999999954,\"pid\":8817,\"ramUsage\":1.75,\"server\":\"pserv-013\",\"threads\":323,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/1da45f39-2266-42b4-a0bd-242854ce9964\",\"moduleSequenceNumber\":1138}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet debug = ns.args[0];\\n\\n\\tif (debug) {\\n\\t\\tawait earn(ns);\\n\\t} else {\\n\\t\\twhile (true) {\\n\\t\\t\\tawait earn(ns);\\n\\t\\t\\tawait ns.sleep(60000);\\n\\t\\t}\\n\\t}\\n}\\n\\nasync function earn(ns) {\\n\\tlet pservLimit = ns.getPurchasedServerLimit();\\n\\tlet maxServerRam = ns.getPurchasedServerMaxRam();\\n\\tlet maxServerCost = ns.getPurchasedServerCost(maxServerRam);\\n\\tlet money = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet pservs = ns.getPurchasedServers();\\n\\t\\n\\t// Identify targets, in order of best to hack.\\n\\tlet targets = getTargets(ns);\\n\\n\\t// Make sure that \\\"home\\\" is hacking the one at the target\\n\\t// top of the list.\\n\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", targets[0].hostname);\\n\\tif (!correctTarget) {\\n\\t\\t// Kill all scripts except this one.\\n\\t\\tlet currentScripts = ns.ps(\\\"home\\\");\\n\\t\\tlet batchScripts = currentScripts.filter( s => {\\n\\t\\t\\treturn s.filename != ns.getScriptName();\\n\\t\\t});\\n\\t\\tbatchScripts.forEach(s => {\\n\\t\\t\\tns.kill(s.pid);\\n\\t\\t});\\n\\n\\t\\t// Start with the correct one!\\n\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", 1, targets[0].hostname);\\n\\t}\\n\\n\\t// Buy a maxed out server to hack other targets.\\n\\tif (money >= maxServerCost && pservs.length < pservLimit) {\\n\\t\\tlet i = pservs.length + 1;\\n\\t\\tlet suffix = \\\"000\\\";\\n\\n\\t\\tif (i < 10) {\\n\\t\\t\\tsuffix = \\\"00\\\" + i.toString();\\n\\t\\t} else if (i < 100) {\\n\\t\\t\\tsuffix = \\\"0\\\" + i.toString();\\n\\t\\t} else {\\n\\t\\t\\tsuffix = i.toString();\\n\\t\\t}\\n\\n\\t\\tlet hostname = \\\"pserv-\\\" + suffix;\\n\\t\\tns.purchaseServer(hostname, ns.getPurchasedServerMaxRam());\\n\\t}\\n\\n\\t// Starting hacking using purchased servers.\\n\\t// Get pservs again.\\n\\tpservs = ns.getPurchasedServers();\\n\\n\\tfor (let n in pservs) {\\n\\t\\tlet p = pservs[n]\\n\\t\\t// Make sure pserv has the latest scripts.\\n\\t\\t// Get scripts on home and on server.\\n\\t\\tlet homeScripts = ns.ls(\\\"home\\\", \\\"/scripts/\\\");\\n\\t\\t\\n\\t\\t// Copy all scripts back to server.\\n\\t\\tawait ns.scp(homeScripts, p);\\n\\n\\t\\tlet i = parseInt(p.split(\\\"-\\\").pop());\\n\\t\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", p, targets[i].hostname);\\n\\t\\tif (!correctTarget) {\\n\\t\\t\\t// Kill all scripts on the server.\\n\\t\\t\\tns.killall(p);\\n\\n\\t\\t\\t// Start with the correct one!\\n\\t\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", p, 1, targets[i].hostname);\\n\\t\\t}\\n\\t}\\t\\n}\\n\\nfunction getTargets(ns) {\\n\\t// TODO: Having to cap infinite loop arbitrarily. Struggling\\n\\t// to get the scanQueue to remove a server once scanned.\\n\\n\\tlet targets = [];\\n\\tlet scanQueue = [];\\n\\tlet scanned = [];\\n\\n\\tlet levelOneTargets = ns.scan();\\n\\tlevelOneTargets.forEach( t => {\\n\\t\\tlet server = ns.getServer(t);\\n\\t\\tif (!server.purchasedByPlayer && t !== \\\"home\\\" && t !== \\\"darkweb\\\") {\\n\\t\\t\\ttargets.push(t);\\n\\t\\t\\tscanQueue.push(t);\\n\\t\\t}\\n\\t});\\n\\t\\n\\tlet i = 0\\n\\twhile (scanQueue.length > 0 && i < 30) {\\n\\t\\tlet results = [];\\n\\n\\t\\tscanQueue.forEach( t => {\\n\\t\\t\\tlet result = ns.scan(t);\\n\\t\\t\\tresult.forEach( server => {\\n\\t\\t\\t\\tresults.push(server)\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\t// Do something with results.\\n\\t\\tlet uniqueResults = [...new Set(results)];\\n\\t\\tuniqueResults.forEach( async r => {\\n\\t\\t\\tif (r in scanned === false) {\\n\\t\\t\\t\\ttargets.push(r);\\t\\n\\t\\t\\t\\tscanQueue.push(r);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\ti++;\\n\\t};\\n\\n\\tlet uniqueTargets = [...new Set(targets)];\\n\\n\\tlet targetServers = [];\\n\\tuniqueTargets.forEach( t => {\\n\\t\\ttargetServers.push(ns.getServer(t));\\n\\t});\\n\\n\\tlet hackableTargets = getHackableTargets(ns, targetServers);\\n\\tlet orderedTargets = getOrderedTargets(ns, hackableTargets);\\n\\n\\treturn orderedTargets;\\n}\\n\\nfunction getHackableTargets(ns, targets) {\\n\\t// Conditions\\n\\t//\\t- Player hacking skill must be greater than skill required.\\n\\t//\\t- Max possible money must be greater than zero.\\n\\n\\tlet hackingSkill = ns.getHackingLevel();\\n\\n\\tlet hackableTargets = targets.filter( t => {\\n\\t\\treturn hackingSkill >= t.requiredHackingSkill && ns.getServerMaxMoney(t.hostname) > 0;\\n\\t});\\n\\n\\treturn hackableTargets;\\n}\\n\\nfunction getOrderedTargets(ns, hackableTargets) {\\n\\t// Score is the maximum dollars per second.\\n\\t// This is not the same rate that will be effected in\\n\\t// practice, as this would drain the server of all money.\\n\\n\\tlet scoredTargets = [];\\n\\n\\thackableTargets.forEach( h => {\\n\\t\\tlet maxMoney = ns.getServerMaxMoney(h.hostname);\\n\\t\\tlet batchTime = ns.getWeakenTime(h.hostname) + 1000; // Weaken always takes longest.\\n\\t\\tlet score = maxMoney / batchTime;\\n\\t\\tscoredTargets.push({\\n\\t\\t\\thostname: h.hostname,\\n\\t\\t\\tscore: score\\n\\t\\t});\\n\\t});\\n\\n\\tlet orderedTargets = scoredTargets.sort( (a, b) => {\\n\\t\\treturn b.score - a.score;\\n\\t});\\n\\n\\tlet orderedTargetServers = [];\\n\\torderedTargets.forEach( o => {\\n\\t\\torderedTargetServers.push(ns.getServer(o.hostname));\\n\\t});\\n\\n\\treturn orderedTargets;\\n}\",\"filename\":\"/scripts/000-master-controller.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":12.35,\"server\":\"pserv-013\",\"moduleSequenceNumber\":1130,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet server = ns.getServer();\\n\\n\\tlet maxThreads = Math.trunc(ns.getServerMaxRam(server.hostname) / 2);\\n\\tlet offset = 200;\\n\\n\\t// Prepare server.\\n\\tunlockServer(ns, target);\\n\\n\\tlet serverReady = false\\n\\twhile (!serverReady) {\\n\\t\\tstartBatch(ns, target, maxThreads, true);\\n        serverReady = getServerStatus(ns, target);\\n\\t\\tif (!serverReady) {\\n            let waitTime = ns.getWeakenTime(target);\\n\\t\\t\\tawait ns.sleep(waitTime + (5 * offset));\\n\\t\\t}\\n\\t}\\n\\n\\t// Set up and run batches.\\n\\twhile (true) {\\n        let freeRam = ns.getServerMaxRam(server.hostname) - ns.getServerUsedRam(server.hostname);\\n        if (freeRam >= 20) {\\n            startBatch(ns, target, maxThreads, false);\\n            await ns.sleep(1000);\\n        } else {\\n            await ns.sleep(2000);\\n        }\\n\\t}\\n}\\n\\nfunction getServerStatus(ns, target) {\\n    let maxMoney = ns.getServerMaxMoney(target);\\n    let currentMoney = ns.getServerMoneyAvailable(target);\\n    let moneyReady = maxMoney == currentMoney;\\n\\n    let minSecurity = ns.getServerMinSecurityLevel(target);\\n    let currentSecurity = ns.getServerSecurityLevel(target);\\n    let securityReady = minSecurity == currentSecurity;\\n\\n    if (moneyReady && securityReady) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction unlockServer(ns, target) {\\n    try {\\n        ns.brutessh(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.ftpcrack(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.relaysmtp(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.httpworm(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.sqlinject(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    ns.nuke(target);\\n}\\n\\nfunction startBatch(ns, target, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\tns.exec(\\\"scripts/110-batch.js\\\", server.hostname, 1, target, threads, preparingServer);\\n}\",\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/c027bfbd-c3e1-4b24-8030-c4b782f91a45\",\"moduleSequenceNumber\":1136}],\"dependents\":[],\"ramUsage\":5.75,\"server\":\"pserv-013\",\"moduleSequenceNumber\":1136,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet maxThreads = ns.args[1];\\n\\tlet preparingServer = ns.args[2] | false;\\n\\n\\tlet times = getTimes(ns, target);\\n\\tlet threads = getThreads(ns, target, maxThreads);\\n\\n\\tlet validThreads = Object.keys(threads).every( n => threads[n] >= 1);\\n\\t// ns.tprint(validThreads);\\n\\tif (validThreads) {\\n\\t\\tawait runBatch(ns, target, times, threads, preparingServer);\\n\\t}\\n}\\n\\nfunction getTimes(ns, target) {\\n\\t// Get run times for server.\\n\\tlet wTime = ns.getWeakenTime(target);\\n\\tlet gTime = ns.getGrowTime(target);\\n\\tlet hTime = ns.getHackTime(target);\\n\\tlet times = {\\n\\t\\tw: wTime,\\n\\t\\tg: gTime,\\n\\t\\th: hTime,\\n\\t\\toffset: 200\\n\\t}\\n\\n\\treturn times;\\n}\\n\\nfunction getThreads(ns, target, maxThreads) {\\n\\tlet multiplier = 2\\n\\n\\t// Get ideal number of threads for preferred hack amount.\\n\\tlet maxHackAmount = ns.getServerMaxMoney(target) / multiplier;\\n\\tlet hackThreads = ns.hackAnalyzeThreads(target, maxHackAmount);\\n\\tlet hackSecurityEffect = ns.hackAnalyzeSecurity(hackThreads);\\n\\n\\t// First weaken reduces security after hack. Calculate threads needed.\\n\\tlet firstWeakenEffect = 0;\\n\\tlet firstWeakenThreads = hackThreads\\n\\twhile (firstWeakenEffect < hackSecurityEffect) {\\n\\t\\tfirstWeakenEffect = ns.weakenAnalyze(firstWeakenThreads);\\n\\t\\tfirstWeakenThreads++;\\n\\t}\\n\\n\\t// Get grow threads needed to bring back up to full.\\n\\tlet growThreads = ns.growthAnalyze(target, multiplier);\\n\\tlet growSecurityEffect = ns.growthAnalyzeSecurity(growThreads);\\n\\n\\t// Second weaken reduces security after growth. Calculate threads needed.\\n\\tlet secondWeakenEffect = 0;\\n\\tlet secondWeakenThreads = growThreads\\n\\twhile (secondWeakenEffect < growSecurityEffect) {\\n\\t\\tsecondWeakenEffect = ns.weakenAnalyze(secondWeakenThreads);\\n\\t\\tsecondWeakenThreads++;\\n\\t}\\n\\n\\t// Scale down if this would use more threads than the maximum allowed.\\n\\tlet totalThreads = hackThreads + growThreads + firstWeakenThreads + secondWeakenThreads;\\n\\tif (totalThreads > maxThreads) {\\n\\t\\tlet ratio = (maxThreads / totalThreads) * 0.8;\\n\\t\\t\\n\\t\\thackThreads = hackThreads * ratio;\\n\\t\\tgrowThreads = growThreads * ratio;\\n\\t\\tfirstWeakenThreads = firstWeakenThreads * ratio;\\n\\t\\tsecondWeakenThreads = secondWeakenThreads * ratio;\\n\\t}\\n\\n\\tif (hackThreads < 1) {\\n\\t\\thackThreads = 1;\\n\\t}\\n\\tif (growThreads < 1) {\\n\\t\\tgrowThreads = 1;\\n\\t}\\n\\tif (firstWeakenThreads < 1) {\\n\\t\\tfirstWeakenThreads = 1;\\n\\t}\\n\\tif (secondWeakenThreads < 1) {\\n\\t\\tsecondWeakenThreads = 1;\\n\\t}\\n\\n\\tlet threads = {\\n\\t\\tw1: firstWeakenThreads,\\n\\t\\tw2: secondWeakenThreads,\\n\\t\\tg: growThreads,\\n\\t\\th: hackThreads\\n\\t}\\n\\n\\treturn threads;\\n}\\n\\nasync function runBatch(ns, target, times, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\t// Finish order:\\n\\t// 1. Hack\\n\\t// 2. Weaken\\n\\t// 3. Grow\\n\\t// 4. Weaken\\n\\n\\tlet w1Sleep = times.offset;\\n\\tlet w2Sleep = 3 * times.offset;\\n\\tlet gSleep = (times.w - times.g) + (times.offset * 2) - w2Sleep;\\n\\tlet hSleep = (times.w - times.h) - (w2Sleep + gSleep);\\n\\n\\tawait ns.sleep(w1Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w1, target);\\n\\t\\n\\tawait ns.sleep(w2Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w2, target);\\n\\t\\n\\tawait ns.sleep(gSleep);\\n\\tns.exec(\\\"scripts/112-grow.js\\\", server.hostname, threads.g, target);\\n\\t\\n\\tif (!preparingServer) {\\n\\t\\tawait ns.sleep(hSleep);\\n\\t\\tns.exec(\\\"scripts/111-hack.js\\\", server.hostname, threads.h, target);\\n\\t}\\n}\",\"filename\":\"/scripts/110-batch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/e8de974e-095b-4f70-96fe-eb979398d4a5\",\"moduleSequenceNumber\":1137}],\"dependents\":[],\"ramUsage\":10.15,\"server\":\"pserv-013\",\"moduleSequenceNumber\":1137,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.hack(target);\\t\\n}\",\"filename\":\"/scripts/111-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-013\",\"moduleSequenceNumber\":1133,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"/scripts/112-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/a8b72c92-a144-4e77-8688-b9e73b8d6bde\",\"moduleSequenceNumber\":1232}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-013\",\"moduleSequenceNumber\":1232,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"/scripts/113-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/1da45f39-2266-42b4-a0bd-242854ce9964\",\"moduleSequenceNumber\":1138}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-013\",\"moduleSequenceNumber\":1138,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-014\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-014\",\"httpPortOpen\":false,\"ip\":\"82.1.2.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":560.15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"/scripts/100-batch-controller.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.209999999999965,\"pid\":8783,\"ramUsage\":5.75,\"server\":\"pserv-014\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/f3c8491c-675b-41f1-9c35-dbc787f8018b\",\"moduleSequenceNumber\":1245}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",524288,true],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.209999999999965,\"pid\":8784,\"ramUsage\":10.15,\"server\":\"pserv-014\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/e39a1f54-2bf0-4b2d-9554-697128444f94\",\"moduleSequenceNumber\":1246}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.00999999999996,\"pid\":8800,\"ramUsage\":1.75,\"server\":\"pserv-014\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/e55552af-c913-4b6b-a93a-5ede0e1c3405\",\"moduleSequenceNumber\":1247}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.409999999999954,\"pid\":8818,\"ramUsage\":1.75,\"server\":\"pserv-014\",\"threads\":310,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/e55552af-c913-4b6b-a93a-5ede0e1c3405\",\"moduleSequenceNumber\":1247}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet debug = ns.args[0];\\n\\n\\tif (debug) {\\n\\t\\tawait earn(ns);\\n\\t} else {\\n\\t\\twhile (true) {\\n\\t\\t\\tawait earn(ns);\\n\\t\\t\\tawait ns.sleep(60000);\\n\\t\\t}\\n\\t}\\n}\\n\\nasync function earn(ns) {\\n\\tlet pservLimit = ns.getPurchasedServerLimit();\\n\\tlet maxServerRam = ns.getPurchasedServerMaxRam();\\n\\tlet maxServerCost = ns.getPurchasedServerCost(maxServerRam);\\n\\tlet money = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet pservs = ns.getPurchasedServers();\\n\\t\\n\\t// Identify targets, in order of best to hack.\\n\\tlet targets = getTargets(ns);\\n\\n\\t// Make sure that \\\"home\\\" is hacking the one at the target\\n\\t// top of the list.\\n\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", targets[0].hostname);\\n\\tif (!correctTarget) {\\n\\t\\t// Kill all scripts except this one.\\n\\t\\tlet currentScripts = ns.ps(\\\"home\\\");\\n\\t\\tlet batchScripts = currentScripts.filter( s => {\\n\\t\\t\\treturn s.filename != ns.getScriptName();\\n\\t\\t});\\n\\t\\tbatchScripts.forEach(s => {\\n\\t\\t\\tns.kill(s.pid);\\n\\t\\t});\\n\\n\\t\\t// Start with the correct one!\\n\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", 1, targets[0].hostname);\\n\\t}\\n\\n\\t// Buy a maxed out server to hack other targets.\\n\\tif (money >= maxServerCost && pservs.length < pservLimit) {\\n\\t\\tlet i = pservs.length + 1;\\n\\t\\tlet suffix = \\\"000\\\";\\n\\n\\t\\tif (i < 10) {\\n\\t\\t\\tsuffix = \\\"00\\\" + i.toString();\\n\\t\\t} else if (i < 100) {\\n\\t\\t\\tsuffix = \\\"0\\\" + i.toString();\\n\\t\\t} else {\\n\\t\\t\\tsuffix = i.toString();\\n\\t\\t}\\n\\n\\t\\tlet hostname = \\\"pserv-\\\" + suffix;\\n\\t\\tns.purchaseServer(hostname, ns.getPurchasedServerMaxRam());\\n\\t}\\n\\n\\t// Starting hacking using purchased servers.\\n\\t// Get pservs again.\\n\\tpservs = ns.getPurchasedServers();\\n\\n\\tfor (let n in pservs) {\\n\\t\\tlet p = pservs[n]\\n\\t\\t// Make sure pserv has the latest scripts.\\n\\t\\t// Get scripts on home and on server.\\n\\t\\tlet homeScripts = ns.ls(\\\"home\\\", \\\"/scripts/\\\");\\n\\t\\t\\n\\t\\t// Copy all scripts back to server.\\n\\t\\tawait ns.scp(homeScripts, p);\\n\\n\\t\\tlet i = parseInt(p.split(\\\"-\\\").pop());\\n\\t\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", p, targets[i].hostname);\\n\\t\\tif (!correctTarget) {\\n\\t\\t\\t// Kill all scripts on the server.\\n\\t\\t\\tns.killall(p);\\n\\n\\t\\t\\t// Start with the correct one!\\n\\t\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", p, 1, targets[i].hostname);\\n\\t\\t}\\n\\t}\\t\\n}\\n\\nfunction getTargets(ns) {\\n\\t// TODO: Having to cap infinite loop arbitrarily. Struggling\\n\\t// to get the scanQueue to remove a server once scanned.\\n\\n\\tlet targets = [];\\n\\tlet scanQueue = [];\\n\\tlet scanned = [];\\n\\n\\tlet levelOneTargets = ns.scan();\\n\\tlevelOneTargets.forEach( t => {\\n\\t\\tlet server = ns.getServer(t);\\n\\t\\tif (!server.purchasedByPlayer && t !== \\\"home\\\" && t !== \\\"darkweb\\\") {\\n\\t\\t\\ttargets.push(t);\\n\\t\\t\\tscanQueue.push(t);\\n\\t\\t}\\n\\t});\\n\\t\\n\\tlet i = 0\\n\\twhile (scanQueue.length > 0 && i < 30) {\\n\\t\\tlet results = [];\\n\\n\\t\\tscanQueue.forEach( t => {\\n\\t\\t\\tlet result = ns.scan(t);\\n\\t\\t\\tresult.forEach( server => {\\n\\t\\t\\t\\tresults.push(server)\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\t// Do something with results.\\n\\t\\tlet uniqueResults = [...new Set(results)];\\n\\t\\tuniqueResults.forEach( async r => {\\n\\t\\t\\tif (r in scanned === false) {\\n\\t\\t\\t\\ttargets.push(r);\\t\\n\\t\\t\\t\\tscanQueue.push(r);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\ti++;\\n\\t};\\n\\n\\tlet uniqueTargets = [...new Set(targets)];\\n\\n\\tlet targetServers = [];\\n\\tuniqueTargets.forEach( t => {\\n\\t\\ttargetServers.push(ns.getServer(t));\\n\\t});\\n\\n\\tlet hackableTargets = getHackableTargets(ns, targetServers);\\n\\tlet orderedTargets = getOrderedTargets(ns, hackableTargets);\\n\\n\\treturn orderedTargets;\\n}\\n\\nfunction getHackableTargets(ns, targets) {\\n\\t// Conditions\\n\\t//\\t- Player hacking skill must be greater than skill required.\\n\\t//\\t- Max possible money must be greater than zero.\\n\\n\\tlet hackingSkill = ns.getHackingLevel();\\n\\n\\tlet hackableTargets = targets.filter( t => {\\n\\t\\treturn hackingSkill >= t.requiredHackingSkill && ns.getServerMaxMoney(t.hostname) > 0;\\n\\t});\\n\\n\\treturn hackableTargets;\\n}\\n\\nfunction getOrderedTargets(ns, hackableTargets) {\\n\\t// Score is the maximum dollars per second.\\n\\t// This is not the same rate that will be effected in\\n\\t// practice, as this would drain the server of all money.\\n\\n\\tlet scoredTargets = [];\\n\\n\\thackableTargets.forEach( h => {\\n\\t\\tlet maxMoney = ns.getServerMaxMoney(h.hostname);\\n\\t\\tlet batchTime = ns.getWeakenTime(h.hostname) + 1000; // Weaken always takes longest.\\n\\t\\tlet score = maxMoney / batchTime;\\n\\t\\tscoredTargets.push({\\n\\t\\t\\thostname: h.hostname,\\n\\t\\t\\tscore: score\\n\\t\\t});\\n\\t});\\n\\n\\tlet orderedTargets = scoredTargets.sort( (a, b) => {\\n\\t\\treturn b.score - a.score;\\n\\t});\\n\\n\\tlet orderedTargetServers = [];\\n\\torderedTargets.forEach( o => {\\n\\t\\torderedTargetServers.push(ns.getServer(o.hostname));\\n\\t});\\n\\n\\treturn orderedTargets;\\n}\",\"filename\":\"/scripts/000-master-controller.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":12.35,\"server\":\"pserv-014\",\"moduleSequenceNumber\":1239,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet server = ns.getServer();\\n\\n\\tlet maxThreads = Math.trunc(ns.getServerMaxRam(server.hostname) / 2);\\n\\tlet offset = 200;\\n\\n\\t// Prepare server.\\n\\tunlockServer(ns, target);\\n\\n\\tlet serverReady = false\\n\\twhile (!serverReady) {\\n\\t\\tstartBatch(ns, target, maxThreads, true);\\n        serverReady = getServerStatus(ns, target);\\n\\t\\tif (!serverReady) {\\n            let waitTime = ns.getWeakenTime(target);\\n\\t\\t\\tawait ns.sleep(waitTime + (5 * offset));\\n\\t\\t}\\n\\t}\\n\\n\\t// Set up and run batches.\\n\\twhile (true) {\\n        let freeRam = ns.getServerMaxRam(server.hostname) - ns.getServerUsedRam(server.hostname);\\n        if (freeRam >= 20) {\\n            startBatch(ns, target, maxThreads, false);\\n            await ns.sleep(1000);\\n        } else {\\n            await ns.sleep(2000);\\n        }\\n\\t}\\n}\\n\\nfunction getServerStatus(ns, target) {\\n    let maxMoney = ns.getServerMaxMoney(target);\\n    let currentMoney = ns.getServerMoneyAvailable(target);\\n    let moneyReady = maxMoney == currentMoney;\\n\\n    let minSecurity = ns.getServerMinSecurityLevel(target);\\n    let currentSecurity = ns.getServerSecurityLevel(target);\\n    let securityReady = minSecurity == currentSecurity;\\n\\n    if (moneyReady && securityReady) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction unlockServer(ns, target) {\\n    try {\\n        ns.brutessh(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.ftpcrack(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.relaysmtp(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.httpworm(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.sqlinject(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    ns.nuke(target);\\n}\\n\\nfunction startBatch(ns, target, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\tns.exec(\\\"scripts/110-batch.js\\\", server.hostname, 1, target, threads, preparingServer);\\n}\",\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/f3c8491c-675b-41f1-9c35-dbc787f8018b\",\"moduleSequenceNumber\":1245}],\"dependents\":[],\"ramUsage\":5.75,\"server\":\"pserv-014\",\"moduleSequenceNumber\":1245,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet maxThreads = ns.args[1];\\n\\tlet preparingServer = ns.args[2] | false;\\n\\n\\tlet times = getTimes(ns, target);\\n\\tlet threads = getThreads(ns, target, maxThreads);\\n\\n\\tlet validThreads = Object.keys(threads).every( n => threads[n] >= 1);\\n\\t// ns.tprint(validThreads);\\n\\tif (validThreads) {\\n\\t\\tawait runBatch(ns, target, times, threads, preparingServer);\\n\\t}\\n}\\n\\nfunction getTimes(ns, target) {\\n\\t// Get run times for server.\\n\\tlet wTime = ns.getWeakenTime(target);\\n\\tlet gTime = ns.getGrowTime(target);\\n\\tlet hTime = ns.getHackTime(target);\\n\\tlet times = {\\n\\t\\tw: wTime,\\n\\t\\tg: gTime,\\n\\t\\th: hTime,\\n\\t\\toffset: 200\\n\\t}\\n\\n\\treturn times;\\n}\\n\\nfunction getThreads(ns, target, maxThreads) {\\n\\tlet multiplier = 2\\n\\n\\t// Get ideal number of threads for preferred hack amount.\\n\\tlet maxHackAmount = ns.getServerMaxMoney(target) / multiplier;\\n\\tlet hackThreads = ns.hackAnalyzeThreads(target, maxHackAmount);\\n\\tlet hackSecurityEffect = ns.hackAnalyzeSecurity(hackThreads);\\n\\n\\t// First weaken reduces security after hack. Calculate threads needed.\\n\\tlet firstWeakenEffect = 0;\\n\\tlet firstWeakenThreads = hackThreads\\n\\twhile (firstWeakenEffect < hackSecurityEffect) {\\n\\t\\tfirstWeakenEffect = ns.weakenAnalyze(firstWeakenThreads);\\n\\t\\tfirstWeakenThreads++;\\n\\t}\\n\\n\\t// Get grow threads needed to bring back up to full.\\n\\tlet growThreads = ns.growthAnalyze(target, multiplier);\\n\\tlet growSecurityEffect = ns.growthAnalyzeSecurity(growThreads);\\n\\n\\t// Second weaken reduces security after growth. Calculate threads needed.\\n\\tlet secondWeakenEffect = 0;\\n\\tlet secondWeakenThreads = growThreads\\n\\twhile (secondWeakenEffect < growSecurityEffect) {\\n\\t\\tsecondWeakenEffect = ns.weakenAnalyze(secondWeakenThreads);\\n\\t\\tsecondWeakenThreads++;\\n\\t}\\n\\n\\t// Scale down if this would use more threads than the maximum allowed.\\n\\tlet totalThreads = hackThreads + growThreads + firstWeakenThreads + secondWeakenThreads;\\n\\tif (totalThreads > maxThreads) {\\n\\t\\tlet ratio = (maxThreads / totalThreads) * 0.8;\\n\\t\\t\\n\\t\\thackThreads = hackThreads * ratio;\\n\\t\\tgrowThreads = growThreads * ratio;\\n\\t\\tfirstWeakenThreads = firstWeakenThreads * ratio;\\n\\t\\tsecondWeakenThreads = secondWeakenThreads * ratio;\\n\\t}\\n\\n\\tif (hackThreads < 1) {\\n\\t\\thackThreads = 1;\\n\\t}\\n\\tif (growThreads < 1) {\\n\\t\\tgrowThreads = 1;\\n\\t}\\n\\tif (firstWeakenThreads < 1) {\\n\\t\\tfirstWeakenThreads = 1;\\n\\t}\\n\\tif (secondWeakenThreads < 1) {\\n\\t\\tsecondWeakenThreads = 1;\\n\\t}\\n\\n\\tlet threads = {\\n\\t\\tw1: firstWeakenThreads,\\n\\t\\tw2: secondWeakenThreads,\\n\\t\\tg: growThreads,\\n\\t\\th: hackThreads\\n\\t}\\n\\n\\treturn threads;\\n}\\n\\nasync function runBatch(ns, target, times, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\t// Finish order:\\n\\t// 1. Hack\\n\\t// 2. Weaken\\n\\t// 3. Grow\\n\\t// 4. Weaken\\n\\n\\tlet w1Sleep = times.offset;\\n\\tlet w2Sleep = 3 * times.offset;\\n\\tlet gSleep = (times.w - times.g) + (times.offset * 2) - w2Sleep;\\n\\tlet hSleep = (times.w - times.h) - (w2Sleep + gSleep);\\n\\n\\tawait ns.sleep(w1Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w1, target);\\n\\t\\n\\tawait ns.sleep(w2Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w2, target);\\n\\t\\n\\tawait ns.sleep(gSleep);\\n\\tns.exec(\\\"scripts/112-grow.js\\\", server.hostname, threads.g, target);\\n\\t\\n\\tif (!preparingServer) {\\n\\t\\tawait ns.sleep(hSleep);\\n\\t\\tns.exec(\\\"scripts/111-hack.js\\\", server.hostname, threads.h, target);\\n\\t}\\n}\",\"filename\":\"/scripts/110-batch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/e39a1f54-2bf0-4b2d-9554-697128444f94\",\"moduleSequenceNumber\":1246}],\"dependents\":[],\"ramUsage\":10.15,\"server\":\"pserv-014\",\"moduleSequenceNumber\":1246,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.hack(target);\\t\\n}\",\"filename\":\"/scripts/111-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-014\",\"moduleSequenceNumber\":1242,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"/scripts/112-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/23d0d254-74b9-4ef8-92e6-38127ac40ec7\",\"moduleSequenceNumber\":1362}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-014\",\"moduleSequenceNumber\":1362,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"/scripts/113-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/e55552af-c913-4b6b-a93a-5ede0e1c3405\",\"moduleSequenceNumber\":1247}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-014\",\"moduleSequenceNumber\":1247,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-015\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-015\",\"httpPortOpen\":false,\"ip\":\"55.1.8.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1555.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"/scripts/100-batch-controller.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.209999999999965,\"pid\":8785,\"ramUsage\":5.75,\"server\":\"pserv-015\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/f0b10e12-bf5a-41be-88a6-15d2dc6e7794\",\"moduleSequenceNumber\":1359}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",524288,true],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.209999999999965,\"pid\":8786,\"ramUsage\":10.15,\"server\":\"pserv-015\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/d7148ce0-1df8-4f30-83ca-ed38e00bbc22\",\"moduleSequenceNumber\":1360}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.00999999999996,\"pid\":8801,\"ramUsage\":1.75,\"server\":\"pserv-015\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/b3c38dc9-9071-45ac-aa30-f944c0df3a50\",\"moduleSequenceNumber\":1361}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.409999999999954,\"pid\":8819,\"ramUsage\":1.75,\"server\":\"pserv-015\",\"threads\":879,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/b3c38dc9-9071-45ac-aa30-f944c0df3a50\",\"moduleSequenceNumber\":1361}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet debug = ns.args[0];\\n\\n\\tif (debug) {\\n\\t\\tawait earn(ns);\\n\\t} else {\\n\\t\\twhile (true) {\\n\\t\\t\\tawait earn(ns);\\n\\t\\t\\tawait ns.sleep(60000);\\n\\t\\t}\\n\\t}\\n}\\n\\nasync function earn(ns) {\\n\\tlet pservLimit = ns.getPurchasedServerLimit();\\n\\tlet maxServerRam = ns.getPurchasedServerMaxRam();\\n\\tlet maxServerCost = ns.getPurchasedServerCost(maxServerRam);\\n\\tlet money = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet pservs = ns.getPurchasedServers();\\n\\t\\n\\t// Identify targets, in order of best to hack.\\n\\tlet targets = getTargets(ns);\\n\\n\\t// Make sure that \\\"home\\\" is hacking the one at the target\\n\\t// top of the list.\\n\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", targets[0].hostname);\\n\\tif (!correctTarget) {\\n\\t\\t// Kill all scripts except this one.\\n\\t\\tlet currentScripts = ns.ps(\\\"home\\\");\\n\\t\\tlet batchScripts = currentScripts.filter( s => {\\n\\t\\t\\treturn s.filename != ns.getScriptName();\\n\\t\\t});\\n\\t\\tbatchScripts.forEach(s => {\\n\\t\\t\\tns.kill(s.pid);\\n\\t\\t});\\n\\n\\t\\t// Start with the correct one!\\n\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", 1, targets[0].hostname);\\n\\t}\\n\\n\\t// Buy a maxed out server to hack other targets.\\n\\tif (money >= maxServerCost && pservs.length < pservLimit) {\\n\\t\\tlet i = pservs.length + 1;\\n\\t\\tlet suffix = \\\"000\\\";\\n\\n\\t\\tif (i < 10) {\\n\\t\\t\\tsuffix = \\\"00\\\" + i.toString();\\n\\t\\t} else if (i < 100) {\\n\\t\\t\\tsuffix = \\\"0\\\" + i.toString();\\n\\t\\t} else {\\n\\t\\t\\tsuffix = i.toString();\\n\\t\\t}\\n\\n\\t\\tlet hostname = \\\"pserv-\\\" + suffix;\\n\\t\\tns.purchaseServer(hostname, ns.getPurchasedServerMaxRam());\\n\\t}\\n\\n\\t// Starting hacking using purchased servers.\\n\\t// Get pservs again.\\n\\tpservs = ns.getPurchasedServers();\\n\\n\\tfor (let n in pservs) {\\n\\t\\tlet p = pservs[n]\\n\\t\\t// Make sure pserv has the latest scripts.\\n\\t\\t// Get scripts on home and on server.\\n\\t\\tlet homeScripts = ns.ls(\\\"home\\\", \\\"/scripts/\\\");\\n\\t\\t\\n\\t\\t// Copy all scripts back to server.\\n\\t\\tawait ns.scp(homeScripts, p);\\n\\n\\t\\tlet i = parseInt(p.split(\\\"-\\\").pop());\\n\\t\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", p, targets[i].hostname);\\n\\t\\tif (!correctTarget) {\\n\\t\\t\\t// Kill all scripts on the server.\\n\\t\\t\\tns.killall(p);\\n\\n\\t\\t\\t// Start with the correct one!\\n\\t\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", p, 1, targets[i].hostname);\\n\\t\\t}\\n\\t}\\t\\n}\\n\\nfunction getTargets(ns) {\\n\\t// TODO: Having to cap infinite loop arbitrarily. Struggling\\n\\t// to get the scanQueue to remove a server once scanned.\\n\\n\\tlet targets = [];\\n\\tlet scanQueue = [];\\n\\tlet scanned = [];\\n\\n\\tlet levelOneTargets = ns.scan();\\n\\tlevelOneTargets.forEach( t => {\\n\\t\\tlet server = ns.getServer(t);\\n\\t\\tif (!server.purchasedByPlayer && t !== \\\"home\\\" && t !== \\\"darkweb\\\") {\\n\\t\\t\\ttargets.push(t);\\n\\t\\t\\tscanQueue.push(t);\\n\\t\\t}\\n\\t});\\n\\t\\n\\tlet i = 0\\n\\twhile (scanQueue.length > 0 && i < 30) {\\n\\t\\tlet results = [];\\n\\n\\t\\tscanQueue.forEach( t => {\\n\\t\\t\\tlet result = ns.scan(t);\\n\\t\\t\\tresult.forEach( server => {\\n\\t\\t\\t\\tresults.push(server)\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\t// Do something with results.\\n\\t\\tlet uniqueResults = [...new Set(results)];\\n\\t\\tuniqueResults.forEach( async r => {\\n\\t\\t\\tif (r in scanned === false) {\\n\\t\\t\\t\\ttargets.push(r);\\t\\n\\t\\t\\t\\tscanQueue.push(r);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\ti++;\\n\\t};\\n\\n\\tlet uniqueTargets = [...new Set(targets)];\\n\\n\\tlet targetServers = [];\\n\\tuniqueTargets.forEach( t => {\\n\\t\\ttargetServers.push(ns.getServer(t));\\n\\t});\\n\\n\\tlet hackableTargets = getHackableTargets(ns, targetServers);\\n\\tlet orderedTargets = getOrderedTargets(ns, hackableTargets);\\n\\n\\treturn orderedTargets;\\n}\\n\\nfunction getHackableTargets(ns, targets) {\\n\\t// Conditions\\n\\t//\\t- Player hacking skill must be greater than skill required.\\n\\t//\\t- Max possible money must be greater than zero.\\n\\n\\tlet hackingSkill = ns.getHackingLevel();\\n\\n\\tlet hackableTargets = targets.filter( t => {\\n\\t\\treturn hackingSkill >= t.requiredHackingSkill && ns.getServerMaxMoney(t.hostname) > 0;\\n\\t});\\n\\n\\treturn hackableTargets;\\n}\\n\\nfunction getOrderedTargets(ns, hackableTargets) {\\n\\t// Score is the maximum dollars per second.\\n\\t// This is not the same rate that will be effected in\\n\\t// practice, as this would drain the server of all money.\\n\\n\\tlet scoredTargets = [];\\n\\n\\thackableTargets.forEach( h => {\\n\\t\\tlet maxMoney = ns.getServerMaxMoney(h.hostname);\\n\\t\\tlet batchTime = ns.getWeakenTime(h.hostname) + 1000; // Weaken always takes longest.\\n\\t\\tlet score = maxMoney / batchTime;\\n\\t\\tscoredTargets.push({\\n\\t\\t\\thostname: h.hostname,\\n\\t\\t\\tscore: score\\n\\t\\t});\\n\\t});\\n\\n\\tlet orderedTargets = scoredTargets.sort( (a, b) => {\\n\\t\\treturn b.score - a.score;\\n\\t});\\n\\n\\tlet orderedTargetServers = [];\\n\\torderedTargets.forEach( o => {\\n\\t\\torderedTargetServers.push(ns.getServer(o.hostname));\\n\\t});\\n\\n\\treturn orderedTargets;\\n}\",\"filename\":\"/scripts/000-master-controller.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":12.35,\"server\":\"pserv-015\",\"moduleSequenceNumber\":1353,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet server = ns.getServer();\\n\\n\\tlet maxThreads = Math.trunc(ns.getServerMaxRam(server.hostname) / 2);\\n\\tlet offset = 200;\\n\\n\\t// Prepare server.\\n\\tunlockServer(ns, target);\\n\\n\\tlet serverReady = false\\n\\twhile (!serverReady) {\\n\\t\\tstartBatch(ns, target, maxThreads, true);\\n        serverReady = getServerStatus(ns, target);\\n\\t\\tif (!serverReady) {\\n            let waitTime = ns.getWeakenTime(target);\\n\\t\\t\\tawait ns.sleep(waitTime + (5 * offset));\\n\\t\\t}\\n\\t}\\n\\n\\t// Set up and run batches.\\n\\twhile (true) {\\n        let freeRam = ns.getServerMaxRam(server.hostname) - ns.getServerUsedRam(server.hostname);\\n        if (freeRam >= 20) {\\n            startBatch(ns, target, maxThreads, false);\\n            await ns.sleep(1000);\\n        } else {\\n            await ns.sleep(2000);\\n        }\\n\\t}\\n}\\n\\nfunction getServerStatus(ns, target) {\\n    let maxMoney = ns.getServerMaxMoney(target);\\n    let currentMoney = ns.getServerMoneyAvailable(target);\\n    let moneyReady = maxMoney == currentMoney;\\n\\n    let minSecurity = ns.getServerMinSecurityLevel(target);\\n    let currentSecurity = ns.getServerSecurityLevel(target);\\n    let securityReady = minSecurity == currentSecurity;\\n\\n    if (moneyReady && securityReady) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction unlockServer(ns, target) {\\n    try {\\n        ns.brutessh(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.ftpcrack(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.relaysmtp(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.httpworm(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.sqlinject(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    ns.nuke(target);\\n}\\n\\nfunction startBatch(ns, target, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\tns.exec(\\\"scripts/110-batch.js\\\", server.hostname, 1, target, threads, preparingServer);\\n}\",\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/f0b10e12-bf5a-41be-88a6-15d2dc6e7794\",\"moduleSequenceNumber\":1359}],\"dependents\":[],\"ramUsage\":5.75,\"server\":\"pserv-015\",\"moduleSequenceNumber\":1359,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet maxThreads = ns.args[1];\\n\\tlet preparingServer = ns.args[2] | false;\\n\\n\\tlet times = getTimes(ns, target);\\n\\tlet threads = getThreads(ns, target, maxThreads);\\n\\n\\tlet validThreads = Object.keys(threads).every( n => threads[n] >= 1);\\n\\t// ns.tprint(validThreads);\\n\\tif (validThreads) {\\n\\t\\tawait runBatch(ns, target, times, threads, preparingServer);\\n\\t}\\n}\\n\\nfunction getTimes(ns, target) {\\n\\t// Get run times for server.\\n\\tlet wTime = ns.getWeakenTime(target);\\n\\tlet gTime = ns.getGrowTime(target);\\n\\tlet hTime = ns.getHackTime(target);\\n\\tlet times = {\\n\\t\\tw: wTime,\\n\\t\\tg: gTime,\\n\\t\\th: hTime,\\n\\t\\toffset: 200\\n\\t}\\n\\n\\treturn times;\\n}\\n\\nfunction getThreads(ns, target, maxThreads) {\\n\\tlet multiplier = 2\\n\\n\\t// Get ideal number of threads for preferred hack amount.\\n\\tlet maxHackAmount = ns.getServerMaxMoney(target) / multiplier;\\n\\tlet hackThreads = ns.hackAnalyzeThreads(target, maxHackAmount);\\n\\tlet hackSecurityEffect = ns.hackAnalyzeSecurity(hackThreads);\\n\\n\\t// First weaken reduces security after hack. Calculate threads needed.\\n\\tlet firstWeakenEffect = 0;\\n\\tlet firstWeakenThreads = hackThreads\\n\\twhile (firstWeakenEffect < hackSecurityEffect) {\\n\\t\\tfirstWeakenEffect = ns.weakenAnalyze(firstWeakenThreads);\\n\\t\\tfirstWeakenThreads++;\\n\\t}\\n\\n\\t// Get grow threads needed to bring back up to full.\\n\\tlet growThreads = ns.growthAnalyze(target, multiplier);\\n\\tlet growSecurityEffect = ns.growthAnalyzeSecurity(growThreads);\\n\\n\\t// Second weaken reduces security after growth. Calculate threads needed.\\n\\tlet secondWeakenEffect = 0;\\n\\tlet secondWeakenThreads = growThreads\\n\\twhile (secondWeakenEffect < growSecurityEffect) {\\n\\t\\tsecondWeakenEffect = ns.weakenAnalyze(secondWeakenThreads);\\n\\t\\tsecondWeakenThreads++;\\n\\t}\\n\\n\\t// Scale down if this would use more threads than the maximum allowed.\\n\\tlet totalThreads = hackThreads + growThreads + firstWeakenThreads + secondWeakenThreads;\\n\\tif (totalThreads > maxThreads) {\\n\\t\\tlet ratio = (maxThreads / totalThreads) * 0.8;\\n\\t\\t\\n\\t\\thackThreads = hackThreads * ratio;\\n\\t\\tgrowThreads = growThreads * ratio;\\n\\t\\tfirstWeakenThreads = firstWeakenThreads * ratio;\\n\\t\\tsecondWeakenThreads = secondWeakenThreads * ratio;\\n\\t}\\n\\n\\tif (hackThreads < 1) {\\n\\t\\thackThreads = 1;\\n\\t}\\n\\tif (growThreads < 1) {\\n\\t\\tgrowThreads = 1;\\n\\t}\\n\\tif (firstWeakenThreads < 1) {\\n\\t\\tfirstWeakenThreads = 1;\\n\\t}\\n\\tif (secondWeakenThreads < 1) {\\n\\t\\tsecondWeakenThreads = 1;\\n\\t}\\n\\n\\tlet threads = {\\n\\t\\tw1: firstWeakenThreads,\\n\\t\\tw2: secondWeakenThreads,\\n\\t\\tg: growThreads,\\n\\t\\th: hackThreads\\n\\t}\\n\\n\\treturn threads;\\n}\\n\\nasync function runBatch(ns, target, times, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\t// Finish order:\\n\\t// 1. Hack\\n\\t// 2. Weaken\\n\\t// 3. Grow\\n\\t// 4. Weaken\\n\\n\\tlet w1Sleep = times.offset;\\n\\tlet w2Sleep = 3 * times.offset;\\n\\tlet gSleep = (times.w - times.g) + (times.offset * 2) - w2Sleep;\\n\\tlet hSleep = (times.w - times.h) - (w2Sleep + gSleep);\\n\\n\\tawait ns.sleep(w1Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w1, target);\\n\\t\\n\\tawait ns.sleep(w2Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w2, target);\\n\\t\\n\\tawait ns.sleep(gSleep);\\n\\tns.exec(\\\"scripts/112-grow.js\\\", server.hostname, threads.g, target);\\n\\t\\n\\tif (!preparingServer) {\\n\\t\\tawait ns.sleep(hSleep);\\n\\t\\tns.exec(\\\"scripts/111-hack.js\\\", server.hostname, threads.h, target);\\n\\t}\\n}\",\"filename\":\"/scripts/110-batch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/d7148ce0-1df8-4f30-83ca-ed38e00bbc22\",\"moduleSequenceNumber\":1360}],\"dependents\":[],\"ramUsage\":10.15,\"server\":\"pserv-015\",\"moduleSequenceNumber\":1360,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.hack(target);\\t\\n}\",\"filename\":\"/scripts/111-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-015\",\"moduleSequenceNumber\":1356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"/scripts/112-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/bd1ad51c-6ae0-4b6d-8a33-a69b0cf29c04\",\"moduleSequenceNumber\":1468}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-015\",\"moduleSequenceNumber\":1468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"/scripts/113-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/b3c38dc9-9071-45ac-aa30-f944c0df3a50\",\"moduleSequenceNumber\":1361}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-015\",\"moduleSequenceNumber\":1361,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-016\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-016\",\"httpPortOpen\":false,\"ip\":\"77.8.7.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1088.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"/scripts/100-batch-controller.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.209999999999965,\"pid\":8787,\"ramUsage\":5.75,\"server\":\"pserv-016\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/a05f2476-5ecc-49e2-9b0c-399aacbf6ac0\",\"moduleSequenceNumber\":1481}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",524288,true],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.209999999999965,\"pid\":8788,\"ramUsage\":10.15,\"server\":\"pserv-016\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/1852f896-9660-44e7-99d1-15a35aaf954a\",\"moduleSequenceNumber\":1482}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.00999999999996,\"pid\":8802,\"ramUsage\":1.75,\"server\":\"pserv-016\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/084c38e0-8675-4c57-9efd-7b814c7c65ff\",\"moduleSequenceNumber\":1483}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.409999999999954,\"pid\":8820,\"ramUsage\":1.75,\"server\":\"pserv-016\",\"threads\":612,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/084c38e0-8675-4c57-9efd-7b814c7c65ff\",\"moduleSequenceNumber\":1483}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet debug = ns.args[0];\\n\\n\\tif (debug) {\\n\\t\\tawait earn(ns);\\n\\t} else {\\n\\t\\twhile (true) {\\n\\t\\t\\tawait earn(ns);\\n\\t\\t\\tawait ns.sleep(60000);\\n\\t\\t}\\n\\t}\\n}\\n\\nasync function earn(ns) {\\n\\tlet pservLimit = ns.getPurchasedServerLimit();\\n\\tlet maxServerRam = ns.getPurchasedServerMaxRam();\\n\\tlet maxServerCost = ns.getPurchasedServerCost(maxServerRam);\\n\\tlet money = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet pservs = ns.getPurchasedServers();\\n\\t\\n\\t// Identify targets, in order of best to hack.\\n\\tlet targets = getTargets(ns);\\n\\n\\t// Make sure that \\\"home\\\" is hacking the one at the target\\n\\t// top of the list.\\n\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", targets[0].hostname);\\n\\tif (!correctTarget) {\\n\\t\\t// Kill all scripts except this one.\\n\\t\\tlet currentScripts = ns.ps(\\\"home\\\");\\n\\t\\tlet batchScripts = currentScripts.filter( s => {\\n\\t\\t\\treturn s.filename != ns.getScriptName();\\n\\t\\t});\\n\\t\\tbatchScripts.forEach(s => {\\n\\t\\t\\tns.kill(s.pid);\\n\\t\\t});\\n\\n\\t\\t// Start with the correct one!\\n\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", 1, targets[0].hostname);\\n\\t}\\n\\n\\t// Buy a maxed out server to hack other targets.\\n\\tif (money >= maxServerCost && pservs.length < pservLimit) {\\n\\t\\tlet i = pservs.length + 1;\\n\\t\\tlet suffix = \\\"000\\\";\\n\\n\\t\\tif (i < 10) {\\n\\t\\t\\tsuffix = \\\"00\\\" + i.toString();\\n\\t\\t} else if (i < 100) {\\n\\t\\t\\tsuffix = \\\"0\\\" + i.toString();\\n\\t\\t} else {\\n\\t\\t\\tsuffix = i.toString();\\n\\t\\t}\\n\\n\\t\\tlet hostname = \\\"pserv-\\\" + suffix;\\n\\t\\tns.purchaseServer(hostname, ns.getPurchasedServerMaxRam());\\n\\t}\\n\\n\\t// Starting hacking using purchased servers.\\n\\t// Get pservs again.\\n\\tpservs = ns.getPurchasedServers();\\n\\n\\tfor (let n in pservs) {\\n\\t\\tlet p = pservs[n]\\n\\t\\t// Make sure pserv has the latest scripts.\\n\\t\\t// Get scripts on home and on server.\\n\\t\\tlet homeScripts = ns.ls(\\\"home\\\", \\\"/scripts/\\\");\\n\\t\\t\\n\\t\\t// Copy all scripts back to server.\\n\\t\\tawait ns.scp(homeScripts, p);\\n\\n\\t\\tlet i = parseInt(p.split(\\\"-\\\").pop());\\n\\t\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", p, targets[i].hostname);\\n\\t\\tif (!correctTarget) {\\n\\t\\t\\t// Kill all scripts on the server.\\n\\t\\t\\tns.killall(p);\\n\\n\\t\\t\\t// Start with the correct one!\\n\\t\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", p, 1, targets[i].hostname);\\n\\t\\t}\\n\\t}\\t\\n}\\n\\nfunction getTargets(ns) {\\n\\t// TODO: Having to cap infinite loop arbitrarily. Struggling\\n\\t// to get the scanQueue to remove a server once scanned.\\n\\n\\tlet targets = [];\\n\\tlet scanQueue = [];\\n\\tlet scanned = [];\\n\\n\\tlet levelOneTargets = ns.scan();\\n\\tlevelOneTargets.forEach( t => {\\n\\t\\tlet server = ns.getServer(t);\\n\\t\\tif (!server.purchasedByPlayer && t !== \\\"home\\\" && t !== \\\"darkweb\\\") {\\n\\t\\t\\ttargets.push(t);\\n\\t\\t\\tscanQueue.push(t);\\n\\t\\t}\\n\\t});\\n\\t\\n\\tlet i = 0\\n\\twhile (scanQueue.length > 0 && i < 30) {\\n\\t\\tlet results = [];\\n\\n\\t\\tscanQueue.forEach( t => {\\n\\t\\t\\tlet result = ns.scan(t);\\n\\t\\t\\tresult.forEach( server => {\\n\\t\\t\\t\\tresults.push(server)\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\t// Do something with results.\\n\\t\\tlet uniqueResults = [...new Set(results)];\\n\\t\\tuniqueResults.forEach( async r => {\\n\\t\\t\\tif (r in scanned === false) {\\n\\t\\t\\t\\ttargets.push(r);\\t\\n\\t\\t\\t\\tscanQueue.push(r);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\ti++;\\n\\t};\\n\\n\\tlet uniqueTargets = [...new Set(targets)];\\n\\n\\tlet targetServers = [];\\n\\tuniqueTargets.forEach( t => {\\n\\t\\ttargetServers.push(ns.getServer(t));\\n\\t});\\n\\n\\tlet hackableTargets = getHackableTargets(ns, targetServers);\\n\\tlet orderedTargets = getOrderedTargets(ns, hackableTargets);\\n\\n\\treturn orderedTargets;\\n}\\n\\nfunction getHackableTargets(ns, targets) {\\n\\t// Conditions\\n\\t//\\t- Player hacking skill must be greater than skill required.\\n\\t//\\t- Max possible money must be greater than zero.\\n\\n\\tlet hackingSkill = ns.getHackingLevel();\\n\\n\\tlet hackableTargets = targets.filter( t => {\\n\\t\\treturn hackingSkill >= t.requiredHackingSkill && ns.getServerMaxMoney(t.hostname) > 0;\\n\\t});\\n\\n\\treturn hackableTargets;\\n}\\n\\nfunction getOrderedTargets(ns, hackableTargets) {\\n\\t// Score is the maximum dollars per second.\\n\\t// This is not the same rate that will be effected in\\n\\t// practice, as this would drain the server of all money.\\n\\n\\tlet scoredTargets = [];\\n\\n\\thackableTargets.forEach( h => {\\n\\t\\tlet maxMoney = ns.getServerMaxMoney(h.hostname);\\n\\t\\tlet batchTime = ns.getWeakenTime(h.hostname) + 1000; // Weaken always takes longest.\\n\\t\\tlet score = maxMoney / batchTime;\\n\\t\\tscoredTargets.push({\\n\\t\\t\\thostname: h.hostname,\\n\\t\\t\\tscore: score\\n\\t\\t});\\n\\t});\\n\\n\\tlet orderedTargets = scoredTargets.sort( (a, b) => {\\n\\t\\treturn b.score - a.score;\\n\\t});\\n\\n\\tlet orderedTargetServers = [];\\n\\torderedTargets.forEach( o => {\\n\\t\\torderedTargetServers.push(ns.getServer(o.hostname));\\n\\t});\\n\\n\\treturn orderedTargets;\\n}\",\"filename\":\"/scripts/000-master-controller.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":12.35,\"server\":\"pserv-016\",\"moduleSequenceNumber\":1475,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet server = ns.getServer();\\n\\n\\tlet maxThreads = Math.trunc(ns.getServerMaxRam(server.hostname) / 2);\\n\\tlet offset = 200;\\n\\n\\t// Prepare server.\\n\\tunlockServer(ns, target);\\n\\n\\tlet serverReady = false\\n\\twhile (!serverReady) {\\n\\t\\tstartBatch(ns, target, maxThreads, true);\\n        serverReady = getServerStatus(ns, target);\\n\\t\\tif (!serverReady) {\\n            let waitTime = ns.getWeakenTime(target);\\n\\t\\t\\tawait ns.sleep(waitTime + (5 * offset));\\n\\t\\t}\\n\\t}\\n\\n\\t// Set up and run batches.\\n\\twhile (true) {\\n        let freeRam = ns.getServerMaxRam(server.hostname) - ns.getServerUsedRam(server.hostname);\\n        if (freeRam >= 20) {\\n            startBatch(ns, target, maxThreads, false);\\n            await ns.sleep(1000);\\n        } else {\\n            await ns.sleep(2000);\\n        }\\n\\t}\\n}\\n\\nfunction getServerStatus(ns, target) {\\n    let maxMoney = ns.getServerMaxMoney(target);\\n    let currentMoney = ns.getServerMoneyAvailable(target);\\n    let moneyReady = maxMoney == currentMoney;\\n\\n    let minSecurity = ns.getServerMinSecurityLevel(target);\\n    let currentSecurity = ns.getServerSecurityLevel(target);\\n    let securityReady = minSecurity == currentSecurity;\\n\\n    if (moneyReady && securityReady) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction unlockServer(ns, target) {\\n    try {\\n        ns.brutessh(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.ftpcrack(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.relaysmtp(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.httpworm(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.sqlinject(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    ns.nuke(target);\\n}\\n\\nfunction startBatch(ns, target, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\tns.exec(\\\"scripts/110-batch.js\\\", server.hostname, 1, target, threads, preparingServer);\\n}\",\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/a05f2476-5ecc-49e2-9b0c-399aacbf6ac0\",\"moduleSequenceNumber\":1481}],\"dependents\":[],\"ramUsage\":5.75,\"server\":\"pserv-016\",\"moduleSequenceNumber\":1481,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet maxThreads = ns.args[1];\\n\\tlet preparingServer = ns.args[2] | false;\\n\\n\\tlet times = getTimes(ns, target);\\n\\tlet threads = getThreads(ns, target, maxThreads);\\n\\n\\tlet validThreads = Object.keys(threads).every( n => threads[n] >= 1);\\n\\t// ns.tprint(validThreads);\\n\\tif (validThreads) {\\n\\t\\tawait runBatch(ns, target, times, threads, preparingServer);\\n\\t}\\n}\\n\\nfunction getTimes(ns, target) {\\n\\t// Get run times for server.\\n\\tlet wTime = ns.getWeakenTime(target);\\n\\tlet gTime = ns.getGrowTime(target);\\n\\tlet hTime = ns.getHackTime(target);\\n\\tlet times = {\\n\\t\\tw: wTime,\\n\\t\\tg: gTime,\\n\\t\\th: hTime,\\n\\t\\toffset: 200\\n\\t}\\n\\n\\treturn times;\\n}\\n\\nfunction getThreads(ns, target, maxThreads) {\\n\\tlet multiplier = 2\\n\\n\\t// Get ideal number of threads for preferred hack amount.\\n\\tlet maxHackAmount = ns.getServerMaxMoney(target) / multiplier;\\n\\tlet hackThreads = ns.hackAnalyzeThreads(target, maxHackAmount);\\n\\tlet hackSecurityEffect = ns.hackAnalyzeSecurity(hackThreads);\\n\\n\\t// First weaken reduces security after hack. Calculate threads needed.\\n\\tlet firstWeakenEffect = 0;\\n\\tlet firstWeakenThreads = hackThreads\\n\\twhile (firstWeakenEffect < hackSecurityEffect) {\\n\\t\\tfirstWeakenEffect = ns.weakenAnalyze(firstWeakenThreads);\\n\\t\\tfirstWeakenThreads++;\\n\\t}\\n\\n\\t// Get grow threads needed to bring back up to full.\\n\\tlet growThreads = ns.growthAnalyze(target, multiplier);\\n\\tlet growSecurityEffect = ns.growthAnalyzeSecurity(growThreads);\\n\\n\\t// Second weaken reduces security after growth. Calculate threads needed.\\n\\tlet secondWeakenEffect = 0;\\n\\tlet secondWeakenThreads = growThreads\\n\\twhile (secondWeakenEffect < growSecurityEffect) {\\n\\t\\tsecondWeakenEffect = ns.weakenAnalyze(secondWeakenThreads);\\n\\t\\tsecondWeakenThreads++;\\n\\t}\\n\\n\\t// Scale down if this would use more threads than the maximum allowed.\\n\\tlet totalThreads = hackThreads + growThreads + firstWeakenThreads + secondWeakenThreads;\\n\\tif (totalThreads > maxThreads) {\\n\\t\\tlet ratio = (maxThreads / totalThreads) * 0.8;\\n\\t\\t\\n\\t\\thackThreads = hackThreads * ratio;\\n\\t\\tgrowThreads = growThreads * ratio;\\n\\t\\tfirstWeakenThreads = firstWeakenThreads * ratio;\\n\\t\\tsecondWeakenThreads = secondWeakenThreads * ratio;\\n\\t}\\n\\n\\tif (hackThreads < 1) {\\n\\t\\thackThreads = 1;\\n\\t}\\n\\tif (growThreads < 1) {\\n\\t\\tgrowThreads = 1;\\n\\t}\\n\\tif (firstWeakenThreads < 1) {\\n\\t\\tfirstWeakenThreads = 1;\\n\\t}\\n\\tif (secondWeakenThreads < 1) {\\n\\t\\tsecondWeakenThreads = 1;\\n\\t}\\n\\n\\tlet threads = {\\n\\t\\tw1: firstWeakenThreads,\\n\\t\\tw2: secondWeakenThreads,\\n\\t\\tg: growThreads,\\n\\t\\th: hackThreads\\n\\t}\\n\\n\\treturn threads;\\n}\\n\\nasync function runBatch(ns, target, times, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\t// Finish order:\\n\\t// 1. Hack\\n\\t// 2. Weaken\\n\\t// 3. Grow\\n\\t// 4. Weaken\\n\\n\\tlet w1Sleep = times.offset;\\n\\tlet w2Sleep = 3 * times.offset;\\n\\tlet gSleep = (times.w - times.g) + (times.offset * 2) - w2Sleep;\\n\\tlet hSleep = (times.w - times.h) - (w2Sleep + gSleep);\\n\\n\\tawait ns.sleep(w1Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w1, target);\\n\\t\\n\\tawait ns.sleep(w2Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w2, target);\\n\\t\\n\\tawait ns.sleep(gSleep);\\n\\tns.exec(\\\"scripts/112-grow.js\\\", server.hostname, threads.g, target);\\n\\t\\n\\tif (!preparingServer) {\\n\\t\\tawait ns.sleep(hSleep);\\n\\t\\tns.exec(\\\"scripts/111-hack.js\\\", server.hostname, threads.h, target);\\n\\t}\\n}\",\"filename\":\"/scripts/110-batch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/1852f896-9660-44e7-99d1-15a35aaf954a\",\"moduleSequenceNumber\":1482}],\"dependents\":[],\"ramUsage\":10.15,\"server\":\"pserv-016\",\"moduleSequenceNumber\":1482,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.hack(target);\\t\\n}\",\"filename\":\"/scripts/111-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-016\",\"moduleSequenceNumber\":1478,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"/scripts/112-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/77449b09-5378-4f34-b72a-132037df2e05\",\"moduleSequenceNumber\":1723}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-016\",\"moduleSequenceNumber\":1723,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"/scripts/113-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/084c38e0-8675-4c57-9efd-7b814c7c65ff\",\"moduleSequenceNumber\":1483}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-016\",\"moduleSequenceNumber\":1483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-017\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-017\",\"httpPortOpen\":false,\"ip\":\"73.5.8.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":952.15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"/scripts/100-batch-controller.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.209999999999965,\"pid\":8789,\"ramUsage\":5.75,\"server\":\"pserv-017\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/e2861c6f-053a-4e2f-adec-44b12d7ede0e\",\"moduleSequenceNumber\":1720}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",524288,true],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.209999999999965,\"pid\":8790,\"ramUsage\":10.15,\"server\":\"pserv-017\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/dc917c39-81b6-4e1e-972e-6bf2c66ec4ba\",\"moduleSequenceNumber\":1721}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.00999999999996,\"pid\":8804,\"ramUsage\":1.75,\"server\":\"pserv-017\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/4f5ff206-b8f9-43a7-89f6-b7d5e78ef20b\",\"moduleSequenceNumber\":1722}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.409999999999954,\"pid\":8821,\"ramUsage\":1.75,\"server\":\"pserv-017\",\"threads\":534,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/4f5ff206-b8f9-43a7-89f6-b7d5e78ef20b\",\"moduleSequenceNumber\":1722}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet debug = ns.args[0];\\n\\n\\tif (debug) {\\n\\t\\tawait earn(ns);\\n\\t} else {\\n\\t\\twhile (true) {\\n\\t\\t\\tawait earn(ns);\\n\\t\\t\\tawait ns.sleep(60000);\\n\\t\\t}\\n\\t}\\n}\\n\\nasync function earn(ns) {\\n\\tlet pservLimit = ns.getPurchasedServerLimit();\\n\\tlet maxServerRam = ns.getPurchasedServerMaxRam();\\n\\tlet maxServerCost = ns.getPurchasedServerCost(maxServerRam);\\n\\tlet money = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet pservs = ns.getPurchasedServers();\\n\\t\\n\\t// Identify targets, in order of best to hack.\\n\\tlet targets = getTargets(ns);\\n\\n\\t// Make sure that \\\"home\\\" is hacking the one at the target\\n\\t// top of the list.\\n\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", targets[0].hostname);\\n\\tif (!correctTarget) {\\n\\t\\t// Kill all scripts except this one.\\n\\t\\tlet currentScripts = ns.ps(\\\"home\\\");\\n\\t\\tlet batchScripts = currentScripts.filter( s => {\\n\\t\\t\\treturn s.filename != ns.getScriptName();\\n\\t\\t});\\n\\t\\tbatchScripts.forEach(s => {\\n\\t\\t\\tns.kill(s.pid);\\n\\t\\t});\\n\\n\\t\\t// Start with the correct one!\\n\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", 1, targets[0].hostname);\\n\\t}\\n\\n\\t// Buy a maxed out server to hack other targets.\\n\\tif (money >= maxServerCost && pservs.length < pservLimit) {\\n\\t\\tlet i = pservs.length + 1;\\n\\t\\tlet suffix = \\\"000\\\";\\n\\n\\t\\tif (i < 10) {\\n\\t\\t\\tsuffix = \\\"00\\\" + i.toString();\\n\\t\\t} else if (i < 100) {\\n\\t\\t\\tsuffix = \\\"0\\\" + i.toString();\\n\\t\\t} else {\\n\\t\\t\\tsuffix = i.toString();\\n\\t\\t}\\n\\n\\t\\tlet hostname = \\\"pserv-\\\" + suffix;\\n\\t\\tns.purchaseServer(hostname, ns.getPurchasedServerMaxRam());\\n\\t}\\n\\n\\t// Starting hacking using purchased servers.\\n\\t// Get pservs again.\\n\\tpservs = ns.getPurchasedServers();\\n\\n\\tfor (let n in pservs) {\\n\\t\\tlet p = pservs[n]\\n\\t\\t// Make sure pserv has the latest scripts.\\n\\t\\t// Get scripts on home and on server.\\n\\t\\tlet homeScripts = ns.ls(\\\"home\\\", \\\"/scripts/\\\");\\n\\t\\t\\n\\t\\t// Copy all scripts back to server.\\n\\t\\tawait ns.scp(homeScripts, p);\\n\\n\\t\\tlet i = parseInt(p.split(\\\"-\\\").pop());\\n\\t\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", p, targets[i].hostname);\\n\\t\\tif (!correctTarget) {\\n\\t\\t\\t// Kill all scripts on the server.\\n\\t\\t\\tns.killall(p);\\n\\n\\t\\t\\t// Start with the correct one!\\n\\t\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", p, 1, targets[i].hostname);\\n\\t\\t}\\n\\t}\\t\\n}\\n\\nfunction getTargets(ns) {\\n\\t// TODO: Having to cap infinite loop arbitrarily. Struggling\\n\\t// to get the scanQueue to remove a server once scanned.\\n\\n\\tlet targets = [];\\n\\tlet scanQueue = [];\\n\\tlet scanned = [];\\n\\n\\tlet levelOneTargets = ns.scan();\\n\\tlevelOneTargets.forEach( t => {\\n\\t\\tlet server = ns.getServer(t);\\n\\t\\tif (!server.purchasedByPlayer && t !== \\\"home\\\" && t !== \\\"darkweb\\\") {\\n\\t\\t\\ttargets.push(t);\\n\\t\\t\\tscanQueue.push(t);\\n\\t\\t}\\n\\t});\\n\\t\\n\\tlet i = 0\\n\\twhile (scanQueue.length > 0 && i < 30) {\\n\\t\\tlet results = [];\\n\\n\\t\\tscanQueue.forEach( t => {\\n\\t\\t\\tlet result = ns.scan(t);\\n\\t\\t\\tresult.forEach( server => {\\n\\t\\t\\t\\tresults.push(server)\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\t// Do something with results.\\n\\t\\tlet uniqueResults = [...new Set(results)];\\n\\t\\tuniqueResults.forEach( async r => {\\n\\t\\t\\tif (r in scanned === false) {\\n\\t\\t\\t\\ttargets.push(r);\\t\\n\\t\\t\\t\\tscanQueue.push(r);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\ti++;\\n\\t};\\n\\n\\tlet uniqueTargets = [...new Set(targets)];\\n\\n\\tlet targetServers = [];\\n\\tuniqueTargets.forEach( t => {\\n\\t\\ttargetServers.push(ns.getServer(t));\\n\\t});\\n\\n\\tlet hackableTargets = getHackableTargets(ns, targetServers);\\n\\tlet orderedTargets = getOrderedTargets(ns, hackableTargets);\\n\\n\\treturn orderedTargets;\\n}\\n\\nfunction getHackableTargets(ns, targets) {\\n\\t// Conditions\\n\\t//\\t- Player hacking skill must be greater than skill required.\\n\\t//\\t- Max possible money must be greater than zero.\\n\\n\\tlet hackingSkill = ns.getHackingLevel();\\n\\n\\tlet hackableTargets = targets.filter( t => {\\n\\t\\treturn hackingSkill >= t.requiredHackingSkill && ns.getServerMaxMoney(t.hostname) > 0;\\n\\t});\\n\\n\\treturn hackableTargets;\\n}\\n\\nfunction getOrderedTargets(ns, hackableTargets) {\\n\\t// Score is the maximum dollars per second.\\n\\t// This is not the same rate that will be effected in\\n\\t// practice, as this would drain the server of all money.\\n\\n\\tlet scoredTargets = [];\\n\\n\\thackableTargets.forEach( h => {\\n\\t\\tlet maxMoney = ns.getServerMaxMoney(h.hostname);\\n\\t\\tlet batchTime = ns.getWeakenTime(h.hostname) + 1000; // Weaken always takes longest.\\n\\t\\tlet score = maxMoney / batchTime;\\n\\t\\tscoredTargets.push({\\n\\t\\t\\thostname: h.hostname,\\n\\t\\t\\tscore: score\\n\\t\\t});\\n\\t});\\n\\n\\tlet orderedTargets = scoredTargets.sort( (a, b) => {\\n\\t\\treturn b.score - a.score;\\n\\t});\\n\\n\\tlet orderedTargetServers = [];\\n\\torderedTargets.forEach( o => {\\n\\t\\torderedTargetServers.push(ns.getServer(o.hostname));\\n\\t});\\n\\n\\treturn orderedTargets;\\n}\",\"filename\":\"/scripts/000-master-controller.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":12.35,\"server\":\"pserv-017\",\"moduleSequenceNumber\":1714,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet server = ns.getServer();\\n\\n\\tlet maxThreads = Math.trunc(ns.getServerMaxRam(server.hostname) / 2);\\n\\tlet offset = 200;\\n\\n\\t// Prepare server.\\n\\tunlockServer(ns, target);\\n\\n\\tlet serverReady = false\\n\\twhile (!serverReady) {\\n\\t\\tstartBatch(ns, target, maxThreads, true);\\n        serverReady = getServerStatus(ns, target);\\n\\t\\tif (!serverReady) {\\n            let waitTime = ns.getWeakenTime(target);\\n\\t\\t\\tawait ns.sleep(waitTime + (5 * offset));\\n\\t\\t}\\n\\t}\\n\\n\\t// Set up and run batches.\\n\\twhile (true) {\\n        let freeRam = ns.getServerMaxRam(server.hostname) - ns.getServerUsedRam(server.hostname);\\n        if (freeRam >= 20) {\\n            startBatch(ns, target, maxThreads, false);\\n            await ns.sleep(1000);\\n        } else {\\n            await ns.sleep(2000);\\n        }\\n\\t}\\n}\\n\\nfunction getServerStatus(ns, target) {\\n    let maxMoney = ns.getServerMaxMoney(target);\\n    let currentMoney = ns.getServerMoneyAvailable(target);\\n    let moneyReady = maxMoney == currentMoney;\\n\\n    let minSecurity = ns.getServerMinSecurityLevel(target);\\n    let currentSecurity = ns.getServerSecurityLevel(target);\\n    let securityReady = minSecurity == currentSecurity;\\n\\n    if (moneyReady && securityReady) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction unlockServer(ns, target) {\\n    try {\\n        ns.brutessh(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.ftpcrack(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.relaysmtp(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.httpworm(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.sqlinject(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    ns.nuke(target);\\n}\\n\\nfunction startBatch(ns, target, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\tns.exec(\\\"scripts/110-batch.js\\\", server.hostname, 1, target, threads, preparingServer);\\n}\",\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/e2861c6f-053a-4e2f-adec-44b12d7ede0e\",\"moduleSequenceNumber\":1720}],\"dependents\":[],\"ramUsage\":5.75,\"server\":\"pserv-017\",\"moduleSequenceNumber\":1720,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet maxThreads = ns.args[1];\\n\\tlet preparingServer = ns.args[2] | false;\\n\\n\\tlet times = getTimes(ns, target);\\n\\tlet threads = getThreads(ns, target, maxThreads);\\n\\n\\tlet validThreads = Object.keys(threads).every( n => threads[n] >= 1);\\n\\t// ns.tprint(validThreads);\\n\\tif (validThreads) {\\n\\t\\tawait runBatch(ns, target, times, threads, preparingServer);\\n\\t}\\n}\\n\\nfunction getTimes(ns, target) {\\n\\t// Get run times for server.\\n\\tlet wTime = ns.getWeakenTime(target);\\n\\tlet gTime = ns.getGrowTime(target);\\n\\tlet hTime = ns.getHackTime(target);\\n\\tlet times = {\\n\\t\\tw: wTime,\\n\\t\\tg: gTime,\\n\\t\\th: hTime,\\n\\t\\toffset: 200\\n\\t}\\n\\n\\treturn times;\\n}\\n\\nfunction getThreads(ns, target, maxThreads) {\\n\\tlet multiplier = 2\\n\\n\\t// Get ideal number of threads for preferred hack amount.\\n\\tlet maxHackAmount = ns.getServerMaxMoney(target) / multiplier;\\n\\tlet hackThreads = ns.hackAnalyzeThreads(target, maxHackAmount);\\n\\tlet hackSecurityEffect = ns.hackAnalyzeSecurity(hackThreads);\\n\\n\\t// First weaken reduces security after hack. Calculate threads needed.\\n\\tlet firstWeakenEffect = 0;\\n\\tlet firstWeakenThreads = hackThreads\\n\\twhile (firstWeakenEffect < hackSecurityEffect) {\\n\\t\\tfirstWeakenEffect = ns.weakenAnalyze(firstWeakenThreads);\\n\\t\\tfirstWeakenThreads++;\\n\\t}\\n\\n\\t// Get grow threads needed to bring back up to full.\\n\\tlet growThreads = ns.growthAnalyze(target, multiplier);\\n\\tlet growSecurityEffect = ns.growthAnalyzeSecurity(growThreads);\\n\\n\\t// Second weaken reduces security after growth. Calculate threads needed.\\n\\tlet secondWeakenEffect = 0;\\n\\tlet secondWeakenThreads = growThreads\\n\\twhile (secondWeakenEffect < growSecurityEffect) {\\n\\t\\tsecondWeakenEffect = ns.weakenAnalyze(secondWeakenThreads);\\n\\t\\tsecondWeakenThreads++;\\n\\t}\\n\\n\\t// Scale down if this would use more threads than the maximum allowed.\\n\\tlet totalThreads = hackThreads + growThreads + firstWeakenThreads + secondWeakenThreads;\\n\\tif (totalThreads > maxThreads) {\\n\\t\\tlet ratio = (maxThreads / totalThreads) * 0.8;\\n\\t\\t\\n\\t\\thackThreads = hackThreads * ratio;\\n\\t\\tgrowThreads = growThreads * ratio;\\n\\t\\tfirstWeakenThreads = firstWeakenThreads * ratio;\\n\\t\\tsecondWeakenThreads = secondWeakenThreads * ratio;\\n\\t}\\n\\n\\tif (hackThreads < 1) {\\n\\t\\thackThreads = 1;\\n\\t}\\n\\tif (growThreads < 1) {\\n\\t\\tgrowThreads = 1;\\n\\t}\\n\\tif (firstWeakenThreads < 1) {\\n\\t\\tfirstWeakenThreads = 1;\\n\\t}\\n\\tif (secondWeakenThreads < 1) {\\n\\t\\tsecondWeakenThreads = 1;\\n\\t}\\n\\n\\tlet threads = {\\n\\t\\tw1: firstWeakenThreads,\\n\\t\\tw2: secondWeakenThreads,\\n\\t\\tg: growThreads,\\n\\t\\th: hackThreads\\n\\t}\\n\\n\\treturn threads;\\n}\\n\\nasync function runBatch(ns, target, times, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\t// Finish order:\\n\\t// 1. Hack\\n\\t// 2. Weaken\\n\\t// 3. Grow\\n\\t// 4. Weaken\\n\\n\\tlet w1Sleep = times.offset;\\n\\tlet w2Sleep = 3 * times.offset;\\n\\tlet gSleep = (times.w - times.g) + (times.offset * 2) - w2Sleep;\\n\\tlet hSleep = (times.w - times.h) - (w2Sleep + gSleep);\\n\\n\\tawait ns.sleep(w1Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w1, target);\\n\\t\\n\\tawait ns.sleep(w2Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w2, target);\\n\\t\\n\\tawait ns.sleep(gSleep);\\n\\tns.exec(\\\"scripts/112-grow.js\\\", server.hostname, threads.g, target);\\n\\t\\n\\tif (!preparingServer) {\\n\\t\\tawait ns.sleep(hSleep);\\n\\t\\tns.exec(\\\"scripts/111-hack.js\\\", server.hostname, threads.h, target);\\n\\t}\\n}\",\"filename\":\"/scripts/110-batch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/dc917c39-81b6-4e1e-972e-6bf2c66ec4ba\",\"moduleSequenceNumber\":1721}],\"dependents\":[],\"ramUsage\":10.15,\"server\":\"pserv-017\",\"moduleSequenceNumber\":1721,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.hack(target);\\t\\n}\",\"filename\":\"/scripts/111-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-017\",\"moduleSequenceNumber\":1717,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"/scripts/112-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/dbd80c4b-bc98-4125-ad00-ded1b1599fe8\",\"moduleSequenceNumber\":1724}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-017\",\"moduleSequenceNumber\":1724,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"/scripts/113-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/4f5ff206-b8f9-43a7-89f6-b7d5e78ef20b\",\"moduleSequenceNumber\":1722}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-017\",\"moduleSequenceNumber\":1722,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-018\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-018\",\"httpPortOpen\":false,\"ip\":\"99.4.4.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1871.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"/scripts/100-batch-controller.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":155.6099999999997,\"pid\":7508,\"ramUsage\":5.75,\"server\":\"pserv-018\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":155.20999999999972,\"pid\":7518,\"ramUsage\":1.75,\"server\":\"pserv-018\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.60999999999976,\"pid\":7526,\"ramUsage\":1.75,\"server\":\"pserv-018\",\"threads\":533,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/8f9a40ef-20d7-4c2f-a602-67b403055fa2\",\"moduleSequenceNumber\":1857}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":92.61000000000078,\"pid\":8181,\"ramUsage\":1.75,\"server\":\"pserv-018\",\"threads\":532,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet debug = ns.args[0];\\n\\n\\tif (debug) {\\n\\t\\tawait earn(ns);\\n\\t} else {\\n\\t\\twhile (true) {\\n\\t\\t\\tawait earn(ns);\\n\\t\\t\\tawait ns.sleep(60000);\\n\\t\\t}\\n\\t}\\n}\\n\\nasync function earn(ns) {\\n\\tlet pservLimit = ns.getPurchasedServerLimit();\\n\\tlet maxServerRam = ns.getPurchasedServerMaxRam();\\n\\tlet maxServerCost = ns.getPurchasedServerCost(maxServerRam);\\n\\tlet money = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet pservs = ns.getPurchasedServers();\\n\\t\\n\\t// Identify targets, in order of best to hack.\\n\\tlet targets = getTargets(ns);\\n\\n\\t// Make sure that \\\"home\\\" is hacking the one at the target\\n\\t// top of the list.\\n\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", targets[0].hostname);\\n\\tif (!correctTarget) {\\n\\t\\t// Kill all scripts except this one.\\n\\t\\tlet currentScripts = ns.ps(\\\"home\\\");\\n\\t\\tlet batchScripts = currentScripts.filter( s => {\\n\\t\\t\\treturn s.filename != ns.getScriptName();\\n\\t\\t});\\n\\t\\tbatchScripts.forEach(s => {\\n\\t\\t\\tns.kill(s.pid);\\n\\t\\t});\\n\\n\\t\\t// Start with the correct one!\\n\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", 1, targets[0].hostname);\\n\\t}\\n\\n\\t// Buy a maxed out server to hack other targets.\\n\\tif (money >= maxServerCost && pservs.length < pservLimit) {\\n\\t\\tlet i = pservs.length + 1;\\n\\t\\tlet suffix = \\\"000\\\";\\n\\n\\t\\tif (i < 10) {\\n\\t\\t\\tsuffix = \\\"00\\\" + i.toString();\\n\\t\\t} else if (i < 100) {\\n\\t\\t\\tsuffix = \\\"0\\\" + i.toString();\\n\\t\\t} else {\\n\\t\\t\\tsuffix = i.toString();\\n\\t\\t}\\n\\n\\t\\tlet hostname = \\\"pserv-\\\" + suffix;\\n\\t\\tns.purchaseServer(hostname, ns.getPurchasedServerMaxRam());\\n\\t}\\n\\n\\t// Starting hacking using purchased servers.\\n\\t// Get pservs again.\\n\\tpservs = ns.getPurchasedServers();\\n\\n\\tfor (let n in pservs) {\\n\\t\\tlet p = pservs[n]\\n\\t\\t// Make sure pserv has the latest scripts.\\n\\t\\t// Get scripts on home and on server.\\n\\t\\tlet homeScripts = ns.ls(\\\"home\\\", \\\"/scripts/\\\");\\n\\t\\t\\n\\t\\t// Copy all scripts back to server.\\n\\t\\tawait ns.scp(homeScripts, p);\\n\\n\\t\\tlet i = parseInt(p.split(\\\"-\\\").pop());\\n\\t\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", p, targets[i].hostname);\\n\\t\\tif (!correctTarget) {\\n\\t\\t\\t// Kill all scripts on the server.\\n\\t\\t\\tns.killall(p);\\n\\n\\t\\t\\t// Start with the correct one!\\n\\t\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", p, 1, targets[i].hostname);\\n\\t\\t}\\n\\t}\\t\\n}\\n\\nfunction getTargets(ns) {\\n\\t// TODO: Having to cap infinite loop arbitrarily. Struggling\\n\\t// to get the scanQueue to remove a server once scanned.\\n\\n\\tlet targets = [];\\n\\tlet scanQueue = [];\\n\\tlet scanned = [];\\n\\n\\tlet levelOneTargets = ns.scan();\\n\\tlevelOneTargets.forEach( t => {\\n\\t\\tlet server = ns.getServer(t);\\n\\t\\tif (!server.purchasedByPlayer && t !== \\\"home\\\" && t !== \\\"darkweb\\\") {\\n\\t\\t\\ttargets.push(t);\\n\\t\\t\\tscanQueue.push(t);\\n\\t\\t}\\n\\t});\\n\\t\\n\\tlet i = 0\\n\\twhile (scanQueue.length > 0 && i < 30) {\\n\\t\\tlet results = [];\\n\\n\\t\\tscanQueue.forEach( t => {\\n\\t\\t\\tlet result = ns.scan(t);\\n\\t\\t\\tresult.forEach( server => {\\n\\t\\t\\t\\tresults.push(server)\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\t// Do something with results.\\n\\t\\tlet uniqueResults = [...new Set(results)];\\n\\t\\tuniqueResults.forEach( async r => {\\n\\t\\t\\tif (r in scanned === false) {\\n\\t\\t\\t\\ttargets.push(r);\\t\\n\\t\\t\\t\\tscanQueue.push(r);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\ti++;\\n\\t};\\n\\n\\tlet uniqueTargets = [...new Set(targets)];\\n\\n\\tlet targetServers = [];\\n\\tuniqueTargets.forEach( t => {\\n\\t\\ttargetServers.push(ns.getServer(t));\\n\\t});\\n\\n\\tlet hackableTargets = getHackableTargets(ns, targetServers);\\n\\tlet orderedTargets = getOrderedTargets(ns, hackableTargets);\\n\\n\\treturn orderedTargets;\\n}\\n\\nfunction getHackableTargets(ns, targets) {\\n\\t// Conditions\\n\\t//\\t- Player hacking skill must be greater than skill required.\\n\\t//\\t- Max possible money must be greater than zero.\\n\\n\\tlet hackingSkill = ns.getHackingLevel();\\n\\n\\tlet hackableTargets = targets.filter( t => {\\n\\t\\treturn hackingSkill >= t.requiredHackingSkill && ns.getServerMaxMoney(t.hostname) > 0;\\n\\t});\\n\\n\\treturn hackableTargets;\\n}\\n\\nfunction getOrderedTargets(ns, hackableTargets) {\\n\\t// Score is the maximum dollars per second.\\n\\t// This is not the same rate that will be effected in\\n\\t// practice, as this would drain the server of all money.\\n\\n\\tlet scoredTargets = [];\\n\\n\\thackableTargets.forEach( h => {\\n\\t\\tlet maxMoney = ns.getServerMaxMoney(h.hostname);\\n\\t\\tlet batchTime = ns.getWeakenTime(h.hostname) + 1000; // Weaken always takes longest.\\n\\t\\tlet score = maxMoney / batchTime;\\n\\t\\tscoredTargets.push({\\n\\t\\t\\thostname: h.hostname,\\n\\t\\t\\tscore: score\\n\\t\\t});\\n\\t});\\n\\n\\tlet orderedTargets = scoredTargets.sort( (a, b) => {\\n\\t\\treturn b.score - a.score;\\n\\t});\\n\\n\\tlet orderedTargetServers = [];\\n\\torderedTargets.forEach( o => {\\n\\t\\torderedTargetServers.push(ns.getServer(o.hostname));\\n\\t});\\n\\n\\treturn orderedTargets;\\n}\",\"filename\":\"/scripts/000-master-controller.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":12.35,\"server\":\"pserv-018\",\"moduleSequenceNumber\":1849,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet server = ns.getServer();\\n\\n\\tlet maxThreads = Math.trunc(ns.getServerMaxRam(server.hostname) / 2);\\n\\tlet offset = 200;\\n\\n\\t// Prepare server.\\n\\tunlockServer(ns, target);\\n\\n\\tlet serverReady = false\\n\\twhile (!serverReady) {\\n\\t\\tstartBatch(ns, target, maxThreads, true);\\n        serverReady = getServerStatus(ns, target);\\n\\t\\tif (!serverReady) {\\n            let waitTime = ns.getWeakenTime(target);\\n\\t\\t\\tawait ns.sleep(waitTime + (5 * offset));\\n\\t\\t}\\n\\t}\\n\\n\\t// Set up and run batches.\\n\\twhile (true) {\\n        let freeRam = ns.getServerMaxRam(server.hostname) - ns.getServerUsedRam(server.hostname);\\n        if (freeRam >= 20) {\\n            startBatch(ns, target, maxThreads, false);\\n            await ns.sleep(1000);\\n        } else {\\n            await ns.sleep(2000);\\n        }\\n\\t}\\n}\\n\\nfunction getServerStatus(ns, target) {\\n    let maxMoney = ns.getServerMaxMoney(target);\\n    let currentMoney = ns.getServerMoneyAvailable(target);\\n    let moneyReady = maxMoney == currentMoney;\\n\\n    let minSecurity = ns.getServerMinSecurityLevel(target);\\n    let currentSecurity = ns.getServerSecurityLevel(target);\\n    let securityReady = minSecurity == currentSecurity;\\n\\n    if (moneyReady && securityReady) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction unlockServer(ns, target) {\\n    try {\\n        ns.brutessh(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.ftpcrack(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.relaysmtp(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.httpworm(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.sqlinject(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    ns.nuke(target);\\n}\\n\\nfunction startBatch(ns, target, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\tns.exec(\\\"scripts/110-batch.js\\\", server.hostname, 1, target, threads, preparingServer);\\n}\",\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/0f2e8e9c-d686-4100-88c2-0840447773f2\",\"moduleSequenceNumber\":1855}],\"dependents\":[],\"ramUsage\":5.75,\"server\":\"pserv-018\",\"moduleSequenceNumber\":1855,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet maxThreads = ns.args[1];\\n\\tlet preparingServer = ns.args[2] | false;\\n\\n\\tlet times = getTimes(ns, target);\\n\\tlet threads = getThreads(ns, target, maxThreads);\\n\\n\\tlet validThreads = Object.keys(threads).every( n => threads[n] >= 1);\\n\\t// ns.tprint(validThreads);\\n\\tif (validThreads) {\\n\\t\\tawait runBatch(ns, target, times, threads, preparingServer);\\n\\t}\\n}\\n\\nfunction getTimes(ns, target) {\\n\\t// Get run times for server.\\n\\tlet wTime = ns.getWeakenTime(target);\\n\\tlet gTime = ns.getGrowTime(target);\\n\\tlet hTime = ns.getHackTime(target);\\n\\tlet times = {\\n\\t\\tw: wTime,\\n\\t\\tg: gTime,\\n\\t\\th: hTime,\\n\\t\\toffset: 200\\n\\t}\\n\\n\\treturn times;\\n}\\n\\nfunction getThreads(ns, target, maxThreads) {\\n\\tlet multiplier = 2\\n\\n\\t// Get ideal number of threads for preferred hack amount.\\n\\tlet maxHackAmount = ns.getServerMaxMoney(target) / multiplier;\\n\\tlet hackThreads = ns.hackAnalyzeThreads(target, maxHackAmount);\\n\\tlet hackSecurityEffect = ns.hackAnalyzeSecurity(hackThreads);\\n\\n\\t// First weaken reduces security after hack. Calculate threads needed.\\n\\tlet firstWeakenEffect = 0;\\n\\tlet firstWeakenThreads = hackThreads\\n\\twhile (firstWeakenEffect < hackSecurityEffect) {\\n\\t\\tfirstWeakenEffect = ns.weakenAnalyze(firstWeakenThreads);\\n\\t\\tfirstWeakenThreads++;\\n\\t}\\n\\n\\t// Get grow threads needed to bring back up to full.\\n\\tlet growThreads = ns.growthAnalyze(target, multiplier);\\n\\tlet growSecurityEffect = ns.growthAnalyzeSecurity(growThreads);\\n\\n\\t// Second weaken reduces security after growth. Calculate threads needed.\\n\\tlet secondWeakenEffect = 0;\\n\\tlet secondWeakenThreads = growThreads\\n\\twhile (secondWeakenEffect < growSecurityEffect) {\\n\\t\\tsecondWeakenEffect = ns.weakenAnalyze(secondWeakenThreads);\\n\\t\\tsecondWeakenThreads++;\\n\\t}\\n\\n\\t// Scale down if this would use more threads than the maximum allowed.\\n\\tlet totalThreads = hackThreads + growThreads + firstWeakenThreads + secondWeakenThreads;\\n\\tif (totalThreads > maxThreads) {\\n\\t\\tlet ratio = (maxThreads / totalThreads) * 0.8;\\n\\t\\t\\n\\t\\thackThreads = hackThreads * ratio;\\n\\t\\tgrowThreads = growThreads * ratio;\\n\\t\\tfirstWeakenThreads = firstWeakenThreads * ratio;\\n\\t\\tsecondWeakenThreads = secondWeakenThreads * ratio;\\n\\t}\\n\\n\\tif (hackThreads < 1) {\\n\\t\\thackThreads = 1;\\n\\t}\\n\\tif (growThreads < 1) {\\n\\t\\tgrowThreads = 1;\\n\\t}\\n\\tif (firstWeakenThreads < 1) {\\n\\t\\tfirstWeakenThreads = 1;\\n\\t}\\n\\tif (secondWeakenThreads < 1) {\\n\\t\\tsecondWeakenThreads = 1;\\n\\t}\\n\\n\\tlet threads = {\\n\\t\\tw1: firstWeakenThreads,\\n\\t\\tw2: secondWeakenThreads,\\n\\t\\tg: growThreads,\\n\\t\\th: hackThreads\\n\\t}\\n\\n\\treturn threads;\\n}\\n\\nasync function runBatch(ns, target, times, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\t// Finish order:\\n\\t// 1. Hack\\n\\t// 2. Weaken\\n\\t// 3. Grow\\n\\t// 4. Weaken\\n\\n\\tlet w1Sleep = times.offset;\\n\\tlet w2Sleep = 3 * times.offset;\\n\\tlet gSleep = (times.w - times.g) + (times.offset * 2) - w2Sleep;\\n\\tlet hSleep = (times.w - times.h) - (w2Sleep + gSleep);\\n\\n\\tawait ns.sleep(w1Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w1, target);\\n\\t\\n\\tawait ns.sleep(w2Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w2, target);\\n\\t\\n\\tawait ns.sleep(gSleep);\\n\\tns.exec(\\\"scripts/112-grow.js\\\", server.hostname, threads.g, target);\\n\\t\\n\\tif (!preparingServer) {\\n\\t\\tawait ns.sleep(hSleep);\\n\\t\\tns.exec(\\\"scripts/111-hack.js\\\", server.hostname, threads.h, target);\\n\\t}\\n}\",\"filename\":\"/scripts/110-batch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/82c94d95-6425-49ad-a99c-3598987256a8\",\"moduleSequenceNumber\":1856}],\"dependents\":[],\"ramUsage\":10.15,\"server\":\"pserv-018\",\"moduleSequenceNumber\":1856,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.hack(target);\\t\\n}\",\"filename\":\"/scripts/111-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-018\",\"moduleSequenceNumber\":1852,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"/scripts/112-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/1ccf3595-0986-4819-a737-f1c9178bbf8c\",\"moduleSequenceNumber\":1996}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-018\",\"moduleSequenceNumber\":1996,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"/scripts/113-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/8f9a40ef-20d7-4c2f-a602-67b403055fa2\",\"moduleSequenceNumber\":1857}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-018\",\"moduleSequenceNumber\":1857,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-019\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-019\",\"httpPortOpen\":false,\"ip\":\"18.3.5.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1507.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"/scripts/100-batch-controller.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":95.41000000000082,\"pid\":8140,\"ramUsage\":5.75,\"server\":\"pserv-019\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":95.01000000000082,\"pid\":8151,\"ramUsage\":1.75,\"server\":\"pserv-019\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":94.4100000000008,\"pid\":8163,\"ramUsage\":1.75,\"server\":\"pserv-019\",\"threads\":429,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/e14aff99-0706-4a07-9fcd-b508953722ee\",\"moduleSequenceNumber\":1995}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"/scripts/112-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.810000000000116,\"pid\":8664,\"ramUsage\":1.75,\"server\":\"pserv-019\",\"threads\":428,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet debug = ns.args[0];\\n\\n\\tif (debug) {\\n\\t\\tawait earn(ns);\\n\\t} else {\\n\\t\\twhile (true) {\\n\\t\\t\\tawait earn(ns);\\n\\t\\t\\tawait ns.sleep(60000);\\n\\t\\t}\\n\\t}\\n}\\n\\nasync function earn(ns) {\\n\\tlet pservLimit = ns.getPurchasedServerLimit();\\n\\tlet maxServerRam = ns.getPurchasedServerMaxRam();\\n\\tlet maxServerCost = ns.getPurchasedServerCost(maxServerRam);\\n\\tlet money = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet pservs = ns.getPurchasedServers();\\n\\t\\n\\t// Identify targets, in order of best to hack.\\n\\tlet targets = getTargets(ns);\\n\\n\\t// Make sure that \\\"home\\\" is hacking the one at the target\\n\\t// top of the list.\\n\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", targets[0].hostname);\\n\\tif (!correctTarget) {\\n\\t\\t// Kill all scripts except this one.\\n\\t\\tlet currentScripts = ns.ps(\\\"home\\\");\\n\\t\\tlet batchScripts = currentScripts.filter( s => {\\n\\t\\t\\treturn s.filename != ns.getScriptName();\\n\\t\\t});\\n\\t\\tbatchScripts.forEach(s => {\\n\\t\\t\\tns.kill(s.pid);\\n\\t\\t});\\n\\n\\t\\t// Start with the correct one!\\n\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", 1, targets[0].hostname);\\n\\t}\\n\\n\\t// Buy a maxed out server to hack other targets.\\n\\tif (money >= maxServerCost && pservs.length < pservLimit) {\\n\\t\\tlet i = pservs.length + 1;\\n\\t\\tlet suffix = \\\"000\\\";\\n\\n\\t\\tif (i < 10) {\\n\\t\\t\\tsuffix = \\\"00\\\" + i.toString();\\n\\t\\t} else if (i < 100) {\\n\\t\\t\\tsuffix = \\\"0\\\" + i.toString();\\n\\t\\t} else {\\n\\t\\t\\tsuffix = i.toString();\\n\\t\\t}\\n\\n\\t\\tlet hostname = \\\"pserv-\\\" + suffix;\\n\\t\\tns.purchaseServer(hostname, ns.getPurchasedServerMaxRam());\\n\\t}\\n\\n\\t// Starting hacking using purchased servers.\\n\\t// Get pservs again.\\n\\tpservs = ns.getPurchasedServers();\\n\\n\\tfor (let n in pservs) {\\n\\t\\tlet p = pservs[n]\\n\\t\\t// Make sure pserv has the latest scripts.\\n\\t\\t// Get scripts on home and on server.\\n\\t\\tlet homeScripts = ns.ls(\\\"home\\\", \\\"/scripts/\\\");\\n\\t\\t\\n\\t\\t// Copy all scripts back to server.\\n\\t\\tawait ns.scp(homeScripts, p);\\n\\n\\t\\tlet i = parseInt(p.split(\\\"-\\\").pop());\\n\\t\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", p, targets[i].hostname);\\n\\t\\tif (!correctTarget) {\\n\\t\\t\\t// Kill all scripts on the server.\\n\\t\\t\\tns.killall(p);\\n\\n\\t\\t\\t// Start with the correct one!\\n\\t\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", p, 1, targets[i].hostname);\\n\\t\\t}\\n\\t}\\t\\n}\\n\\nfunction getTargets(ns) {\\n\\t// TODO: Having to cap infinite loop arbitrarily. Struggling\\n\\t// to get the scanQueue to remove a server once scanned.\\n\\n\\tlet targets = [];\\n\\tlet scanQueue = [];\\n\\tlet scanned = [];\\n\\n\\tlet levelOneTargets = ns.scan();\\n\\tlevelOneTargets.forEach( t => {\\n\\t\\tlet server = ns.getServer(t);\\n\\t\\tif (!server.purchasedByPlayer && t !== \\\"home\\\" && t !== \\\"darkweb\\\") {\\n\\t\\t\\ttargets.push(t);\\n\\t\\t\\tscanQueue.push(t);\\n\\t\\t}\\n\\t});\\n\\t\\n\\tlet i = 0\\n\\twhile (scanQueue.length > 0 && i < 30) {\\n\\t\\tlet results = [];\\n\\n\\t\\tscanQueue.forEach( t => {\\n\\t\\t\\tlet result = ns.scan(t);\\n\\t\\t\\tresult.forEach( server => {\\n\\t\\t\\t\\tresults.push(server)\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\t// Do something with results.\\n\\t\\tlet uniqueResults = [...new Set(results)];\\n\\t\\tuniqueResults.forEach( async r => {\\n\\t\\t\\tif (r in scanned === false) {\\n\\t\\t\\t\\ttargets.push(r);\\t\\n\\t\\t\\t\\tscanQueue.push(r);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\ti++;\\n\\t};\\n\\n\\tlet uniqueTargets = [...new Set(targets)];\\n\\n\\tlet targetServers = [];\\n\\tuniqueTargets.forEach( t => {\\n\\t\\ttargetServers.push(ns.getServer(t));\\n\\t});\\n\\n\\tlet hackableTargets = getHackableTargets(ns, targetServers);\\n\\tlet orderedTargets = getOrderedTargets(ns, hackableTargets);\\n\\n\\treturn orderedTargets;\\n}\\n\\nfunction getHackableTargets(ns, targets) {\\n\\t// Conditions\\n\\t//\\t- Player hacking skill must be greater than skill required.\\n\\t//\\t- Max possible money must be greater than zero.\\n\\n\\tlet hackingSkill = ns.getHackingLevel();\\n\\n\\tlet hackableTargets = targets.filter( t => {\\n\\t\\treturn hackingSkill >= t.requiredHackingSkill && ns.getServerMaxMoney(t.hostname) > 0;\\n\\t});\\n\\n\\treturn hackableTargets;\\n}\\n\\nfunction getOrderedTargets(ns, hackableTargets) {\\n\\t// Score is the maximum dollars per second.\\n\\t// This is not the same rate that will be effected in\\n\\t// practice, as this would drain the server of all money.\\n\\n\\tlet scoredTargets = [];\\n\\n\\thackableTargets.forEach( h => {\\n\\t\\tlet maxMoney = ns.getServerMaxMoney(h.hostname);\\n\\t\\tlet batchTime = ns.getWeakenTime(h.hostname) + 1000; // Weaken always takes longest.\\n\\t\\tlet score = maxMoney / batchTime;\\n\\t\\tscoredTargets.push({\\n\\t\\t\\thostname: h.hostname,\\n\\t\\t\\tscore: score\\n\\t\\t});\\n\\t});\\n\\n\\tlet orderedTargets = scoredTargets.sort( (a, b) => {\\n\\t\\treturn b.score - a.score;\\n\\t});\\n\\n\\tlet orderedTargetServers = [];\\n\\torderedTargets.forEach( o => {\\n\\t\\torderedTargetServers.push(ns.getServer(o.hostname));\\n\\t});\\n\\n\\treturn orderedTargets;\\n}\",\"filename\":\"/scripts/000-master-controller.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":12.35,\"server\":\"pserv-019\",\"moduleSequenceNumber\":1987,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet server = ns.getServer();\\n\\n\\tlet maxThreads = Math.trunc(ns.getServerMaxRam(server.hostname) / 2);\\n\\tlet offset = 200;\\n\\n\\t// Prepare server.\\n\\tunlockServer(ns, target);\\n\\n\\tlet serverReady = false\\n\\twhile (!serverReady) {\\n\\t\\tstartBatch(ns, target, maxThreads, true);\\n        serverReady = getServerStatus(ns, target);\\n\\t\\tif (!serverReady) {\\n            let waitTime = ns.getWeakenTime(target);\\n\\t\\t\\tawait ns.sleep(waitTime + (5 * offset));\\n\\t\\t}\\n\\t}\\n\\n\\t// Set up and run batches.\\n\\twhile (true) {\\n        let freeRam = ns.getServerMaxRam(server.hostname) - ns.getServerUsedRam(server.hostname);\\n        if (freeRam >= 20) {\\n            startBatch(ns, target, maxThreads, false);\\n            await ns.sleep(1000);\\n        } else {\\n            await ns.sleep(2000);\\n        }\\n\\t}\\n}\\n\\nfunction getServerStatus(ns, target) {\\n    let maxMoney = ns.getServerMaxMoney(target);\\n    let currentMoney = ns.getServerMoneyAvailable(target);\\n    let moneyReady = maxMoney == currentMoney;\\n\\n    let minSecurity = ns.getServerMinSecurityLevel(target);\\n    let currentSecurity = ns.getServerSecurityLevel(target);\\n    let securityReady = minSecurity == currentSecurity;\\n\\n    if (moneyReady && securityReady) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction unlockServer(ns, target) {\\n    try {\\n        ns.brutessh(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.ftpcrack(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.relaysmtp(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.httpworm(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.sqlinject(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    ns.nuke(target);\\n}\\n\\nfunction startBatch(ns, target, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\tns.exec(\\\"scripts/110-batch.js\\\", server.hostname, 1, target, threads, preparingServer);\\n}\",\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/950b4429-36d4-42cf-a279-531615a0e6f4\",\"moduleSequenceNumber\":1993}],\"dependents\":[],\"ramUsage\":5.75,\"server\":\"pserv-019\",\"moduleSequenceNumber\":1993,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet maxThreads = ns.args[1];\\n\\tlet preparingServer = ns.args[2] | false;\\n\\n\\tlet times = getTimes(ns, target);\\n\\tlet threads = getThreads(ns, target, maxThreads);\\n\\n\\tlet validThreads = Object.keys(threads).every( n => threads[n] >= 1);\\n\\t// ns.tprint(validThreads);\\n\\tif (validThreads) {\\n\\t\\tawait runBatch(ns, target, times, threads, preparingServer);\\n\\t}\\n}\\n\\nfunction getTimes(ns, target) {\\n\\t// Get run times for server.\\n\\tlet wTime = ns.getWeakenTime(target);\\n\\tlet gTime = ns.getGrowTime(target);\\n\\tlet hTime = ns.getHackTime(target);\\n\\tlet times = {\\n\\t\\tw: wTime,\\n\\t\\tg: gTime,\\n\\t\\th: hTime,\\n\\t\\toffset: 200\\n\\t}\\n\\n\\treturn times;\\n}\\n\\nfunction getThreads(ns, target, maxThreads) {\\n\\tlet multiplier = 2\\n\\n\\t// Get ideal number of threads for preferred hack amount.\\n\\tlet maxHackAmount = ns.getServerMaxMoney(target) / multiplier;\\n\\tlet hackThreads = ns.hackAnalyzeThreads(target, maxHackAmount);\\n\\tlet hackSecurityEffect = ns.hackAnalyzeSecurity(hackThreads);\\n\\n\\t// First weaken reduces security after hack. Calculate threads needed.\\n\\tlet firstWeakenEffect = 0;\\n\\tlet firstWeakenThreads = hackThreads\\n\\twhile (firstWeakenEffect < hackSecurityEffect) {\\n\\t\\tfirstWeakenEffect = ns.weakenAnalyze(firstWeakenThreads);\\n\\t\\tfirstWeakenThreads++;\\n\\t}\\n\\n\\t// Get grow threads needed to bring back up to full.\\n\\tlet growThreads = ns.growthAnalyze(target, multiplier);\\n\\tlet growSecurityEffect = ns.growthAnalyzeSecurity(growThreads);\\n\\n\\t// Second weaken reduces security after growth. Calculate threads needed.\\n\\tlet secondWeakenEffect = 0;\\n\\tlet secondWeakenThreads = growThreads\\n\\twhile (secondWeakenEffect < growSecurityEffect) {\\n\\t\\tsecondWeakenEffect = ns.weakenAnalyze(secondWeakenThreads);\\n\\t\\tsecondWeakenThreads++;\\n\\t}\\n\\n\\t// Scale down if this would use more threads than the maximum allowed.\\n\\tlet totalThreads = hackThreads + growThreads + firstWeakenThreads + secondWeakenThreads;\\n\\tif (totalThreads > maxThreads) {\\n\\t\\tlet ratio = (maxThreads / totalThreads) * 0.8;\\n\\t\\t\\n\\t\\thackThreads = hackThreads * ratio;\\n\\t\\tgrowThreads = growThreads * ratio;\\n\\t\\tfirstWeakenThreads = firstWeakenThreads * ratio;\\n\\t\\tsecondWeakenThreads = secondWeakenThreads * ratio;\\n\\t}\\n\\n\\tif (hackThreads < 1) {\\n\\t\\thackThreads = 1;\\n\\t}\\n\\tif (growThreads < 1) {\\n\\t\\tgrowThreads = 1;\\n\\t}\\n\\tif (firstWeakenThreads < 1) {\\n\\t\\tfirstWeakenThreads = 1;\\n\\t}\\n\\tif (secondWeakenThreads < 1) {\\n\\t\\tsecondWeakenThreads = 1;\\n\\t}\\n\\n\\tlet threads = {\\n\\t\\tw1: firstWeakenThreads,\\n\\t\\tw2: secondWeakenThreads,\\n\\t\\tg: growThreads,\\n\\t\\th: hackThreads\\n\\t}\\n\\n\\treturn threads;\\n}\\n\\nasync function runBatch(ns, target, times, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\t// Finish order:\\n\\t// 1. Hack\\n\\t// 2. Weaken\\n\\t// 3. Grow\\n\\t// 4. Weaken\\n\\n\\tlet w1Sleep = times.offset;\\n\\tlet w2Sleep = 3 * times.offset;\\n\\tlet gSleep = (times.w - times.g) + (times.offset * 2) - w2Sleep;\\n\\tlet hSleep = (times.w - times.h) - (w2Sleep + gSleep);\\n\\n\\tawait ns.sleep(w1Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w1, target);\\n\\t\\n\\tawait ns.sleep(w2Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w2, target);\\n\\t\\n\\tawait ns.sleep(gSleep);\\n\\tns.exec(\\\"scripts/112-grow.js\\\", server.hostname, threads.g, target);\\n\\t\\n\\tif (!preparingServer) {\\n\\t\\tawait ns.sleep(hSleep);\\n\\t\\tns.exec(\\\"scripts/111-hack.js\\\", server.hostname, threads.h, target);\\n\\t}\\n}\",\"filename\":\"/scripts/110-batch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/6494a9f2-da7c-42b0-891c-4d8b7b2b9fdb\",\"moduleSequenceNumber\":1994}],\"dependents\":[],\"ramUsage\":10.15,\"server\":\"pserv-019\",\"moduleSequenceNumber\":1994,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.hack(target);\\t\\n}\",\"filename\":\"/scripts/111-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-019\",\"moduleSequenceNumber\":1990,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"/scripts/112-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/112-grow.js\",\"url\":\"blob:https://danielyxie.github.io/13219c68-520c-4fe9-9701-6f5be272098c\",\"moduleSequenceNumber\":2126}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-019\",\"moduleSequenceNumber\":2126,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"/scripts/113-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/e14aff99-0706-4a07-9fcd-b508953722ee\",\"moduleSequenceNumber\":1995}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-019\",\"moduleSequenceNumber\":1995,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-020\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-020\",\"httpPortOpen\":false,\"ip\":\"73.8.7.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":957.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/scripts/100-batch-controller.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.209999999999965,\"pid\":8791,\"ramUsage\":5.75,\"server\":\"pserv-020\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",524288,true],\"dataMap\":{},\"filename\":\"/scripts/110-batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.209999999999965,\"pid\":8792,\"ramUsage\":10.15,\"server\":\"pserv-020\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.00999999999996,\"pid\":8805,\"ramUsage\":1.75,\"server\":\"pserv-020\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/scripts/113-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.409999999999954,\"pid\":8822,\"ramUsage\":1.75,\"server\":\"pserv-020\",\"threads\":537,\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/54af64eb-1a57-4410-87e8-fde94cf9f576\",\"moduleSequenceNumber\":2141}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet debug = ns.args[0];\\n\\n\\tif (debug) {\\n\\t\\tawait earn(ns);\\n\\t} else {\\n\\t\\twhile (true) {\\n\\t\\t\\tawait earn(ns);\\n\\t\\t\\tawait ns.sleep(60000);\\n\\t\\t}\\n\\t}\\n}\\n\\nasync function earn(ns) {\\n\\tlet pservLimit = ns.getPurchasedServerLimit();\\n\\tlet maxServerRam = ns.getPurchasedServerMaxRam();\\n\\tlet maxServerCost = ns.getPurchasedServerCost(maxServerRam);\\n\\tlet money = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tlet pservs = ns.getPurchasedServers();\\n\\t\\n\\t// Identify targets, in order of best to hack.\\n\\tlet targets = getTargets(ns);\\n\\n\\t// Make sure that \\\"home\\\" is hacking the one at the target\\n\\t// top of the list.\\n\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", targets[0].hostname);\\n\\tif (!correctTarget) {\\n\\t\\t// Kill all scripts except this one.\\n\\t\\tlet currentScripts = ns.ps(\\\"home\\\");\\n\\t\\tlet batchScripts = currentScripts.filter( s => {\\n\\t\\t\\treturn s.filename != ns.getScriptName();\\n\\t\\t});\\n\\t\\tbatchScripts.forEach(s => {\\n\\t\\t\\tns.kill(s.pid);\\n\\t\\t});\\n\\n\\t\\t// Start with the correct one!\\n\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", \\\"home\\\", 1, targets[0].hostname);\\n\\t}\\n\\n\\t// Buy a maxed out server to hack other targets.\\n\\tif (money >= maxServerCost && pservs.length < pservLimit) {\\n\\t\\tlet i = pservs.length + 1;\\n\\t\\tlet suffix = \\\"000\\\";\\n\\n\\t\\tif (i < 10) {\\n\\t\\t\\tsuffix = \\\"00\\\" + i.toString();\\n\\t\\t} else if (i < 100) {\\n\\t\\t\\tsuffix = \\\"0\\\" + i.toString();\\n\\t\\t} else {\\n\\t\\t\\tsuffix = i.toString();\\n\\t\\t}\\n\\n\\t\\tlet hostname = \\\"pserv-\\\" + suffix;\\n\\t\\tns.purchaseServer(hostname, ns.getPurchasedServerMaxRam());\\n\\t}\\n\\n\\t// Starting hacking using purchased servers.\\n\\t// Get pservs again.\\n\\tpservs = ns.getPurchasedServers();\\n\\n\\tfor (let n in pservs) {\\n\\t\\tlet p = pservs[n]\\n\\t\\t// Make sure pserv has the latest scripts.\\n\\t\\t// Get scripts on home and on server.\\n\\t\\tlet homeScripts = ns.ls(\\\"home\\\", \\\"/scripts/\\\");\\n\\t\\t\\n\\t\\t// Copy all scripts back to server.\\n\\t\\tawait ns.scp(homeScripts, p);\\n\\n\\t\\tlet i = parseInt(p.split(\\\"-\\\").pop());\\n\\t\\tlet correctTarget = ns.isRunning(\\\"/scripts/100-batch-controller.js\\\", p, targets[i].hostname);\\n\\t\\tif (!correctTarget) {\\n\\t\\t\\t// Kill all scripts on the server.\\n\\t\\t\\tns.killall(p);\\n\\n\\t\\t\\t// Start with the correct one!\\n\\t\\t\\tns.exec(\\\"/scripts/100-batch-controller.js\\\", p, 1, targets[i].hostname);\\n\\t\\t}\\n\\t}\\t\\n}\\n\\nfunction getTargets(ns) {\\n\\t// TODO: Having to cap infinite loop arbitrarily. Struggling\\n\\t// to get the scanQueue to remove a server once scanned.\\n\\n\\tlet targets = [];\\n\\tlet scanQueue = [];\\n\\tlet scanned = [];\\n\\n\\tlet levelOneTargets = ns.scan();\\n\\tlevelOneTargets.forEach( t => {\\n\\t\\tlet server = ns.getServer(t);\\n\\t\\tif (!server.purchasedByPlayer && t !== \\\"home\\\" && t !== \\\"darkweb\\\") {\\n\\t\\t\\ttargets.push(t);\\n\\t\\t\\tscanQueue.push(t);\\n\\t\\t}\\n\\t});\\n\\t\\n\\tlet i = 0\\n\\twhile (scanQueue.length > 0 && i < 30) {\\n\\t\\tlet results = [];\\n\\n\\t\\tscanQueue.forEach( t => {\\n\\t\\t\\tlet result = ns.scan(t);\\n\\t\\t\\tresult.forEach( server => {\\n\\t\\t\\t\\tresults.push(server)\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\t// Do something with results.\\n\\t\\tlet uniqueResults = [...new Set(results)];\\n\\t\\tuniqueResults.forEach( async r => {\\n\\t\\t\\tif (r in scanned === false) {\\n\\t\\t\\t\\ttargets.push(r);\\t\\n\\t\\t\\t\\tscanQueue.push(r);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\ti++;\\n\\t};\\n\\n\\tlet uniqueTargets = [...new Set(targets)];\\n\\n\\tlet targetServers = [];\\n\\tuniqueTargets.forEach( t => {\\n\\t\\ttargetServers.push(ns.getServer(t));\\n\\t});\\n\\n\\tlet hackableTargets = getHackableTargets(ns, targetServers);\\n\\tlet orderedTargets = getOrderedTargets(ns, hackableTargets);\\n\\n\\treturn orderedTargets;\\n}\\n\\nfunction getHackableTargets(ns, targets) {\\n\\t// Conditions\\n\\t//\\t- Player hacking skill must be greater than skill required.\\n\\t//\\t- Max possible money must be greater than zero.\\n\\n\\tlet hackingSkill = ns.getHackingLevel();\\n\\n\\tlet hackableTargets = targets.filter( t => {\\n\\t\\treturn hackingSkill >= t.requiredHackingSkill && ns.getServerMaxMoney(t.hostname) > 0;\\n\\t});\\n\\n\\treturn hackableTargets;\\n}\\n\\nfunction getOrderedTargets(ns, hackableTargets) {\\n\\t// Score is the maximum dollars per second.\\n\\t// This is not the same rate that will be effected in\\n\\t// practice, as this would drain the server of all money.\\n\\n\\tlet scoredTargets = [];\\n\\n\\thackableTargets.forEach( h => {\\n\\t\\tlet maxMoney = ns.getServerMaxMoney(h.hostname);\\n\\t\\tlet batchTime = ns.getWeakenTime(h.hostname) + 1000; // Weaken always takes longest.\\n\\t\\tlet score = maxMoney / batchTime;\\n\\t\\tscoredTargets.push({\\n\\t\\t\\thostname: h.hostname,\\n\\t\\t\\tscore: score\\n\\t\\t});\\n\\t});\\n\\n\\tlet orderedTargets = scoredTargets.sort( (a, b) => {\\n\\t\\treturn b.score - a.score;\\n\\t});\\n\\n\\tlet orderedTargetServers = [];\\n\\torderedTargets.forEach( o => {\\n\\t\\torderedTargetServers.push(ns.getServer(o.hostname));\\n\\t});\\n\\n\\treturn orderedTargets;\\n}\",\"filename\":\"/scripts/000-master-controller.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":12.35,\"server\":\"pserv-020\",\"moduleSequenceNumber\":2133,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet server = ns.getServer();\\n\\n\\tlet maxThreads = Math.trunc(ns.getServerMaxRam(server.hostname) / 2);\\n\\tlet offset = 200;\\n\\n\\t// Prepare server.\\n\\tunlockServer(ns, target);\\n\\n\\tlet serverReady = false\\n\\twhile (!serverReady) {\\n\\t\\tstartBatch(ns, target, maxThreads, true);\\n        serverReady = getServerStatus(ns, target);\\n\\t\\tif (!serverReady) {\\n            let waitTime = ns.getWeakenTime(target);\\n\\t\\t\\tawait ns.sleep(waitTime + (5 * offset));\\n\\t\\t}\\n\\t}\\n\\n\\t// Set up and run batches.\\n\\twhile (true) {\\n        let freeRam = ns.getServerMaxRam(server.hostname) - ns.getServerUsedRam(server.hostname);\\n        if (freeRam >= 20) {\\n            startBatch(ns, target, maxThreads, false);\\n            await ns.sleep(1000);\\n        } else {\\n            await ns.sleep(2000);\\n        }\\n\\t}\\n}\\n\\nfunction getServerStatus(ns, target) {\\n    let maxMoney = ns.getServerMaxMoney(target);\\n    let currentMoney = ns.getServerMoneyAvailable(target);\\n    let moneyReady = maxMoney == currentMoney;\\n\\n    let minSecurity = ns.getServerMinSecurityLevel(target);\\n    let currentSecurity = ns.getServerSecurityLevel(target);\\n    let securityReady = minSecurity == currentSecurity;\\n\\n    if (moneyReady && securityReady) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction unlockServer(ns, target) {\\n    try {\\n        ns.brutessh(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.ftpcrack(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.relaysmtp(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.httpworm(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    try {\\n        ns.sqlinject(target);\\n    } catch (error) {\\n        ns.print(error)\\n    }\\n\\n    ns.nuke(target);\\n}\\n\\nfunction startBatch(ns, target, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\tns.exec(\\\"scripts/110-batch.js\\\", server.hostname, 1, target, threads, preparingServer);\\n}\",\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/100-batch-controller.js\",\"url\":\"blob:https://danielyxie.github.io/414d4034-85d6-4ec4-916f-db932440261a\",\"moduleSequenceNumber\":2139}],\"dependents\":[],\"ramUsage\":5.75,\"server\":\"pserv-020\",\"moduleSequenceNumber\":2139,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet maxThreads = ns.args[1];\\n\\tlet preparingServer = ns.args[2] | false;\\n\\n\\tlet times = getTimes(ns, target);\\n\\tlet threads = getThreads(ns, target, maxThreads);\\n\\n\\tlet validThreads = Object.keys(threads).every( n => threads[n] >= 1);\\n\\t// ns.tprint(validThreads);\\n\\tif (validThreads) {\\n\\t\\tawait runBatch(ns, target, times, threads, preparingServer);\\n\\t}\\n}\\n\\nfunction getTimes(ns, target) {\\n\\t// Get run times for server.\\n\\tlet wTime = ns.getWeakenTime(target);\\n\\tlet gTime = ns.getGrowTime(target);\\n\\tlet hTime = ns.getHackTime(target);\\n\\tlet times = {\\n\\t\\tw: wTime,\\n\\t\\tg: gTime,\\n\\t\\th: hTime,\\n\\t\\toffset: 200\\n\\t}\\n\\n\\treturn times;\\n}\\n\\nfunction getThreads(ns, target, maxThreads) {\\n\\tlet multiplier = 2\\n\\n\\t// Get ideal number of threads for preferred hack amount.\\n\\tlet maxHackAmount = ns.getServerMaxMoney(target) / multiplier;\\n\\tlet hackThreads = ns.hackAnalyzeThreads(target, maxHackAmount);\\n\\tlet hackSecurityEffect = ns.hackAnalyzeSecurity(hackThreads);\\n\\n\\t// First weaken reduces security after hack. Calculate threads needed.\\n\\tlet firstWeakenEffect = 0;\\n\\tlet firstWeakenThreads = hackThreads\\n\\twhile (firstWeakenEffect < hackSecurityEffect) {\\n\\t\\tfirstWeakenEffect = ns.weakenAnalyze(firstWeakenThreads);\\n\\t\\tfirstWeakenThreads++;\\n\\t}\\n\\n\\t// Get grow threads needed to bring back up to full.\\n\\tlet growThreads = ns.growthAnalyze(target, multiplier);\\n\\tlet growSecurityEffect = ns.growthAnalyzeSecurity(growThreads);\\n\\n\\t// Second weaken reduces security after growth. Calculate threads needed.\\n\\tlet secondWeakenEffect = 0;\\n\\tlet secondWeakenThreads = growThreads\\n\\twhile (secondWeakenEffect < growSecurityEffect) {\\n\\t\\tsecondWeakenEffect = ns.weakenAnalyze(secondWeakenThreads);\\n\\t\\tsecondWeakenThreads++;\\n\\t}\\n\\n\\t// Scale down if this would use more threads than the maximum allowed.\\n\\tlet totalThreads = hackThreads + growThreads + firstWeakenThreads + secondWeakenThreads;\\n\\tif (totalThreads > maxThreads) {\\n\\t\\tlet ratio = (maxThreads / totalThreads) * 0.8;\\n\\t\\t\\n\\t\\thackThreads = hackThreads * ratio;\\n\\t\\tgrowThreads = growThreads * ratio;\\n\\t\\tfirstWeakenThreads = firstWeakenThreads * ratio;\\n\\t\\tsecondWeakenThreads = secondWeakenThreads * ratio;\\n\\t}\\n\\n\\tif (hackThreads < 1) {\\n\\t\\thackThreads = 1;\\n\\t}\\n\\tif (growThreads < 1) {\\n\\t\\tgrowThreads = 1;\\n\\t}\\n\\tif (firstWeakenThreads < 1) {\\n\\t\\tfirstWeakenThreads = 1;\\n\\t}\\n\\tif (secondWeakenThreads < 1) {\\n\\t\\tsecondWeakenThreads = 1;\\n\\t}\\n\\n\\tlet threads = {\\n\\t\\tw1: firstWeakenThreads,\\n\\t\\tw2: secondWeakenThreads,\\n\\t\\tg: growThreads,\\n\\t\\th: hackThreads\\n\\t}\\n\\n\\treturn threads;\\n}\\n\\nasync function runBatch(ns, target, times, threads, preparingServer) {\\n\\tlet server = ns.getServer();\\n\\t// Finish order:\\n\\t// 1. Hack\\n\\t// 2. Weaken\\n\\t// 3. Grow\\n\\t// 4. Weaken\\n\\n\\tlet w1Sleep = times.offset;\\n\\tlet w2Sleep = 3 * times.offset;\\n\\tlet gSleep = (times.w - times.g) + (times.offset * 2) - w2Sleep;\\n\\tlet hSleep = (times.w - times.h) - (w2Sleep + gSleep);\\n\\n\\tawait ns.sleep(w1Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w1, target);\\n\\t\\n\\tawait ns.sleep(w2Sleep);\\n\\tns.exec(\\\"scripts/113-weaken.js\\\", server.hostname, threads.w2, target);\\n\\t\\n\\tawait ns.sleep(gSleep);\\n\\tns.exec(\\\"scripts/112-grow.js\\\", server.hostname, threads.g, target);\\n\\t\\n\\tif (!preparingServer) {\\n\\t\\tawait ns.sleep(hSleep);\\n\\t\\tns.exec(\\\"scripts/111-hack.js\\\", server.hostname, threads.h, target);\\n\\t}\\n}\",\"filename\":\"/scripts/110-batch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/110-batch.js\",\"url\":\"blob:https://danielyxie.github.io/0aa19e59-57b9-4c7d-8cf1-bf711c0d13bc\",\"moduleSequenceNumber\":2140}],\"dependents\":[],\"ramUsage\":10.15,\"server\":\"pserv-020\",\"moduleSequenceNumber\":2140,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.hack(target);\\t\\n}\",\"filename\":\"/scripts/111-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-020\",\"moduleSequenceNumber\":2136,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"/scripts/112-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-020\",\"moduleSequenceNumber\":2137,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"/scripts/113-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/113-weaken.js\",\"url\":\"blob:https://danielyxie.github.io/54af64eb-1a57-4410-87e8-fde94cf9f576\",\"moduleSequenceNumber\":2141}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-020\",\"moduleSequenceNumber\":2141,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":2.528,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":3.6672,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":31.189,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":215.2835,\"isBanned\":false,\"isMember\":true,\"name\":\"Daedalus\",\"playerReputation\":19093964.898796543}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":217.7556,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":191.9934,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":189.5239,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":1.7324,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":335.248,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":64168.015804499395}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":50.355,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":102.7334,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":19.0394,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":195.1454,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":30685.330538414284,\"lastPrice\":30642.96736027471,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.46,\"b\":true,\"otlkMag\":20.26618720024707,\"otlkMagForecast\":68.25287267949287,\"cap\":517974297,\"spreadPerc\":0.5,\"shareTxForMovement\":44691,\"shareTxUntilMovement\":44691,\"totalShares\":114300000,\"maxShares\":22900000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":33218.89439734843,\"lastPrice\":33176.020532910065,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.43,\"b\":true,\"otlkMag\":20.79228081611223,\"otlkMagForecast\":69.18081794604201,\"cap\":293853185,\"spreadPerc\":0.3,\"shareTxForMovement\":49704,\"shareTxUntilMovement\":49704,\"totalShares\":98500000,\"maxShares\":19700000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":18576.903280275856,\"lastPrice\":18533.457167511267,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":false,\"otlkMag\":12.887435129681982,\"otlkMagForecast\":36.71060932332451,\"cap\":41891333,\"spreadPerc\":0.2,\"shareTxForMovement\":74725,\"shareTxUntilMovement\":74725,\"totalShares\":127200000,\"maxShares\":25400000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":29077.60195338711,\"lastPrice\":29017.428090609625,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":10.717740423547973,\"otlkMagForecast\":61.48861053020193,\"cap\":138668693,\"spreadPerc\":0.3,\"shareTxForMovement\":47484,\"shareTxUntilMovement\":47484,\"totalShares\":71100000,\"maxShares\":14200000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":49580.99387719469,\"lastPrice\":49682.32060654191,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":false,\"otlkMag\":11.546240524101135,\"otlkMagForecast\":38.62634395997415,\"cap\":348170173,\"spreadPerc\":0.1,\"shareTxForMovement\":86902,\"shareTxUntilMovement\":86902,\"totalShares\":51100000,\"maxShares\":10200000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":58141.247805101135,\"lastPrice\":57963.56102633276,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.02,\"b\":false,\"otlkMag\":17.24851445830713,\"otlkMagForecast\":32.86352697029675,\"cap\":968673998,\"spreadPerc\":0.6,\"shareTxForMovement\":64672,\"shareTxUntilMovement\":64672,\"totalShares\":33500000,\"maxShares\":6700000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":20238.430383276198,\"lastPrice\":20284.65680778525,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":false,\"otlkMag\":10.172583603194827,\"otlkMagForecast\":40.104580196945264,\"cap\":79892178,\"spreadPerc\":0.7,\"shareTxForMovement\":47696,\"shareTxUntilMovement\":47696,\"totalShares\":101500000,\"maxShares\":20300000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":17808.87369067618,\"lastPrice\":17877.917707181103,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.29,\"b\":false,\"otlkMag\":13.964415448667772,\"otlkMagForecast\":37.53690185891326,\"cap\":589180695,\"spreadPerc\":0.7,\"shareTxForMovement\":84094,\"shareTxUntilMovement\":84094,\"totalShares\":60600000,\"maxShares\":12100000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":22462.96274815805,\"lastPrice\":22516.970600497047,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":7.112325851243786,\"otlkMagForecast\":57.22512365437348,\"cap\":46017622,\"spreadPerc\":0.8,\"shareTxForMovement\":42493,\"shareTxUntilMovement\":42493,\"totalShares\":53100000,\"maxShares\":10600000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":23685.099653961926,\"lastPrice\":23729.94482136175,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":true,\"otlkMag\":8.388144973707394,\"otlkMagForecast\":60.01617753722372,\"cap\":411530909,\"spreadPerc\":0.6,\"shareTxForMovement\":95189,\"shareTxUntilMovement\":95189,\"totalShares\":49800000,\"maxShares\":10000000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":15848.214119519123,\"lastPrice\":15876.792095327566,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":true,\"otlkMag\":8.621280557252666,\"otlkMagForecast\":59.49129699075812,\"cap\":57550112,\"spreadPerc\":0.6,\"shareTxForMovement\":102200,\"shareTxUntilMovement\":102200,\"totalShares\":54000000,\"maxShares\":10800000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":15298.087256234217,\"lastPrice\":15261.394183606342,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":7.036868699201838,\"otlkMagForecast\":56.48135225516706,\"cap\":250561348,\"spreadPerc\":0.4,\"shareTxForMovement\":75558,\"shareTxUntilMovement\":75558,\"totalShares\":85800000,\"maxShares\":17200000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":28229.962092475278,\"lastPrice\":28283.4124639841,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":true,\"otlkMag\":7.503478687131379,\"otlkMagForecast\":57.492171417853974,\"cap\":370688018,\"spreadPerc\":0.4,\"shareTxForMovement\":83207,\"shareTxUntilMovement\":83207,\"totalShares\":36100000,\"maxShares\":7200000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":32113.242038452187,\"lastPrice\":32171.149601233992,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":true,\"otlkMag\":10.24420870712531,\"otlkMagForecast\":60.094509697907405,\"cap\":151311962,\"spreadPerc\":0.4,\"shareTxForMovement\":78091,\"shareTxUntilMovement\":78091,\"totalShares\":33400000,\"maxShares\":6700000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":12212.102908894512,\"lastPrice\":12232.656057676919,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":true,\"otlkMag\":5.523971302858089,\"otlkMagForecast\":55.95824235542423,\"cap\":274618437,\"spreadPerc\":0.6,\"shareTxForMovement\":48052,\"shareTxUntilMovement\":48052,\"totalShares\":53700000,\"maxShares\":10700000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":10563.609436486651,\"lastPrice\":10586.467777948907,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":5.3512733885697585,\"otlkMagForecast\":55.49584766040314,\"cap\":297168969,\"spreadPerc\":0.6,\"shareTxForMovement\":104972,\"shareTxUntilMovement\":104972,\"totalShares\":48700000,\"maxShares\":9700000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":23691.48160156671,\"lastPrice\":23741.322991483878,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":7.09139150580247,\"otlkMagForecast\":58.143070219142324,\"cap\":181953478,\"spreadPerc\":0.7,\"shareTxForMovement\":52063,\"shareTxUntilMovement\":52063,\"totalShares\":35000000,\"maxShares\":7000000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":15724.679750209538,\"lastPrice\":15751.617204385928,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":true,\"otlkMag\":9.980211172203008,\"otlkMagForecast\":61.0741177994887,\"cap\":23950308,\"spreadPerc\":0.7,\"shareTxForMovement\":86673,\"shareTxUntilMovement\":86673,\"totalShares\":44600000,\"maxShares\":8900000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":19698.459688614566,\"lastPrice\":19655.92669958675,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":5.385246461780658,\"otlkMagForecast\":54.55053775965279,\"cap\":423043651,\"spreadPerc\":0.4,\"shareTxForMovement\":97534,\"shareTxUntilMovement\":97534,\"totalShares\":27400000,\"maxShares\":5500000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":10893.284741209218,\"lastPrice\":10813.661702664547,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.45,\"b\":false,\"otlkMag\":1.8957125258299303,\"otlkMagForecast\":46.971499328968065,\"cap\":85270704,\"spreadPerc\":1.2,\"shareTxForMovement\":38719,\"shareTxUntilMovement\":38719,\"totalShares\":53600000,\"maxShares\":10700000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":5192.036653533165,\"lastPrice\":5211.3856889076615,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.24,\"b\":true,\"otlkMag\":7.085778205877783,\"otlkMagForecast\":56.03423567792294,\"cap\":6646113,\"spreadPerc\":0.9,\"shareTxForMovement\":40757,\"shareTxUntilMovement\":40757,\"totalShares\":52500000,\"maxShares\":10500000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":6257.890056447041,\"lastPrice\":6245.501772383083,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":true,\"otlkMag\":3.0718197976237276,\"otlkMagForecast\":51.123105357215955,\"cap\":15050576,\"spreadPerc\":0.9,\"shareTxForMovement\":114614,\"shareTxUntilMovement\":114614,\"totalShares\":35900000,\"maxShares\":7200000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":8065.529244028429,\"lastPrice\":8021.892204367672,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.81,\"b\":true,\"otlkMag\":8.512652557083173,\"otlkMagForecast\":59.546151726744846,\"cap\":29763661,\"spreadPerc\":0.5,\"shareTxForMovement\":58677,\"shareTxUntilMovement\":58677,\"totalShares\":48000000,\"maxShares\":9600000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":3139.827901602108,\"lastPrice\":3124.24126050259,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.66,\"b\":false,\"otlkMag\":5.74327787725615,\"otlkMagForecast\":46.43083454801076,\"cap\":36300585,\"spreadPerc\":1,\"shareTxForMovement\":84123,\"shareTxUntilMovement\":84123,\"totalShares\":60900000,\"maxShares\":12200000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":2472.270383428058,\"lastPrice\":2479.7005038059447,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1,\"b\":false,\"otlkMag\":5.011840813508104,\"otlkMagForecast\":44.67772070677488,\"cap\":20370349,\"spreadPerc\":0.8,\"shareTxForMovement\":94177,\"shareTxUntilMovement\":94177,\"totalShares\":90300000,\"maxShares\":18100000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":3326.317802809418,\"lastPrice\":3354.209043094974,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.79,\"b\":true,\"otlkMag\":1.70750912718126,\"otlkMagForecast\":40.81817615079046,\"cap\":48896875,\"spreadPerc\":1.7,\"shareTxForMovement\":45561,\"shareTxUntilMovement\":45561,\"totalShares\":20900000,\"maxShares\":4200000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":4314.969997996756,\"lastPrice\":4328.327181389319,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.03,\"b\":true,\"otlkMag\":1.1228697195985564,\"otlkMagForecast\":52.54108262317953,\"cap\":21966621,\"spreadPerc\":1.3,\"shareTxForMovement\":42003,\"shareTxUntilMovement\":42003,\"totalShares\":14500000,\"maxShares\":2900000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":757.8063488827839,\"lastPrice\":755.9887201209863,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":false,\"otlkMag\":2.2484525518497795,\"otlkMagForecast\":50.883090071915035,\"cap\":9445249,\"spreadPerc\":0.6,\"shareTxForMovement\":123151,\"shareTxUntilMovement\":123151,\"totalShares\":69200000,\"maxShares\":13800000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":2807.6209472444075,\"lastPrice\":2791.596395865652,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.91,\"b\":false,\"otlkMag\":5.153912546095101,\"otlkMagForecast\":47.092086285113645,\"cap\":7456804,\"spreadPerc\":0.7,\"shareTxForMovement\":68809,\"shareTxUntilMovement\":68809,\"totalShares\":8600000,\"maxShares\":1700000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":426.11972543738347,\"lastPrice\":423.51046224329536,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.05,\"b\":false,\"otlkMag\":5.633996946013301,\"otlkMagForecast\":47.28111007581817,\"cap\":6349325,\"spreadPerc\":0.7,\"shareTxForMovement\":29213,\"shareTxUntilMovement\":29213,\"totalShares\":146900000,\"maxShares\":29400000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":1013.830326894937,\"lastPrice\":1019.101548384379,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.73,\"b\":false,\"otlkMag\":13.126713301361786,\"otlkMagForecast\":36.84086673168752,\"cap\":1604554,\"spreadPerc\":0.6,\"shareTxForMovement\":37164,\"shareTxUntilMovement\":37164,\"totalShares\":85400000,\"maxShares\":17100000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":31393.886835990033,\"lastPrice\":31318.587345900196,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":false,\"otlkMag\":6.937524838705801,\"otlkMagForecast\":41.91779912825524,\"cap\":653968785,\"spreadPerc\":0.5,\"shareTxForMovement\":140950,\"shareTxUntilMovement\":140950,\"totalShares\":13400000,\"maxShares\":2700000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":20912.83685187174,\"lastPrice\":20874.567843230834,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":11.714468471358959,\"otlkMagForecast\":61.02772284899598,\"cap\":210799105,\"spreadPerc\":0.3,\"shareTxForMovement\":98080,\"shareTxUntilMovement\":98080,\"totalShares\":21400000,\"maxShares\":4300000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":8,\"lastUpdate\":1644708376962,\"ticksUntilCycle\":62}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":14,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1644622861394","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1644708378573"}}